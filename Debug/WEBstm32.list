
WEBstm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002060  080147bc  080147bc  000247bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801681c  0801681c  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801681c  0801681c  0002681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016824  08016824  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016824  08016824  00026824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016828  08016828  00026828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801682c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009780  200001f0  08016a18  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009970  08016a18  00039970  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211b5  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b10  00000000  00000000  000513ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00057ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  000597f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e480  00000000  00000000  0005af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca99  00000000  00000000  00089390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb6ce  00000000  00000000  000b5e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001814f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd4  00000000  00000000  00181548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001f0 	.word	0x200001f0
 8000200:	00000000 	.word	0x00000000
 8000204:	080147a4 	.word	0x080147a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001f4 	.word	0x200001f4
 8000220:	080147a4 	.word	0x080147a4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b976 	b.w	8000538 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	4688      	mov	r8, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14d      	bne.n	8000310 <__udivmoddi4+0xac>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d968      	bls.n	800034c <__udivmoddi4+0xe8>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b152      	cbz	r2, 8000296 <__udivmoddi4+0x32>
 8000280:	fa01 f302 	lsl.w	r3, r1, r2
 8000284:	f1c2 0120 	rsb	r1, r2, #32
 8000288:	fa20 f101 	lsr.w	r1, r0, r1
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	ea41 0803 	orr.w	r8, r1, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800029a:	fbb8 f7f1 	udiv	r7, r8, r1
 800029e:	fa1f fe8c 	uxth.w	lr, ip
 80002a2:	fb01 8817 	mls	r8, r1, r7, r8
 80002a6:	fb07 f00e 	mul.w	r0, r7, lr
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b0:	4298      	cmp	r0, r3
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0303 	adds.w	r3, ip, r3
 80002b8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002bc:	f080 811e 	bcs.w	80004fc <__udivmoddi4+0x298>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f240 811b 	bls.w	80004fc <__udivmoddi4+0x298>
 80002c6:	3f02      	subs	r7, #2
 80002c8:	4463      	add	r3, ip
 80002ca:	1a1b      	subs	r3, r3, r0
 80002cc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002d0:	fb01 3310 	mls	r3, r1, r0, r3
 80002d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002de:	45a6      	cmp	lr, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ea:	f080 8109 	bcs.w	8000500 <__udivmoddi4+0x29c>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f240 8106 	bls.w	8000500 <__udivmoddi4+0x29c>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	2100      	movs	r1, #0
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000302:	b11e      	cbz	r6, 800030c <__udivmoddi4+0xa8>
 8000304:	2300      	movs	r3, #0
 8000306:	40d4      	lsrs	r4, r2
 8000308:	e9c6 4300 	strd	r4, r3, [r6]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0xc2>
 8000314:	2e00      	cmp	r6, #0
 8000316:	f000 80ee 	beq.w	80004f6 <__udivmoddi4+0x292>
 800031a:	2100      	movs	r1, #0
 800031c:	e9c6 0500 	strd	r0, r5, [r6]
 8000320:	4608      	mov	r0, r1
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x160>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd4>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fc 	bhi.w	8000530 <__udivmoddi4+0x2cc>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0303 	sbc.w	r3, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e2      	beq.n	800030c <__udivmoddi4+0xa8>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7df      	b.n	800030c <__udivmoddi4+0xa8>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xec>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 8091 	bne.w	800047c <__udivmoddi4+0x218>
 800035a:	eba1 000c 	sub.w	r0, r1, ip
 800035e:	2101      	movs	r1, #1
 8000360:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000364:	fa1f fe8c 	uxth.w	lr, ip
 8000368:	fbb0 f3f7 	udiv	r3, r0, r7
 800036c:	fb07 0013 	mls	r0, r7, r3, r0
 8000370:	0c25      	lsrs	r5, r4, #16
 8000372:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000376:	fb0e f003 	mul.w	r0, lr, r3
 800037a:	42a8      	cmp	r0, r5
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x12c>
 800037e:	eb1c 0505 	adds.w	r5, ip, r5
 8000382:	f103 38ff 	add.w	r8, r3, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x12a>
 8000388:	42a8      	cmp	r0, r5
 800038a:	f200 80ce 	bhi.w	800052a <__udivmoddi4+0x2c6>
 800038e:	4643      	mov	r3, r8
 8000390:	1a2d      	subs	r5, r5, r0
 8000392:	fbb5 f0f7 	udiv	r0, r5, r7
 8000396:	fb07 5510 	mls	r5, r7, r0, r5
 800039a:	fb0e fe00 	mul.w	lr, lr, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x156>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 35ff 	add.w	r5, r0, #4294967295
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x154>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80b6 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 80003b8:	4628      	mov	r0, r5
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	e79e      	b.n	8000302 <__udivmoddi4+0x9e>
 80003c4:	f1c1 0720 	rsb	r7, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	fbba f8f9 	udiv	r8, sl, r9
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e6:	408d      	lsls	r5, r1
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	431d      	orrs	r5, r3
 80003ee:	fa00 f301 	lsl.w	r3, r0, r1
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	0c2c      	lsrs	r4, r5, #16
 80003f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2bc>
 8000410:	42a0      	cmp	r0, r4
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2bc>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4464      	add	r4, ip
 800041c:	1a24      	subs	r4, r4, r0
 800041e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000422:	fb09 4410 	mls	r4, r9, r0, r4
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	b2ad      	uxth	r5, r5
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1e2>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 35ff 	add.w	r5, r0, #4294967295
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2b4>
 800043e:	45a6      	cmp	lr, r4
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2b4>
 8000442:	3802      	subs	r0, #2
 8000444:	4464      	add	r4, ip
 8000446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044a:	fba0 9502 	umull	r9, r5, r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	42ac      	cmp	r4, r5
 8000454:	46c8      	mov	r8, r9
 8000456:	46ae      	mov	lr, r5
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x2a4>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x2a0>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d069      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000460:	ebb3 0208 	subs.w	r2, r3, r8
 8000464:	eb64 040e 	sbc.w	r4, r4, lr
 8000468:	fa22 f301 	lsr.w	r3, r2, r1
 800046c:	fa04 f707 	lsl.w	r7, r4, r7
 8000470:	431f      	orrs	r7, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	2100      	movs	r1, #0
 800047a:	e747      	b.n	800030c <__udivmoddi4+0xa8>
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	f1c2 0120 	rsb	r1, r2, #32
 8000484:	fa25 f301 	lsr.w	r3, r5, r1
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa20 f101 	lsr.w	r1, r0, r1
 8000490:	4095      	lsls	r5, r2
 8000492:	430d      	orrs	r5, r1
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3311 	mls	r3, r7, r1, r3
 800049c:	fa1f fe8c 	uxth.w	lr, ip
 80004a0:	0c28      	lsrs	r0, r5, #16
 80004a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a6:	fb01 f30e 	mul.w	r3, r1, lr
 80004aa:	4283      	cmp	r3, r0
 80004ac:	fa04 f402 	lsl.w	r4, r4, r2
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x260>
 80004b2:	eb1c 0000 	adds.w	r0, ip, r0
 80004b6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b8>
 80004bc:	4283      	cmp	r3, r0
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b8>
 80004c0:	3902      	subs	r1, #2
 80004c2:	4460      	add	r0, ip
 80004c4:	1ac0      	subs	r0, r0, r3
 80004c6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ca:	fb07 0013 	mls	r0, r7, r3, r0
 80004ce:	b2ad      	uxth	r5, r5
 80004d0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d4:	fb03 f00e 	mul.w	r0, r3, lr
 80004d8:	42a8      	cmp	r0, r5
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x28a>
 80004dc:	eb1c 0505 	adds.w	r5, ip, r5
 80004e0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004e6:	42a8      	cmp	r0, r5
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	4465      	add	r5, ip
 80004ee:	1a28      	subs	r0, r5, r0
 80004f0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0x104>
 80004f6:	4631      	mov	r1, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e707      	b.n	800030c <__udivmoddi4+0xa8>
 80004fc:	462f      	mov	r7, r5
 80004fe:	e6e4      	b.n	80002ca <__udivmoddi4+0x66>
 8000500:	4618      	mov	r0, r3
 8000502:	e6f9      	b.n	80002f8 <__udivmoddi4+0x94>
 8000504:	454b      	cmp	r3, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f8>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000510:	3801      	subs	r0, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f8>
 8000514:	4643      	mov	r3, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x28a>
 8000518:	4628      	mov	r0, r5
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1e2>
 800051c:	4641      	mov	r1, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x260>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b8>
 8000524:	4464      	add	r4, ip
 8000526:	3802      	subs	r0, #2
 8000528:	e747      	b.n	80003ba <__udivmoddi4+0x156>
 800052a:	3b02      	subs	r3, #2
 800052c:	4465      	add	r5, ip
 800052e:	e72f      	b.n	8000390 <__udivmoddi4+0x12c>
 8000530:	4608      	mov	r0, r1
 8000532:	e706      	b.n	8000342 <__udivmoddi4+0xde>
 8000534:	4631      	mov	r1, r6
 8000536:	e6e9      	b.n	800030c <__udivmoddi4+0xa8>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <FlashRead>:
#include "Flash.h"

uint32_t FlashRead(uint32_t addr)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
return *(__IO uint32_t*)addr;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
	...

08000554 <FlashWrite_NET>:
{
return *(__IO uint32_t*)addr;
}

void FlashWrite_NET(uint32_t *ip, uint32_t *mask, uint32_t *gw, uint16_t *port)
{
 8000554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000558:	b099      	sub	sp, #100	; 0x64
 800055a:	af00      	add	r7, sp, #0
 800055c:	6178      	str	r0, [r7, #20]
 800055e:	6139      	str	r1, [r7, #16]
 8000560:	60fa      	str	r2, [r7, #12]
 8000562:	60bb      	str	r3, [r7, #8]
	uint32_t relay32[16];
	uint64_t * relay64;
	for(uint8_t i = 0;i<16;i++)
 8000564:	2300      	movs	r3, #0
 8000566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800056a:	e017      	b.n	800059c <FlashWrite_NET+0x48>
	{
		relay32[i] = FlashRead(FLASH_RELAY+(i*4));
 800056c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	461a      	mov	r2, r3
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <FlashWrite_NET+0x118>)
 8000576:	4413      	add	r3, r2
 8000578:	f897 605f 	ldrb.w	r6, [r7, #95]	; 0x5f
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ffdd 	bl	800053c <FlashRead>
 8000582:	4602      	mov	r2, r0
 8000584:	00b3      	lsls	r3, r6, #2
 8000586:	3358      	adds	r3, #88	; 0x58
 8000588:	f107 0108 	add.w	r1, r7, #8
 800058c:	440b      	add	r3, r1
 800058e:	f843 2c48 	str.w	r2, [r3, #-72]
	for(uint8_t i = 0;i<16;i++)
 8000592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000596:	3301      	adds	r3, #1
 8000598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800059c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d9e3      	bls.n	800056c <FlashWrite_NET+0x18>
	}
	relay64 = & relay32;
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	65bb      	str	r3, [r7, #88]	; 0x58
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005aa:	b672      	cpsid	i
}
 80005ac:	bf00      	nop
	__disable_irq();
	HAL_FLASH_Unlock();
 80005ae:	f003 f953 	bl	8003858 <HAL_FLASH_Unlock>

	FLASH_PageErase((__IO uint32_t*)FLASH_NET_DETAILS);
 80005b2:	482f      	ldr	r0, [pc, #188]	; (8000670 <FlashWrite_NET+0x11c>)
 80005b4:	f003 fa38 	bl	8003a28 <FLASH_PageErase>

	while((FLASH->SR & FLASH_SR_BSY) != 0);
 80005b8:	bf00      	nop
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <FlashWrite_NET+0x120>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1f9      	bne.n	80005ba <FlashWrite_NET+0x66>
	FLASH->CR &= ~FLASH_CR_PER;
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <FlashWrite_NET+0x120>)
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	4a2a      	ldr	r2, [pc, #168]	; (8000674 <FlashWrite_NET+0x120>)
 80005cc:	f023 0302 	bic.w	r3, r3, #2
 80005d0:	6113      	str	r3, [r2, #16]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_NET_DETAILS, ip);
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	17da      	asrs	r2, r3, #31
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005de:	4924      	ldr	r1, [pc, #144]	; (8000670 <FlashWrite_NET+0x11c>)
 80005e0:	2002      	movs	r0, #2
 80005e2:	f003 f8c9 	bl	8003778 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_NET_DETAILS+4, mask);
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	17da      	asrs	r2, r3, #31
 80005ea:	469a      	mov	sl, r3
 80005ec:	4693      	mov	fp, r2
 80005ee:	4652      	mov	r2, sl
 80005f0:	465b      	mov	r3, fp
 80005f2:	4921      	ldr	r1, [pc, #132]	; (8000678 <FlashWrite_NET+0x124>)
 80005f4:	2002      	movs	r0, #2
 80005f6:	f003 f8bf 	bl	8003778 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_NET_DETAILS+8, gw);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	17da      	asrs	r2, r3, #31
 80005fe:	4698      	mov	r8, r3
 8000600:	4691      	mov	r9, r2
 8000602:	4642      	mov	r2, r8
 8000604:	464b      	mov	r3, r9
 8000606:	491d      	ldr	r1, [pc, #116]	; (800067c <FlashWrite_NET+0x128>)
 8000608:	2002      	movs	r0, #2
 800060a:	f003 f8b5 	bl	8003778 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_NET_DETAILS+12, port);
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	17da      	asrs	r2, r3, #31
 8000612:	461c      	mov	r4, r3
 8000614:	4615      	mov	r5, r2
 8000616:	4622      	mov	r2, r4
 8000618:	462b      	mov	r3, r5
 800061a:	4919      	ldr	r1, [pc, #100]	; (8000680 <FlashWrite_NET+0x12c>)
 800061c:	2001      	movs	r0, #1
 800061e:	f003 f8ab 	bl	8003778 <HAL_FLASH_Program>

	for(uint8_t i = 0;i<8;i++)
 8000622:	2300      	movs	r3, #0
 8000624:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8000628:	e013      	b.n	8000652 <FlashWrite_NET+0xfe>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_RELAY+(i*8), relay64[i]);
 800062a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	490e      	ldr	r1, [pc, #56]	; (800066c <FlashWrite_NET+0x118>)
 8000632:	4419      	add	r1, r3
 8000634:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800063c:	4413      	add	r3, r2
 800063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000642:	2003      	movs	r0, #3
 8000644:	f003 f898 	bl	8003778 <HAL_FLASH_Program>
	for(uint8_t i = 0;i<8;i++)
 8000648:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800064c:	3301      	adds	r3, #1
 800064e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8000652:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000656:	2b07      	cmp	r3, #7
 8000658:	d9e7      	bls.n	800062a <FlashWrite_NET+0xd6>
	}
	HAL_FLASH_Lock();
 800065a:	f003 f923 	bl	80038a4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800065e:	b662      	cpsie	i
}
 8000660:	bf00      	nop

	__enable_irq();
}
 8000662:	bf00      	nop
 8000664:	3764      	adds	r7, #100	; 0x64
 8000666:	46bd      	mov	sp, r7
 8000668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800066c:	08017660 	.word	0x08017660
 8000670:	08017650 	.word	0x08017650
 8000674:	40022000 	.word	0x40022000
 8000678:	08017654 	.word	0x08017654
 800067c:	08017658 	.word	0x08017658
 8000680:	0801765c 	.word	0x0801765c

08000684 <FlashWrite_RELAY>:

void FlashWrite_RELAY(uint64_t * data)
{
 8000684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000688:	b08a      	sub	sp, #40	; 0x28
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
	uint32_t ip = FlashRead(FLASH_NET_DETAILS);
 800068e:	4839      	ldr	r0, [pc, #228]	; (8000774 <FlashWrite_RELAY+0xf0>)
 8000690:	f7ff ff54 	bl	800053c <FlashRead>
 8000694:	6238      	str	r0, [r7, #32]
	uint32_t mask = FlashRead(FLASH_NET_DETAILS+4);
 8000696:	4838      	ldr	r0, [pc, #224]	; (8000778 <FlashWrite_RELAY+0xf4>)
 8000698:	f7ff ff50 	bl	800053c <FlashRead>
 800069c:	61f8      	str	r0, [r7, #28]
	uint32_t gw = FlashRead(FLASH_NET_DETAILS+8);
 800069e:	4837      	ldr	r0, [pc, #220]	; (800077c <FlashWrite_RELAY+0xf8>)
 80006a0:	f7ff ff4c 	bl	800053c <FlashRead>
 80006a4:	61b8      	str	r0, [r7, #24]
	uint16_t port = FlashRead(FLASH_NET_DETAILS+12);
 80006a6:	4836      	ldr	r0, [pc, #216]	; (8000780 <FlashWrite_RELAY+0xfc>)
 80006a8:	f7ff ff48 	bl	800053c <FlashRead>
 80006ac:	4603      	mov	r3, r0
 80006ae:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop

	__disable_irq();
	HAL_FLASH_Unlock();
 80006b4:	f003 f8d0 	bl	8003858 <HAL_FLASH_Unlock>

	FLASH_PageErase((__IO uint32_t*)FLASH_NET_DETAILS);
 80006b8:	482e      	ldr	r0, [pc, #184]	; (8000774 <FlashWrite_RELAY+0xf0>)
 80006ba:	f003 f9b5 	bl	8003a28 <FLASH_PageErase>

	while((FLASH->SR & FLASH_SR_BSY) != 0);
 80006be:	bf00      	nop
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <FlashWrite_RELAY+0x100>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1f9      	bne.n	80006c0 <FlashWrite_RELAY+0x3c>
	FLASH->CR &= ~FLASH_CR_PER;
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <FlashWrite_RELAY+0x100>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <FlashWrite_RELAY+0x100>)
 80006d2:	f023 0302 	bic.w	r3, r3, #2
 80006d6:	6113      	str	r3, [r2, #16]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_NET_DETAILS, ip);
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	2200      	movs	r2, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006e4:	4923      	ldr	r1, [pc, #140]	; (8000774 <FlashWrite_RELAY+0xf0>)
 80006e6:	2002      	movs	r0, #2
 80006e8:	f003 f846 	bl	8003778 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_NET_DETAILS+4, mask);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	2200      	movs	r2, #0
 80006f0:	469a      	mov	sl, r3
 80006f2:	4693      	mov	fp, r2
 80006f4:	4652      	mov	r2, sl
 80006f6:	465b      	mov	r3, fp
 80006f8:	491f      	ldr	r1, [pc, #124]	; (8000778 <FlashWrite_RELAY+0xf4>)
 80006fa:	2002      	movs	r0, #2
 80006fc:	f003 f83c 	bl	8003778 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_NET_DETAILS+8, gw);
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	2200      	movs	r2, #0
 8000704:	4698      	mov	r8, r3
 8000706:	4691      	mov	r9, r2
 8000708:	4642      	mov	r2, r8
 800070a:	464b      	mov	r3, r9
 800070c:	491b      	ldr	r1, [pc, #108]	; (800077c <FlashWrite_RELAY+0xf8>)
 800070e:	2002      	movs	r0, #2
 8000710:	f003 f832 	bl	8003778 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_NET_DETAILS+12, port);
 8000714:	8afb      	ldrh	r3, [r7, #22]
 8000716:	2200      	movs	r2, #0
 8000718:	461c      	mov	r4, r3
 800071a:	4615      	mov	r5, r2
 800071c:	4622      	mov	r2, r4
 800071e:	462b      	mov	r3, r5
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <FlashWrite_RELAY+0xfc>)
 8000722:	2001      	movs	r0, #1
 8000724:	f003 f828 	bl	8003778 <HAL_FLASH_Program>

	for(uint8_t i = 0;i<8;i++)
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800072e:	e013      	b.n	8000758 <FlashWrite_RELAY+0xd4>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_RELAY+(i*8), data[i]);
 8000730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	4914      	ldr	r1, [pc, #80]	; (8000788 <FlashWrite_RELAY+0x104>)
 8000738:	4419      	add	r1, r3
 800073a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000748:	2003      	movs	r0, #3
 800074a:	f003 f815 	bl	8003778 <HAL_FLASH_Program>
	for(uint8_t i = 0;i<8;i++)
 800074e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000752:	3301      	adds	r3, #1
 8000754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800075c:	2b07      	cmp	r3, #7
 800075e:	d9e7      	bls.n	8000730 <FlashWrite_RELAY+0xac>
	}

	HAL_FLASH_Lock();
 8000760:	f003 f8a0 	bl	80038a4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000764:	b662      	cpsie	i
}
 8000766:	bf00      	nop
	__enable_irq();
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000772:	bf00      	nop
 8000774:	08017650 	.word	0x08017650
 8000778:	08017654 	.word	0x08017654
 800077c:	08017658 	.word	0x08017658
 8000780:	0801765c 	.word	0x0801765c
 8000784:	40022000 	.word	0x40022000
 8000788:	08017660 	.word	0x08017660

0800078c <flash_erase>:

void flash_erase()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
	__disable_irq();
	HAL_FLASH_Unlock();
 8000794:	f003 f860 	bl	8003858 <HAL_FLASH_Unlock>
	FLASH_PageErase((__IO uint32_t*)FLASH_NET_DETAILS);
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <flash_erase+0x48>)
 800079a:	f003 f945 	bl	8003a28 <FLASH_PageErase>
	while((FLASH->SR & FLASH_SR_BSY) != 0);
 800079e:	bf00      	nop
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <flash_erase+0x4c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f9      	bne.n	80007a0 <flash_erase+0x14>
	FLASH->CR &= ~FLASH_CR_PER;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <flash_erase+0x4c>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <flash_erase+0x4c>)
 80007b2:	f023 0302 	bic.w	r3, r3, #2
 80007b6:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_FLG, 0x00000000);
 80007b8:	f04f 0200 	mov.w	r2, #0
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	4906      	ldr	r1, [pc, #24]	; (80007dc <flash_erase+0x50>)
 80007c2:	2002      	movs	r0, #2
 80007c4:	f002 ffd8 	bl	8003778 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80007c8:	f003 f86c 	bl	80038a4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80007cc:	b662      	cpsie	i
}
 80007ce:	bf00      	nop
	__enable_irq();
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	08017650 	.word	0x08017650
 80007d8:	40022000 	.word	0x40022000
 80007dc:	080166a0 	.word	0x080166a0

080007e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007e4:	f3bf 8f4f 	dsb	sy
}
 80007e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <__NVIC_SystemReset+0x24>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007f2:	4904      	ldr	r1, [pc, #16]	; (8000804 <__NVIC_SystemReset+0x24>)
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_SystemReset+0x28>)
 80007f6:	4313      	orrs	r3, r2
 80007f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007fa:	f3bf 8f4f 	dsb	sy
}
 80007fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <__NVIC_SystemReset+0x20>
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	05fa0004 	.word	0x05fa0004

0800080c <GetFUTURE_RELAY>:
static uint8_t USBF=0;

static uint8_t * o_buf;

uint8_t * GetFUTURE_RELAY()
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	return FUTURE_RELAY;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <GetFUTURE_RELAY+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	20000000 	.word	0x20000000

08000820 <GetUVN_FLAGS>:

uint8_t GetUVN_FLAGS()
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	return UVN_FLAGS;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <GetUVN_FLAGS+0x10>)
 8000826:	781b      	ldrb	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	2000024c 	.word	0x2000024c

08000834 <GetINDX_FUTURE>:

uint8_t GetINDX_FUTURE()
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	return INDX_FUTURE;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <GetINDX_FUTURE+0x10>)
 800083a:	781b      	ldrb	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	2000024e 	.word	0x2000024e

08000848 <IncINDX_FUTURE>:

uint8_t IncINDX_FUTURE()
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	if(INDX_FUTURE<N_FUTURE-1)
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <IncINDX_FUTURE+0x34>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <IncINDX_FUTURE+0x38>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	429a      	cmp	r2, r3
 800085a:	da07      	bge.n	800086c <IncINDX_FUTURE+0x24>
	{
		INDX_FUTURE++;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <IncINDX_FUTURE+0x34>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <IncINDX_FUTURE+0x34>)
 8000866:	701a      	strb	r2, [r3, #0]
		return 1;
 8000868:	2301      	movs	r3, #1
 800086a:	e003      	b.n	8000874 <IncINDX_FUTURE+0x2c>
	}
	else
	{
		INDX_FUTURE=0;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <IncINDX_FUTURE+0x34>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		return  UVN_ER;
 8000872:	2300      	movs	r3, #0
	}
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	2000024e 	.word	0x2000024e
 8000880:	2000024d 	.word	0x2000024d

08000884 <SetUSBF>:

void SetUSBF()
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

	UVN_FLAGS^=0b00000001;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SetUSBF+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	f083 0301 	eor.w	r3, r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <SetUSBF+0x1c>)
 8000894:	701a      	strb	r2, [r3, #0]
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000024c 	.word	0x2000024c

080008a4 <SetExSigF>:

void SetExSigF()
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

	UVN_FLAGS^=0b00000010;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SetExSigF+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f083 0302 	eor.w	r3, r3, #2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <SetExSigF+0x1c>)
 80008b4:	701a      	strb	r2, [r3, #0]

}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000024c 	.word	0x2000024c

080008c4 <SetFlashF>:

void SetFlashF()
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

	UVN_FLAGS^=0b00000100;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SetFlashF+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f083 0304 	eor.w	r3, r3, #4
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <SetFlashF+0x1c>)
 80008d4:	701a      	strb	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	2000024c 	.word	0x2000024c

080008e4 <SetFutrConfF>:

void SetFutrConfF()
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

	UVN_FLAGS^=0b00001000;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SetFutrConfF+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	f083 0308 	eor.w	r3, r3, #8
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b03      	ldr	r3, [pc, #12]	; (8000900 <SetFutrConfF+0x1c>)
 80008f4:	701a      	strb	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000024c 	.word	0x2000024c

08000904 <GetUSBF>:

uint8_t GetUSBF()
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	return UVN_FLAGS;
 8000908:	4b02      	ldr	r3, [pc, #8]	; (8000914 <GetUSBF+0x10>)
 800090a:	781b      	ldrb	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	2000024c 	.word	0x2000024c

08000918 <SetBuf>:

void SetBuf(uint8_t * Buf)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	o_buf=Buf;
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <SetBuf+0x18>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000250 	.word	0x20000250

08000934 <GetBuf>:

uint8_t * GetBuf()
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	return o_buf;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <GetBuf+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000250 	.word	0x20000250

08000948 <uvnInit>:

void uvnInit(uint8_t * conf_rel)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	u8_t CURRENT_RELAY_START[65];
	for(uint8_t i = 0;i<64;i++)
 8000950:	2300      	movs	r3, #0
 8000952:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000956:	e015      	b.n	8000984 <uvnInit+0x3c>
	{
	CURRENT_RELAY[i]=0;
 8000958:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800095c:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <uvnInit+0x58>)
 800095e:	2100      	movs	r1, #0
 8000960:	54d1      	strb	r1, [r2, r3]
	CURRENT_RELAY_START[i+1]=conf_rel[i];
 8000962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	441a      	add	r2, r3
 800096a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800096e:	3301      	adds	r3, #1
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	3350      	adds	r3, #80	; 0x50
 8000974:	443b      	add	r3, r7
 8000976:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(uint8_t i = 0;i<64;i++)
 800097a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800097e:	3301      	adds	r3, #1
 8000980:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000984:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000988:	2b3f      	cmp	r3, #63	; 0x3f
 800098a:	d9e5      	bls.n	8000958 <uvnInit+0x10>
	}
	set_fault(CURRENT_RELAY_START);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fb67 	bl	8001064 <set_fault>
}
 8000996:	bf00      	nop
 8000998:	3750      	adds	r7, #80	; 0x50
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000020c 	.word	0x2000020c

080009a4 <set_PortD>:
static void set_PortD(u8_t relay, u8_t conf)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
	switch(relay)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	f200 80aa 	bhi.w	8000b12 <set_PortD+0x16e>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <set_PortD+0x20>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	08000a23 	.word	0x08000a23
 80009cc:	08000a71 	.word	0x08000a71
 80009d0:	08000abf 	.word	0x08000abf
			{

				case 1:

					if(conf == RL_SET)
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10a      	bne.n	80009f0 <set_PortD+0x4c>
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);//set - З// Ж/С прав.
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	484f      	ldr	r0, [pc, #316]	; (8000b1c <set_PortD+0x178>)
 80009e0:	f003 f9dd 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2108      	movs	r1, #8
 80009e8:	484d      	ldr	r0, [pc, #308]	; (8000b20 <set_PortD+0x17c>)
 80009ea:	f003 f9d8 	bl	8003d9e <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
					}
					break;
 80009ee:	e090      	b.n	8000b12 <set_PortD+0x16e>
					else if(conf == RL_RESET)
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10a      	bne.n	8000a0c <set_PortD+0x68>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	4848      	ldr	r0, [pc, #288]	; (8000b1c <set_PortD+0x178>)
 80009fc:	f003 f9cf 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	4846      	ldr	r0, [pc, #280]	; (8000b20 <set_PortD+0x17c>)
 8000a06:	f003 f9ca 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000a0a:	e082      	b.n	8000b12 <set_PortD+0x16e>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2108      	movs	r1, #8
 8000a10:	4842      	ldr	r0, [pc, #264]	; (8000b1c <set_PortD+0x178>)
 8000a12:	f003 f9c4 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4841      	ldr	r0, [pc, #260]	; (8000b20 <set_PortD+0x17c>)
 8000a1c:	f003 f9bf 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000a20:	e077      	b.n	8000b12 <set_PortD+0x16e>

				case 2:

					if(conf == RL_SET)
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d10a      	bne.n	8000a3e <set_PortD+0x9a>
					{
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//set К/С прав.
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	483c      	ldr	r0, [pc, #240]	; (8000b20 <set_PortD+0x17c>)
 8000a2e:	f003 f9b6 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	483a      	ldr	r0, [pc, #232]	; (8000b20 <set_PortD+0x17c>)
 8000a38:	f003 f9b1 	bl	8003d9e <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
					}
					break;
 8000a3c:	e069      	b.n	8000b12 <set_PortD+0x16e>
					else if(conf == RL_RESET)
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10a      	bne.n	8000a5a <set_PortD+0xb6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2120      	movs	r1, #32
 8000a48:	4835      	ldr	r0, [pc, #212]	; (8000b20 <set_PortD+0x17c>)
 8000a4a:	f003 f9a8 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	4833      	ldr	r0, [pc, #204]	; (8000b20 <set_PortD+0x17c>)
 8000a54:	f003 f9a3 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000a58:	e05b      	b.n	8000b12 <set_PortD+0x16e>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4830      	ldr	r0, [pc, #192]	; (8000b20 <set_PortD+0x17c>)
 8000a60:	f003 f99d 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	482d      	ldr	r0, [pc, #180]	; (8000b20 <set_PortD+0x17c>)
 8000a6a:	f003 f998 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000a6e:	e050      	b.n	8000b12 <set_PortD+0x16e>

				case 3:
					if(conf == RL_SET)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d10a      	bne.n	8000a8c <set_PortD+0xe8>
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);//set Ж/С прав.
 8000a76:	2201      	movs	r2, #1
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4828      	ldr	r0, [pc, #160]	; (8000b1c <set_PortD+0x178>)
 8000a7c:	f003 f98f 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	4827      	ldr	r0, [pc, #156]	; (8000b24 <set_PortD+0x180>)
 8000a86:	f003 f98a 	bl	8003d9e <HAL_GPIO_WritePin>
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
					}

					break;
 8000a8a:	e042      	b.n	8000b12 <set_PortD+0x16e>
					else if(conf == RL_RESET)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10a      	bne.n	8000aa8 <set_PortD+0x104>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	4821      	ldr	r0, [pc, #132]	; (8000b1c <set_PortD+0x178>)
 8000a98:	f003 f981 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4820      	ldr	r0, [pc, #128]	; (8000b24 <set_PortD+0x180>)
 8000aa2:	f003 f97c 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000aa6:	e034      	b.n	8000b12 <set_PortD+0x16e>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2120      	movs	r1, #32
 8000aac:	481b      	ldr	r0, [pc, #108]	; (8000b1c <set_PortD+0x178>)
 8000aae:	f003 f976 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <set_PortD+0x180>)
 8000ab8:	f003 f971 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000abc:	e029      	b.n	8000b12 <set_PortD+0x16e>
				case 4:
					if(conf == RL_SET)
 8000abe:	79bb      	ldrb	r3, [r7, #6]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10b      	bne.n	8000adc <set_PortD+0x138>
					{
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);//set К/П лев.
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <set_PortD+0x184>)
 8000aca:	f003 f968 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <set_PortD+0x184>)
 8000ad6:	f003 f962 	bl	8003d9e <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
					}
					break;
 8000ada:	e019      	b.n	8000b10 <set_PortD+0x16c>
					else if(conf ==RL_RESET)
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10b      	bne.n	8000afa <set_PortD+0x156>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <set_PortD+0x184>)
 8000ae8:	f003 f959 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <set_PortD+0x184>)
 8000af4:	f003 f953 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000af8:	e00a      	b.n	8000b10 <set_PortD+0x16c>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <set_PortD+0x184>)
 8000b00:	f003 f94d 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <set_PortD+0x184>)
 8000b0c:	f003 f947 	bl	8003d9e <HAL_GPIO_WritePin>
					break;
 8000b10:	bf00      	nop
			}
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	40011800 	.word	0x40011800

08000b2c <SyncREG>:

static void SyncREG(u8_t iR)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	switch(iR)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d002      	beq.n	8000b42 <SyncREG+0x16>
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d019      	beq.n	8000b74 <SyncREG+0x48>
 8000b40:	e031      	b.n	8000ba6 <SyncREG+0x7a>
	{
	case 1:
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b48:	482d      	ldr	r0, [pc, #180]	; (8000c00 <SyncREG+0xd4>)
 8000b4a:	f003 f928 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f001 fc0c 	bl	800236c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4829      	ldr	r0, [pc, #164]	; (8000c00 <SyncREG+0xd4>)
 8000b5c:	f003 f91f 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f001 fc03 	bl	800236c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6c:	4824      	ldr	r0, [pc, #144]	; (8000c00 <SyncREG+0xd4>)
 8000b6e:	f003 f916 	bl	8003d9e <HAL_GPIO_WritePin>
			break;
 8000b72:	e018      	b.n	8000ba6 <SyncREG+0x7a>

	case 2:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7a:	4821      	ldr	r0, [pc, #132]	; (8000c00 <SyncREG+0xd4>)
 8000b7c:	f003 f90f 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f001 fbf3 	bl	800236c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8c:	481c      	ldr	r0, [pc, #112]	; (8000c00 <SyncREG+0xd4>)
 8000b8e:	f003 f906 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f001 fbea 	bl	800236c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <SyncREG+0xd4>)
 8000ba0:	f003 f8fd 	bl	8003d9e <HAL_GPIO_WritePin>
			break;
 8000ba4:	bf00      	nop
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <SyncREG+0xd4>)
 8000bac:	f003 f8f7 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <SyncREG+0xd8>)
 8000bb6:	f003 f8f2 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4812      	ldr	r0, [pc, #72]	; (8000c08 <SyncREG+0xdc>)
 8000bc0:	f003 f8ed 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <SyncREG+0xd8>)
 8000bca:	f003 f8e8 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <SyncREG+0xdc>)
 8000bd4:	f003 f8e3 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <SyncREG+0xdc>)
 8000bde:	f003 f8de 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <SyncREG+0xe0>)
 8000be8:	f003 f8d9 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <SyncREG+0xd4>)
 8000bf4:	f003 f8d3 	bl	8003d9e <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40011800 	.word	0x40011800
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <set_Reg>:

static void set_Reg(u8_t* M)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	48ad      	ldr	r0, [pc, #692]	; (8000ed4 <set_Reg+0x2c4>)
 8000c1e:	f003 f8be 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	48ac      	ldr	r0, [pc, #688]	; (8000ed8 <set_Reg+0x2c8>)
 8000c28:	f003 f8b9 	bl	8003d9e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2120      	movs	r1, #32
 8000c30:	48a9      	ldr	r0, [pc, #676]	; (8000ed8 <set_Reg+0x2c8>)
 8000c32:	f003 f8b4 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	48a7      	ldr	r0, [pc, #668]	; (8000ed8 <set_Reg+0x2c8>)
 8000c3c:	f003 f8af 	bl	8003d9e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2120      	movs	r1, #32
 8000c44:	48a3      	ldr	r0, [pc, #652]	; (8000ed4 <set_Reg+0x2c4>)
 8000c46:	f003 f8aa 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	48a3      	ldr	r0, [pc, #652]	; (8000edc <set_Reg+0x2cc>)
 8000c50:	f003 f8a5 	bl	8003d9e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	48a1      	ldr	r0, [pc, #644]	; (8000ee0 <set_Reg+0x2d0>)
 8000c5a:	f003 f8a0 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c64:	489e      	ldr	r0, [pc, #632]	; (8000ee0 <set_Reg+0x2d0>)
 8000c66:	f003 f89a 	bl	8003d9e <HAL_GPIO_WritePin>
	u8_t k = 1; //счетчик реле от 1 до 4 на каждой микросхеме
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
	u8_t x =0; // счетчик микросхем
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73bb      	strb	r3, [r7, #14]
	for(int i=1;i<65;i++)
 8000c72:	2301      	movs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	e1b8      	b.n	8000fea <set_Reg+0x3da>
	{
		if ( (M[i] & R1_MASK) != (CURRENT_RELAY[i-1] & R1_MASK))
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	4997      	ldr	r1, [pc, #604]	; (8000ee4 <set_Reg+0x2d4>)
 8000c86:	5ccb      	ldrb	r3, [r1, r3]
 8000c88:	4053      	eors	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d024      	beq.n	8000cde <set_Reg+0xce>
		{
		switch( M[i] & R1_MASK )
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <set_Reg+0xa0>
		{
			case 0:
				set_PortD(k, RL_RESET);
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe7b 	bl	80009a4 <set_PortD>
				break;
 8000cae:	e005      	b.n	8000cbc <set_Reg+0xac>

			default:
				 set_PortD(k, RL_SET);
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe75 	bl	80009a4 <set_PortD>
				 break;
 8000cba:	bf00      	nop
		}
		 if(k<4)	{k++;}
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d803      	bhi.n	8000cca <set_Reg+0xba>
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e01e      	b.n	8000d08 <set_Reg+0xf8>
		 else 		{k=1; x++; SyncREG(x);}
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73bb      	strb	r3, [r7, #14]
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff28 	bl	8000b2c <SyncREG>
 8000cdc:	e014      	b.n	8000d08 <set_Reg+0xf8>
		}
		else
		{
			set_PortD(k, RL_SAVE);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe5e 	bl	80009a4 <set_PortD>
			if		(k<4)	 {k++;}
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d803      	bhi.n	8000cf6 <set_Reg+0xe6>
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e008      	b.n	8000d08 <set_Reg+0xf8>
			else 	{k=1; x++; SyncREG(x);}
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73bb      	strb	r3, [r7, #14]
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff12 	bl	8000b2c <SyncREG>
		}

		if ( (M[i] & R2_MASK) != (CURRENT_RELAY[i-1] & R2_MASK))
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4973      	ldr	r1, [pc, #460]	; (8000ee4 <set_Reg+0x2d4>)
 8000d16:	5ccb      	ldrb	r3, [r1, r3]
 8000d18:	4053      	eors	r3, r2
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d033      	beq.n	8000d8c <set_Reg+0x17c>
		{

		switch(M[i] & R2_MASK)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d115      	bne.n	8000d60 <set_Reg+0x150>
		{
			case 0:
				set_PortD(k, RL_SET);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2101      	movs	r1, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe33 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d803      	bhi.n	8000d4c <set_Reg+0x13c>
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	3301      	adds	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
				else {k=1; x++; SyncREG(x);}
				break;
 8000d4a:	e034      	b.n	8000db6 <set_Reg+0x1a6>
				else {k=1; x++; SyncREG(x);}
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	73bb      	strb	r3, [r7, #14]
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fee7 	bl	8000b2c <SyncREG>
				break;
 8000d5e:	e02a      	b.n	8000db6 <set_Reg+0x1a6>
			default:
				set_PortD(k, RL_RESET);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe1d 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d803      	bhi.n	8000d78 <set_Reg+0x168>
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
				else {k=1; x++; SyncREG(x);}
				break;
 8000d76:	e01e      	b.n	8000db6 <set_Reg+0x1a6>
				else {k=1; x++; SyncREG(x);}
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73bb      	strb	r3, [r7, #14]
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fed1 	bl	8000b2c <SyncREG>
				break;
 8000d8a:	e014      	b.n	8000db6 <set_Reg+0x1a6>
		  }
		}
		else
		{
			set_PortD(k, RL_SAVE);
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe07 	bl	80009a4 <set_PortD>
			if	 (k<4)	 {k++;}
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d803      	bhi.n	8000da4 <set_Reg+0x194>
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e008      	b.n	8000db6 <set_Reg+0x1a6>
			else {k=1; x++; SyncREG(x);}
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73bb      	strb	r3, [r7, #14]
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff febb 	bl	8000b2c <SyncREG>
		}
		if ( (M[i] & R3_MASK) != (CURRENT_RELAY[i-1] & R3_MASK))
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	4948      	ldr	r1, [pc, #288]	; (8000ee4 <set_Reg+0x2d4>)
 8000dc4:	5ccb      	ldrb	r3, [r1, r3]
 8000dc6:	4053      	eors	r3, r2
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d033      	beq.n	8000e3a <set_Reg+0x22a>
				{

			switch(M[i] & R3_MASK)
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d115      	bne.n	8000e0e <set_Reg+0x1fe>
			{
				case 0:
					set_PortD(k, RL_SET);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	2101      	movs	r1, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fddc 	bl	80009a4 <set_PortD>
					if	 (k<4)	 {k++;}
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d803      	bhi.n	8000dfa <set_Reg+0x1ea>
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
					else {k=1; x++; SyncREG(x);}
					break;
 8000df8:	e034      	b.n	8000e64 <set_Reg+0x254>
					else {k=1; x++; SyncREG(x);}
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73bb      	strb	r3, [r7, #14]
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe90 	bl	8000b2c <SyncREG>
					break;
 8000e0c:	e02a      	b.n	8000e64 <set_Reg+0x254>
				default:
					set_PortD(k, RL_RESET);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fdc6 	bl	80009a4 <set_PortD>
					if	 (k<4)	 {k++;}
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d803      	bhi.n	8000e26 <set_Reg+0x216>
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	3301      	adds	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
					else {k=1; x++; SyncREG(x);}
					break;
 8000e24:	e01e      	b.n	8000e64 <set_Reg+0x254>
					else {k=1; x++; SyncREG(x);}
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	73bb      	strb	r3, [r7, #14]
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fe7a 	bl	8000b2c <SyncREG>
					break;
 8000e38:	e014      	b.n	8000e64 <set_Reg+0x254>
			  }
			}
			else
			{
				set_PortD(k, RL_SAVE);
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fdb0 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d803      	bhi.n	8000e52 <set_Reg+0x242>
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e008      	b.n	8000e64 <set_Reg+0x254>
				else {k=1; x++; SyncREG(x);}
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	73bb      	strb	r3, [r7, #14]
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fe64 	bl	8000b2c <SyncREG>
			}
		if ( (M[i] & R4_MASK) != (CURRENT_RELAY[i-1] & R4_MASK))
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	491c      	ldr	r1, [pc, #112]	; (8000ee4 <set_Reg+0x2d4>)
 8000e72:	5ccb      	ldrb	r3, [r1, r3]
 8000e74:	4053      	eors	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03d      	beq.n	8000efc <set_Reg+0x2ec>
		{

		switch( M[i] & R4_MASK)// к/п - лев.
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d115      	bne.n	8000ebc <set_Reg+0x2ac>
		{
			case 0:
				set_PortD(k, RL_SET);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2101      	movs	r1, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fd85 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d803      	bhi.n	8000ea8 <set_Reg+0x298>
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
				else {k=1; x++; SyncREG(x);}
				break;
 8000ea6:	e03e      	b.n	8000f26 <set_Reg+0x316>
				else {k=1; x++; SyncREG(x);}
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	73bb      	strb	r3, [r7, #14]
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe39 	bl	8000b2c <SyncREG>
				break;
 8000eba:	e034      	b.n	8000f26 <set_Reg+0x316>
			 default:
				set_PortD(k, RL_RESET);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fd6f 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d80d      	bhi.n	8000ee8 <set_Reg+0x2d8>
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
				else {k=1; x++; SyncREG(x);}
				break;
 8000ed2:	e028      	b.n	8000f26 <set_Reg+0x316>
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40011800 	.word	0x40011800
 8000ee4:	2000020c 	.word	0x2000020c
				else {k=1; x++; SyncREG(x);}
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	7bbb      	ldrb	r3, [r7, #14]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73bb      	strb	r3, [r7, #14]
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fe19 	bl	8000b2c <SyncREG>
				break;
 8000efa:	e014      	b.n	8000f26 <set_Reg+0x316>
		}
		}
		else
		{
			set_PortD(k, RL_SAVE);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2102      	movs	r1, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd4f 	bl	80009a4 <set_PortD>
			if	 (k<4)	 {k++;}
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d803      	bhi.n	8000f14 <set_Reg+0x304>
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e008      	b.n	8000f26 <set_Reg+0x316>
			else {k=1; x++; SyncREG(x);}
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fe03 	bl	8000b2c <SyncREG>

		}
		if ( (M[i] & R5_MASK) != (CURRENT_RELAY[i-1] & R5_MASK))
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	4939      	ldr	r1, [pc, #228]	; (8001018 <set_Reg+0x408>)
 8000f34:	5ccb      	ldrb	r3, [r1, r3]
 8000f36:	4053      	eors	r3, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d033      	beq.n	8000faa <set_Reg+0x39a>
		{
		switch( M[i] & R5_MASK)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d115      	bne.n	8000f7e <set_Reg+0x36e>
		{
			case 0:
				set_PortD(k, RL_SET);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2101      	movs	r1, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd24 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d803      	bhi.n	8000f6a <set_Reg+0x35a>
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	3301      	adds	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
				else {k=1; x++; SyncREG(x);}
				break;
 8000f68:	e034      	b.n	8000fd4 <set_Reg+0x3c4>
				else {k=1; x++; SyncREG(x);}
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	3301      	adds	r3, #1
 8000f72:	73bb      	strb	r3, [r7, #14]
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fdd8 	bl	8000b2c <SyncREG>
				break;
 8000f7c:	e02a      	b.n	8000fd4 <set_Reg+0x3c4>
			 default:
				set_PortD(k, RL_RESET);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fd0e 	bl	80009a4 <set_PortD>
				if	 (k<4)	 {k++;}
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d803      	bhi.n	8000f96 <set_Reg+0x386>
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3301      	adds	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
				else {k=1; x++; SyncREG(x);}
				break;
 8000f94:	e01e      	b.n	8000fd4 <set_Reg+0x3c4>
				else {k=1; x++; SyncREG(x);}
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73bb      	strb	r3, [r7, #14]
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fdc2 	bl	8000b2c <SyncREG>
				break;
 8000fa8:	e014      	b.n	8000fd4 <set_Reg+0x3c4>
		}
		}
		else
		{
			set_PortD(k, RL_SAVE);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fcf8 	bl	80009a4 <set_PortD>
			if	 (k<4)	 {k++;}
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d803      	bhi.n	8000fc2 <set_Reg+0x3b2>
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e008      	b.n	8000fd4 <set_Reg+0x3c4>
			else {k=1; x++; SyncREG(x);}
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fdac 	bl	8000b2c <SyncREG>
		}

		CURRENT_RELAY[i-1]=M[i];
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	441a      	add	r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	7811      	ldrb	r1, [r2, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <set_Reg+0x408>)
 8000fe2:	54d1      	strb	r1, [r2, r3]
	for(int i=1;i<65;i++)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b40      	cmp	r3, #64	; 0x40
 8000fee:	f77f ae43 	ble.w	8000c78 <set_Reg+0x68>

	}
	//SyncREG(2);//ЭТО КОСТЫЛЬ
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <set_Reg+0x40c>)
 8000ffa:	f002 fed0 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ffe:	2005      	movs	r0, #5
 8001000:	f001 f9b4 	bl	800236c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <set_Reg+0x40c>)
 800100c:	f002 fec7 	bl	8003d9e <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000020c 	.word	0x2000020c
 800101c:	40011800 	.word	0x40011800

08001020 <relay_save>:


static void relay_save()
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
	if(UVN_FLAGS & 0b00000100)
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <relay_save+0x3c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d010      	beq.n	8001054 <relay_save+0x34>
	{
		uint64_t r[8];
		memcpy(r,CURRENT_RELAY,sizeof(CURRENT_RELAY));
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <relay_save+0x40>)
 8001034:	463c      	mov	r4, r7
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		FlashWrite_RELAY(r);
 800104c:	463b      	mov	r3, r7
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fb18 	bl	8000684 <FlashWrite_RELAY>
	}
}
 8001054:	bf00      	nop
 8001056:	3740      	adds	r7, #64	; 0x40
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	2000024c 	.word	0x2000024c
 8001060:	2000020c 	.word	0x2000020c

08001064 <set_fault>:
void set_fault (u8_t* M)

{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	set_Reg(M);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fdcf 	bl	8000c10 <set_Reg>
	relay_save();
 8001072:	f7ff ffd5 	bl	8001020 <relay_save>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <SetNET>:



void SetNET(u8_t* GtB)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b08a      	sub	sp, #40	; 0x28
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	u8_t n_ip [4]= {GtB[1],GtB[2],GtB[3],GtB[4]};
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	753b      	strb	r3, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	789b      	ldrb	r3, [r3, #2]
 8001090:	757b      	strb	r3, [r7, #21]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	78db      	ldrb	r3, [r3, #3]
 8001096:	75bb      	strb	r3, [r7, #22]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	75fb      	strb	r3, [r7, #23]
	u8_t n_mask [4]= {GtB[5],GtB[6],GtB[7],GtB[8]};
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	795b      	ldrb	r3, [r3, #5]
 80010a2:	743b      	strb	r3, [r7, #16]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	799b      	ldrb	r3, [r3, #6]
 80010a8:	747b      	strb	r3, [r7, #17]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	79db      	ldrb	r3, [r3, #7]
 80010ae:	74bb      	strb	r3, [r7, #18]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7a1b      	ldrb	r3, [r3, #8]
 80010b4:	74fb      	strb	r3, [r7, #19]
	u8_t n_gw [4]=  {GtB[9],GtB[10],GtB[11],GtB[12]};
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7a5b      	ldrb	r3, [r3, #9]
 80010ba:	733b      	strb	r3, [r7, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7a9b      	ldrb	r3, [r3, #10]
 80010c0:	737b      	strb	r3, [r7, #13]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7adb      	ldrb	r3, [r3, #11]
 80010c6:	73bb      	strb	r3, [r7, #14]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	73fb      	strb	r3, [r7, #15]
	u8_t n_port [4] = {GtB[14],GtB[13]};
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b9b      	ldrb	r3, [r3, #14]
 80010d6:	723b      	strb	r3, [r7, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7b5b      	ldrb	r3, [r3, #13]
 80010dc:	727b      	strb	r3, [r7, #9]
	uint32_t ip = *(uint32_t*) n_ip;
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t mask = *(uint32_t*) n_mask;
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	623b      	str	r3, [r7, #32]
	uint32_t gw = *(uint32_t*) n_gw;
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61fb      	str	r3, [r7, #28]
	uint16_t port = *(uint16_t*) n_port;
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	837b      	strh	r3, [r7, #26]
	FlashWrite_NET(ip ,mask, gw, port);
 80010fe:	8b7b      	ldrh	r3, [r7, #26]
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	6a39      	ldr	r1, [r7, #32]
 8001104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001106:	f7ff fa25 	bl	8000554 <FlashWrite_NET>
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <SaveFuture>:

void SaveFuture(uint8_t * M)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
			for(uint8_t i = 0; i<64; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e00f      	b.n	8001142 <SaveFuture+0x2e>
			{
				*(FUTURE_RELAY + i + INDX_FUTURE*64) = M[i];
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	441a      	add	r2, r3
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <SaveFuture+0x60>)
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4812      	ldr	r0, [pc, #72]	; (8001178 <SaveFuture+0x64>)
 8001130:	7800      	ldrb	r0, [r0, #0]
 8001132:	0180      	lsls	r0, r0, #6
 8001134:	4403      	add	r3, r0
 8001136:	440b      	add	r3, r1
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i<64; i++)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b3f      	cmp	r3, #63	; 0x3f
 8001146:	d9ec      	bls.n	8001122 <SaveFuture+0xe>
			}
				INDX_FUTURE++;
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <SaveFuture+0x64>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <SaveFuture+0x64>)
 8001152:	701a      	strb	r2, [r3, #0]
				if(N_FUTURE==INDX_FUTURE)
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <SaveFuture+0x68>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <SaveFuture+0x64>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d104      	bne.n	800116a <SaveFuture+0x56>
					{
					SetFutrConfF();
 8001160:	f7ff fbc0 	bl	80008e4 <SetFutrConfF>
					INDX_FUTURE=0;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SaveFuture+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
			}
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000
 8001178:	2000024e 	.word	0x2000024e
 800117c:	2000024d 	.word	0x2000024d

08001180 <GetFunc>:

void * GetFunc(u8_t* GtB)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	switch(GtB[0])
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2bae      	cmp	r3, #174	; 0xae
 800118e:	f000 8096 	beq.w	80012be <GetFunc+0x13e>
 8001192:	2bae      	cmp	r3, #174	; 0xae
 8001194:	f300 8095 	bgt.w	80012c2 <GetFunc+0x142>
 8001198:	2b09      	cmp	r3, #9
 800119a:	dc1b      	bgt.n	80011d4 <GetFunc+0x54>
 800119c:	2b00      	cmp	r3, #0
 800119e:	f340 8090 	ble.w	80012c2 <GetFunc+0x142>
 80011a2:	3b01      	subs	r3, #1
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	f200 808c 	bhi.w	80012c2 <GetFunc+0x142>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <GetFunc+0x30>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	080011db 	.word	0x080011db
 80011b4:	080011f3 	.word	0x080011f3
 80011b8:	080012c3 	.word	0x080012c3
 80011bc:	080011fb 	.word	0x080011fb
 80011c0:	08001231 	.word	0x08001231
 80011c4:	08001271 	.word	0x08001271
 80011c8:	0800127b 	.word	0x0800127b
 80011cc:	0800127f 	.word	0x0800127f
 80011d0:	08001293 	.word	0x08001293
 80011d4:	2ba0      	cmp	r3, #160	; 0xa0
 80011d6:	d064      	beq.n	80012a2 <GetFunc+0x122>
 80011d8:	e073      	b.n	80012c2 <GetFunc+0x142>
	{
	case SELFTEST:
		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == 1)
 80011da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011de:	483b      	ldr	r0, [pc, #236]	; (80012cc <GetFunc+0x14c>)
 80011e0:	f002 fdc6 	bl	8003d70 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <GetFunc+0x6e>
		  {
			  return (void*) CONF_DEF;
 80011ea:	2313      	movs	r3, #19
 80011ec:	e06a      	b.n	80012c4 <GetFunc+0x144>
		  }
		  else
		  {
			  return (void*) CONF_NDEF;
 80011ee:	2310      	movs	r3, #16
 80011f0:	e068      	b.n	80012c4 <GetFunc+0x144>
		  }
		break;

	case SET_DEFAULT:
		flash_erase();
 80011f2:	f7ff facb 	bl	800078c <flash_erase>
		NVIC_SystemReset();
 80011f6:	f7ff faf3 	bl	80007e0 <__NVIC_SystemReset>
		break;

	case SET_L_CONFIG:
		N_FUTURE = GtB[1];
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	785a      	ldrb	r2, [r3, #1]
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <GetFunc+0x150>)
 8001200:	701a      	strb	r2, [r3, #0]
		if(N_FUTURE>0 && N_FUTURE<32)
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <GetFunc+0x150>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <GetFunc+0xac>
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <GetFunc+0x150>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b1f      	cmp	r3, #31
 8001210:	d80c      	bhi.n	800122c <GetFunc+0xac>
			{
			FUTURE_RELAY = malloc(N_FUTURE*64);
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <GetFunc+0x150>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	019b      	lsls	r3, r3, #6
 8001218:	4618      	mov	r0, r3
 800121a:	f012 fa47 	bl	80136ac <malloc>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <GetFunc+0x154>)
 8001224:	601a      	str	r2, [r3, #0]
			SetFutrConfF();
 8001226:	f7ff fb5d 	bl	80008e4 <SetFutrConfF>
		}
		else{return  UVN_ER;}
		break;
 800122a:	e04a      	b.n	80012c2 <GetFunc+0x142>
		else{return  UVN_ER;}
 800122c:	2300      	movs	r3, #0
 800122e:	e049      	b.n	80012c4 <GetFunc+0x144>

	case SET_FAULT:
		if(GtB[1]<SET_FUTURE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b7e      	cmp	r3, #126	; 0x7e
 8001238:	d816      	bhi.n	8001268 <GetFunc+0xe8>
		{
			for(int i = 0;i<64;i++)
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e00c      	b.n	800125a <GetFunc+0xda>
			{
			CURRENT_RELAY[i]=FUTURE_RELAY[i];
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <GetFunc+0x154>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	7819      	ldrb	r1, [r3, #0]
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <GetFunc+0x158>)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	460a      	mov	r2, r1
 8001252:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<64;i++)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b3f      	cmp	r3, #63	; 0x3f
 800125e:	ddef      	ble.n	8001240 <GetFunc+0xc0>
			}
			set_fault(CURRENT_RELAY);
 8001260:	481d      	ldr	r0, [pc, #116]	; (80012d8 <GetFunc+0x158>)
 8001262:	f7ff feff 	bl	8001064 <set_fault>
		}
		else
		{
			set_fault(GtB);
		}
		break;
 8001266:	e02c      	b.n	80012c2 <GetFunc+0x142>
			set_fault(GtB);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fefb 	bl	8001064 <set_fault>
		break;
 800126e:	e028      	b.n	80012c2 <GetFunc+0x142>

	case SET_NET:
		SetNET(GtB);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff04 	bl	800107e <SetNET>
		__NVIC_SystemReset();
 8001276:	f7ff fab3 	bl	80007e0 <__NVIC_SystemReset>
		break;

	case GET_CONFIG:
		return (void*)CURRENT_RELAY;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <GetFunc+0x158>)
 800127c:	e022      	b.n	80012c4 <GetFunc+0x144>
		break;

	case SET_FLAG:
		UVN_FLAGS =  UVN_FLAGS & 0b11111011;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <GetFunc+0x15c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f023 0304 	bic.w	r3, r3, #4
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <GetFunc+0x15c>)
 800128a:	701a      	strb	r2, [r3, #0]
		SetFlashF();
 800128c:	f7ff fb1a 	bl	80008c4 <SetFlashF>
		break;
 8001290:	e017      	b.n	80012c2 <GetFunc+0x142>

	case RESET_FLAG:
		UVN_FLAGS =  UVN_FLAGS & 0b11111011;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <GetFunc+0x15c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f023 0304 	bic.w	r3, r3, #4
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <GetFunc+0x15c>)
 800129e:	701a      	strb	r2, [r3, #0]
		break;
 80012a0:	e00f      	b.n	80012c2 <GetFunc+0x142>

	case SAVE_CONF:
		UVN_FLAGS =  UVN_FLAGS & 0b11111011;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <GetFunc+0x15c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <GetFunc+0x15c>)
 80012ae:	701a      	strb	r2, [r3, #0]
		SetFlashF();
 80012b0:	f7ff fb08 	bl	80008c4 <SetFlashF>
		relay_save();
 80012b4:	f7ff feb4 	bl	8001020 <relay_save>
		SetFlashF();
 80012b8:	f7ff fb04 	bl	80008c4 <SetFlashF>
		break;
 80012bc:	e001      	b.n	80012c2 <GetFunc+0x142>

	case TEST:
		return (void*)TEST;
 80012be:	23ae      	movs	r3, #174	; 0xae
 80012c0:	e000      	b.n	80012c4 <GetFunc+0x144>
		break;
	}
	return (void*)1;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40011400 	.word	0x40011400
 80012d0:	2000024d 	.word	0x2000024d
 80012d4:	20000000 	.word	0x20000000
 80012d8:	2000020c 	.word	0x2000020c
 80012dc:	2000024c 	.word	0x2000024c

080012e0 <__NVIC_SystemReset>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012e4:	f3bf 8f4f 	dsb	sy
}
 80012e8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <__NVIC_SystemReset+0x24>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012f2:	4904      	ldr	r1, [pc, #16]	; (8001304 <__NVIC_SystemReset+0x24>)
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_SystemReset+0x28>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
    __NOP();
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <__NVIC_SystemReset+0x20>
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	05fa0004 	.word	0x05fa0004

0800130c <f_reset.1>:
  /* Configure the system clock */
  SystemClock_Config();
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  void f_reset()
  {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	f8c7 c004 	str.w	ip, [r7, #4]
	  for(uint8_t t = 0;t<5;t++)
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e017      	b.n	800134c <f_reset.1+0x40>
	  {
		  HAL_Delay(1000);
 800131c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001320:	f001 f824 	bl	800236c <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1)
 8001324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <f_reset.1+0x50>)
 800132a:	f002 fd21 	bl	8003d70 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <f_reset.1+0x36>
		  {
			  if(t==4)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d105      	bne.n	8001346 <f_reset.1+0x3a>
			  {
					flash_erase();
 800133a:	f7ff fa27 	bl	800078c <flash_erase>
					NVIC_SystemReset();
 800133e:	f7ff ffcf 	bl	80012e0 <__NVIC_SystemReset>
			  }
		  }
		  else
		  {
			  t=5;
 8001342:	2305      	movs	r3, #5
 8001344:	73fb      	strb	r3, [r7, #15]
	  for(uint8_t t = 0;t<5;t++)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d9e4      	bls.n	800131c <f_reset.1+0x10>
		  }
	  }
  }
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010c00 	.word	0x40010c00

08001360 <main>:
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b09f      	sub	sp, #124	; 0x7c
 8001364:	af00      	add	r7, sp, #0
int main(void)
 8001366:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800136a:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_Init();
 800136c:	f000 ff9c 	bl	80022a8 <HAL_Init>
  SystemClock_Config();
 8001370:	f000 f95e 	bl	8001630 <SystemClock_Config>
	 		  	  CDC_Transmit_FS(output_buf, 2);
	 		  	}
	 		  SetUSBF(0);
  }
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 f9e2 	bl	800173c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  {
	uint32_t rel_32[16];
	uint8_t * rel_8;
	uint8_t k;
	for(uint8_t i = 0;i<16;i++)
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800137e:	e015      	b.n	80013ac <main+0x4c>
	{
		rel_32[i] = FlashRead(FLASH_RELAY+(i*4));
 8001380:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	461a      	mov	r2, r3
 8001388:	4b75      	ldr	r3, [pc, #468]	; (8001560 <main+0x200>)
 800138a:	4413      	add	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8d5 	bl	800053c <FlashRead>
 8001392:	4602      	mov	r2, r0
 8001394:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	3378      	adds	r3, #120	; 0x78
 800139c:	443b      	add	r3, r7
 800139e:	f843 2c74 	str.w	r2, [r3, #-116]
	for(uint8_t i = 0;i<16;i++)
 80013a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013a6:	3301      	adds	r3, #1
 80013a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80013ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d9e5      	bls.n	8001380 <main+0x20>
	}
	rel_8 = & rel_32;
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	673b      	str	r3, [r7, #112]	; 0x70
	uvnInit(rel_8);
 80013b8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013ba:	f7ff fac5 	bl	8000948 <uvnInit>

  }
  {
	  uint8_t ipad[4]={0,0,0,0};
 80013be:	2300      	movs	r3, #0
 80013c0:	65bb      	str	r3, [r7, #88]	; 0x58
	  uint8_t mask[4]={0,0,0,0};
 80013c2:	2300      	movs	r3, #0
 80013c4:	657b      	str	r3, [r7, #84]	; 0x54
	  uint8_t gw[4]={0,0,0,0};
 80013c6:	2300      	movs	r3, #0
 80013c8:	653b      	str	r3, [r7, #80]	; 0x50
	  uint16_t port;

	 if(FlashRead(FLASH_NET_DETAILS) == VOID)
 80013ca:	4866      	ldr	r0, [pc, #408]	; (8001564 <main+0x204>)
 80013cc:	f7ff f8b6 	bl	800053c <FlashRead>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	d128      	bne.n	800142a <main+0xca>
	    {
		 ipad[0]=base_ipad[0];
 80013d8:	23c0      	movs	r3, #192	; 0xc0
 80013da:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		 ipad[1]=base_ipad[1];
 80013de:	23a8      	movs	r3, #168	; 0xa8
 80013e0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		 ipad[2]=base_ipad[2];
 80013e4:	2301      	movs	r3, #1
 80013e6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		 ipad[3]=base_ipad[3];
 80013ea:	236c      	movs	r3, #108	; 0x6c
 80013ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		 mask[0]=base_mask[0];
 80013f0:	23ff      	movs	r3, #255	; 0xff
 80013f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		 mask[1]=base_mask[1];
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		 mask[2]=base_mask[2];
 80013fc:	23ff      	movs	r3, #255	; 0xff
 80013fe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		 mask[3]=base_mask[3];
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 gw[0]=base_gw[0];
 8001408:	23c0      	movs	r3, #192	; 0xc0
 800140a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		 gw[1]=base_gw[1];
 800140e:	23a8      	movs	r3, #168	; 0xa8
 8001410:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		 gw[2]=base_gw[2];
 8001414:	2301      	movs	r3, #1
 8001416:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		 gw[3]=base_gw[3];
 800141a:	2301      	movs	r3, #1
 800141c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		 port = base_port;
 8001420:	f242 531c 	movw	r3, #9500	; 0x251c
 8001424:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001428:	e053      	b.n	80014d2 <main+0x172>
	    }

	else
	 	 {
		 uint32_t n_ip = FlashRead(FLASH_NET_DETAILS);
 800142a:	484e      	ldr	r0, [pc, #312]	; (8001564 <main+0x204>)
 800142c:	f7ff f886 	bl	800053c <FlashRead>
 8001430:	4603      	mov	r3, r0
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c
		 uint32_t n_mask = FlashRead(FLASH_NET_DETAILS+4);
 8001434:	484c      	ldr	r0, [pc, #304]	; (8001568 <main+0x208>)
 8001436:	f7ff f881 	bl	800053c <FlashRead>
 800143a:	4603      	mov	r3, r0
 800143c:	64bb      	str	r3, [r7, #72]	; 0x48
		 uint32_t n_gw = FlashRead(FLASH_NET_DETAILS+8);
 800143e:	484b      	ldr	r0, [pc, #300]	; (800156c <main+0x20c>)
 8001440:	f7ff f87c 	bl	800053c <FlashRead>
 8001444:	4603      	mov	r3, r0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
		 port = FlashRead(FLASH_NET_DETAILS+12);
 8001448:	4849      	ldr	r0, [pc, #292]	; (8001570 <main+0x210>)
 800144a:	f7ff f877 	bl	800053c <FlashRead>
 800144e:	4603      	mov	r3, r0
 8001450:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		 uint16_t flg = FlashRead(FLASH_NET_DETAILS+14);
 8001454:	4847      	ldr	r0, [pc, #284]	; (8001574 <main+0x214>)
 8001456:	f7ff f871 	bl	800053c <FlashRead>
 800145a:	4603      	mov	r3, r0
 800145c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		 uint8_t * ip= & n_ip;
 8001460:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001464:	66bb      	str	r3, [r7, #104]	; 0x68
		 uint8_t * msk= & n_mask;
 8001466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800146a:	667b      	str	r3, [r7, #100]	; 0x64
		 uint8_t * g_w= & n_gw;
 800146c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
		 ipad[0]=ip[0];
 8001472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		 ipad[1]=ip[1];
 800147a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		 ipad[2]=ip[2];
 8001482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		 ipad[3]=ip[3];
 800148a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		 mask[0]=msk[0];
 8001492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		 mask[1]=msk[1];
 800149a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		 mask[2]=msk[2];
 80014a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		 mask[3]=msk[3];
 80014aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 gw[0]=g_w[0];
 80014b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		 gw[1]=g_w[1];
 80014ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		 gw[2]=g_w[2];
 80014c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c4:	789b      	ldrb	r3, [r3, #2]
 80014c6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		 gw[3]=g_w[3];
 80014ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014cc:	78db      	ldrb	r3, [r3, #3]
 80014ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	 	 }
	  MX_LWIP_Init(ipad,mask,gw);
 80014d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014d6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80014da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 fe50 	bl	8007184 <MX_LWIP_Init>
	  tcp_server_init(ipad, port);
 80014e4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80014e8:	461a      	mov	r2, r3
 80014ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fb75 	bl	8001be0 <tcp_server_init>

  }
  MX_USB_DEVICE_Init();
 80014f6:	f010 fb0b 	bl	8011b10 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 80014fa:	f005 ff85 	bl	8007408 <MX_LWIP_Process>
	  if(GetUVN_FLAGS() & 0b00000001)
 80014fe:	f7ff f98f 	bl	8000820 <GetUVN_FLAGS>
 8001502:	4603      	mov	r3, r0
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <main+0x1b6>
	  {
		  usbwait();
 800150c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001510:	469c      	mov	ip, r3
 8001512:	f000 f833 	bl	800157c <usbwait.0>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1)
 8001516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151a:	4817      	ldr	r0, [pc, #92]	; (8001578 <main+0x218>)
 800151c:	f002 fc28 	bl	8003d70 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d104      	bne.n	8001530 <main+0x1d0>
	  {
		  f_reset();
 8001526:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800152a:	469c      	mov	ip, r3
 800152c:	f7ff feee 	bl	800130c <f_reset.1>
	  }
	  if(GetUVN_FLAGS() & 0b00000010)
 8001530:	f7ff f976 	bl	8000820 <GetUVN_FLAGS>
 8001534:	4603      	mov	r3, r0
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0dd      	beq.n	80014fa <main+0x19a>
	  {
		  set_fault(GetFUTURE_RELAY() + GetINDX_FUTURE() *64);
 800153e:	f7ff f965 	bl	800080c <GetFUTURE_RELAY>
 8001542:	4604      	mov	r4, r0
 8001544:	f7ff f976 	bl	8000834 <GetINDX_FUTURE>
 8001548:	4603      	mov	r3, r0
 800154a:	019b      	lsls	r3, r3, #6
 800154c:	4423      	add	r3, r4
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd88 	bl	8001064 <set_fault>
		  IncINDX_FUTURE();
 8001554:	f7ff f978 	bl	8000848 <IncINDX_FUTURE>
		  SetExSigF();
 8001558:	f7ff f9a4 	bl	80008a4 <SetExSigF>
	  MX_LWIP_Process();
 800155c:	e7cd      	b.n	80014fa <main+0x19a>
 800155e:	bf00      	nop
 8001560:	08017660 	.word	0x08017660
 8001564:	08017650 	.word	0x08017650
 8001568:	08017654 	.word	0x08017654
 800156c:	08017658 	.word	0x08017658
 8001570:	0801765c 	.word	0x0801765c
 8001574:	0801765e 	.word	0x0801765e
 8001578:	40010c00 	.word	0x40010c00

0800157c <usbwait.0>:
  {
 800157c:	b580      	push	{r7, lr}
 800157e:	b098      	sub	sp, #96	; 0x60
 8001580:	af00      	add	r7, sp, #0
 8001582:	f8c7 c004 	str.w	ip, [r7, #4]
	 		  memcpy(arr, GetBuf(), 64);
 8001586:	f7ff f9d5 	bl	8000934 <GetBuf>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	4618      	mov	r0, r3
 8001596:	f012 f8a1 	bl	80136dc <memcpy>
	 		  if(arr[0]==7)
 800159a:	7b3b      	ldrb	r3, [r7, #12]
 800159c:	2b07      	cmp	r3, #7
 800159e:	d10a      	bne.n	80015b6 <usbwait.0+0x3a>
	 			  uint8_t *output_buf = GetFunc(arr);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdeb 	bl	8001180 <GetFunc>
 80015aa:	6538      	str	r0, [r7, #80]	; 0x50
	 		  	  CDC_Transmit_FS(output_buf, 65);
 80015ac:	2141      	movs	r1, #65	; 0x41
 80015ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80015b0:	f000 fe2e 	bl	8002210 <CDC_Transmit_FS>
 80015b4:	e034      	b.n	8001620 <usbwait.0+0xa4>
	 		  else if(arr[0]==5)
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d127      	bne.n	800160c <usbwait.0+0x90>
	 		  	  CDC_Transmit_FS(0x1, 2);
 80015bc:	2102      	movs	r1, #2
 80015be:	2001      	movs	r0, #1
 80015c0:	f000 fe26 	bl	8002210 <CDC_Transmit_FS>
	 			  SetUSBF(0);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff f95d 	bl	8000884 <SetUSBF>
	 		  	  uint8_t f=1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	 		  	  while(f)
 80015d0:	e00d      	b.n	80015ee <usbwait.0+0x72>
	 		  		  if(GetUSBF() == 1)
 80015d2:	f7ff f997 	bl	8000904 <GetUSBF>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <usbwait.0+0x72>
	 		  			 memcpy(&arr[64], GetBuf(), 1);
 80015dc:	f7ff f9aa 	bl	8000934 <GetBuf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	 		  			f=0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	 		  	  while(f)
 80015ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ed      	bne.n	80015d2 <usbwait.0+0x56>
	 			  uint8_t *output_buf = GetFunc(arr);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fdc0 	bl	8001180 <GetFunc>
 8001600:	6578      	str	r0, [r7, #84]	; 0x54
	 		  	  CDC_Transmit_FS(output_buf, 2);
 8001602:	2102      	movs	r1, #2
 8001604:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001606:	f000 fe03 	bl	8002210 <CDC_Transmit_FS>
 800160a:	e009      	b.n	8001620 <usbwait.0+0xa4>
	 			uint8_t *output_buf = GetFunc(arr);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fdb5 	bl	8001180 <GetFunc>
 8001616:	65b8      	str	r0, [r7, #88]	; 0x58
	 		  	  CDC_Transmit_FS(output_buf, 2);
 8001618:	2102      	movs	r1, #2
 800161a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800161c:	f000 fdf8 	bl	8002210 <CDC_Transmit_FS>
	 		  SetUSBF(0);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff f92f 	bl	8000884 <SetUSBF>
  }
 8001626:	bf00      	nop
 8001628:	3760      	adds	r7, #96	; 0x60
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09c      	sub	sp, #112	; 0x70
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800163a:	2238      	movs	r2, #56	; 0x38
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f012 f85a 	bl	80136f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2220      	movs	r2, #32
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f012 f84c 	bl	80136f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800166a:	2304      	movs	r3, #4
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166e:	2301      	movs	r3, #1
 8001670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001678:	2302      	movs	r3, #2
 800167a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001680:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001682:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001688:	2302      	movs	r3, #2
 800168a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800168c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001690:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001692:	2340      	movs	r3, #64	; 0x40
 8001694:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fce8 	bl	8005070 <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016a6:	f000 f962 	bl	800196e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 ffe8 	bl	800569c <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016d2:	f000 f94c 	bl	800196e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016d6:	2310      	movs	r3, #16
 80016d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLI2S.PLLI2SMUL = RCC_PLLI2S_MUL10;
 80016de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLI2S.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f9fe 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016f6:	f000 f93a 	bl	800196e <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f04f 6130 	mov.w	r1, #184549376	; 0xb000000
 8001700:	2000      	movs	r0, #0
 8001702:	f004 f8b5 	bl	8005870 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <SystemClock_Config+0x104>)
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <SystemClock_Config+0x104>)
 8001710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001714:	62d3      	str	r3, [r2, #44]	; 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <SystemClock_Config+0x104>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <SystemClock_Config+0x104>)
 8001720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001724:	62d3      	str	r3, [r2, #44]	; 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SystemClock_Config+0x108>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	3770      	adds	r7, #112	; 0x70
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	42420070 	.word	0x42420070

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b7a      	ldr	r3, [pc, #488]	; (800193c <MX_GPIO_Init+0x200>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a79      	ldr	r2, [pc, #484]	; (800193c <MX_GPIO_Init+0x200>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b77      	ldr	r3, [pc, #476]	; (800193c <MX_GPIO_Init+0x200>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b74      	ldr	r3, [pc, #464]	; (800193c <MX_GPIO_Init+0x200>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a73      	ldr	r2, [pc, #460]	; (800193c <MX_GPIO_Init+0x200>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b71      	ldr	r3, [pc, #452]	; (800193c <MX_GPIO_Init+0x200>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b6e      	ldr	r3, [pc, #440]	; (800193c <MX_GPIO_Init+0x200>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a6d      	ldr	r2, [pc, #436]	; (800193c <MX_GPIO_Init+0x200>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b6b      	ldr	r3, [pc, #428]	; (800193c <MX_GPIO_Init+0x200>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <MX_GPIO_Init+0x200>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a67      	ldr	r2, [pc, #412]	; (800193c <MX_GPIO_Init+0x200>)
 800179e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <MX_GPIO_Init+0x200>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b62      	ldr	r3, [pc, #392]	; (800193c <MX_GPIO_Init+0x200>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a61      	ldr	r2, [pc, #388]	; (800193c <MX_GPIO_Init+0x200>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b5f      	ldr	r3, [pc, #380]	; (800193c <MX_GPIO_Init+0x200>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2128      	movs	r1, #40	; 0x28
 80017cc:	485c      	ldr	r0, [pc, #368]	; (8001940 <MX_GPIO_Init+0x204>)
 80017ce:	f002 fae6 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	21a8      	movs	r1, #168	; 0xa8
 80017d6:	485b      	ldr	r0, [pc, #364]	; (8001944 <MX_GPIO_Init+0x208>)
 80017d8:	f002 fae1 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_14, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f244 0102 	movw	r1, #16386	; 0x4002
 80017e2:	4859      	ldr	r0, [pc, #356]	; (8001948 <MX_GPIO_Init+0x20c>)
 80017e4:	f002 fadb 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 80017e8:	2200      	movs	r2, #0
 80017ea:	f64a 2180 	movw	r1, #43648	; 0xaa80
 80017ee:	4857      	ldr	r0, [pc, #348]	; (800194c <MX_GPIO_Init+0x210>)
 80017f0:	f002 fad5 	bl	8003d9e <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fa:	4855      	ldr	r0, [pc, #340]	; (8001950 <MX_GPIO_Init+0x214>)
 80017fc:	f002 facf 	bl	8003d9e <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <MX_GPIO_Init+0x218>)
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull =  GPIO_PULLDOWN;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	4619      	mov	r1, r3
 8001818:	484d      	ldr	r0, [pc, #308]	; (8001950 <MX_GPIO_Init+0x214>)
 800181a:	f002 f925 	bl	8003a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800181e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4619      	mov	r1, r3
 8001836:	4844      	ldr	r0, [pc, #272]	; (8001948 <MX_GPIO_Init+0x20c>)
 8001838:	f002 f916 	bl	8003a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800183c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	4619      	mov	r1, r3
 8001854:	483e      	ldr	r0, [pc, #248]	; (8001950 <MX_GPIO_Init+0x214>)
 8001856:	f002 f907 	bl	8003a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4619      	mov	r1, r3
 8001872:	4834      	ldr	r0, [pc, #208]	; (8001944 <MX_GPIO_Init+0x208>)
 8001874:	f002 f8f8 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001878:	2328      	movs	r3, #40	; 0x28
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4619      	mov	r1, r3
 800188e:	482c      	ldr	r0, [pc, #176]	; (8001940 <MX_GPIO_Init+0x204>)
 8001890:	f002 f8ea 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8001894:	23a8      	movs	r3, #168	; 0xa8
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4826      	ldr	r0, [pc, #152]	; (8001944 <MX_GPIO_Init+0x208>)
 80018ac:	f002 f8dc 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14;
 80018b0:	f244 0302 	movw	r3, #16386	; 0x4002
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	4619      	mov	r1, r3
 80018c8:	481f      	ldr	r0, [pc, #124]	; (8001948 <MX_GPIO_Init+0x20c>)
 80018ca:	f002 f8cd 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 80018ce:	f64a 2380 	movw	r3, #43648	; 0xaa80
 80018d2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4819      	ldr	r0, [pc, #100]	; (800194c <MX_GPIO_Init+0x210>)
 80018e8:	f002 f8be 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_GPIO_Init+0x214>)
 8001906:	f002 f8af 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4619      	mov	r1, r3
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <MX_GPIO_Init+0x208>)
 8001920:	f002 f8a2 	bl	8003a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 15);
 8001924:	220f      	movs	r2, #15
 8001926:	210f      	movs	r1, #15
 8001928:	2028      	movs	r0, #40	; 0x28
 800192a:	f000 fe1a 	bl	8002562 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192e:	2028      	movs	r0, #40	; 0x28
 8001930:	f000 fe33 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40011000 	.word	0x40011000
 8001944:	40010800 	.word	0x40010800
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40011800 	.word	0x40011800
 8001950:	40011400 	.word	0x40011400
 8001954:	10110000 	.word	0x10110000

08001958 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	SetExSigF();
 8001962:	f7fe ff9f 	bl	80008a4 <SetExSigF>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
}
 8001974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001976:	e7fe      	b.n	8001976 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_MspInit+0x54>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_MspInit+0x54>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_MspInit+0x54>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_MspInit+0x54>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_MspInit+0x54>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_MspInit+0x54>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_MspInit+0x58>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_MspInit+0x58>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1a:	f000 fc8b 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a2a:	f002 f9d1 	bl	8003dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <OTG_FS_IRQHandler+0x10>)
 8001a3a:	f002 fb27 	bl	800408c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000923c 	.word	0x2000923c

08001a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
	...

08001a58 <_kill>:

int _kill(int pid, int sig)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <_kill+0x20>)
 8001a64:	2216      	movs	r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
  return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20009968 	.word	0x20009968

08001a7c <_exit>:

void _exit (int status)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe5 	bl	8001a58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a8e:	e7fe      	b.n	8001a8e <_exit+0x12>

08001a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
  }

  return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e009      	b.n	8001af0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf1      	blt.n	8001adc <_write+0x12>
  }
  return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_close>:

int _close(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b28:	605a      	str	r2, [r3, #4]
  return 0;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <_isatty>:

int _isatty(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d205      	bcs.n	8001ba0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <_sbrk+0x6c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20010000 	.word	0x20010000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000254 	.word	0x20000254
 8001bcc:	20009970 	.word	0x20009970
 8001bd0:	20009968 	.word	0x20009968

08001bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(uint8_t * ipad, uint16_t * port)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001bea:	f009 f941 	bl	800ae70 <tcp_new>
 8001bee:	6178      	str	r0, [r7, #20]

	err_t err;

	/* 2. bind _pcb to port ** ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, ipad[0], ipad[1], ipad[2], ipad[3]);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	061a      	lsls	r2, r3, #24
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3302      	adds	r3, #2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	3203      	adds	r2, #3
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	061a      	lsls	r2, r3, #24
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	0619      	lsls	r1, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	4319      	orrs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3302      	adds	r3, #2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	3103      	adds	r1, #3
 8001c32:	7809      	ldrb	r1, [r1, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	0619      	lsls	r1, r3, #24
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	4319      	orrs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3302      	adds	r3, #2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	430b      	orrs	r3, r1
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	3103      	adds	r1, #3
 8001c5c:	7809      	ldrb	r1, [r1, #0]
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	0619      	lsls	r1, r3, #24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3301      	adds	r3, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	4319      	orrs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	3103      	adds	r1, #3
 8001c86:	7809      	ldrb	r1, [r1, #0]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	0e1b      	lsrs	r3, r3, #24
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
	err = tcp_bind(tpcb, &myIPADDR, port);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f008 f96a 	bl	8009f74 <tcp_bind>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	74fb      	strb	r3, [r7, #19]

	if (err == ERR_OK)
 8001ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <tcp_server_init+0xe0>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001cac:	21ff      	movs	r1, #255	; 0xff
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f008 fa02 	bl	800a0b8 <tcp_listen_with_backlog>
 8001cb4:	6178      	str	r0, [r7, #20]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001cb6:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <tcp_server_init+0xf0>)
 8001cb8:	6978      	ldr	r0, [r7, #20]
 8001cba:	f009 f955 	bl	800af68 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001cbe:	e003      	b.n	8001cc8 <tcp_server_init+0xe8>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f006 fdc4 	bl	8008850 <memp_free>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08001cd5 	.word	0x08001cd5

08001cd4 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	68b8      	ldr	r0, [r7, #8]
 8001ce6:	f008 ff39 	bl	800ab5c <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001cea:	200c      	movs	r0, #12
 8001cec:	f006 fc08 	bl	8008500 <mem_malloc>
 8001cf0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01f      	beq.n	8001d38 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f009 f8b4 	bl	800ae80 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001d18:	490d      	ldr	r1, [pc, #52]	; (8001d50 <tcp_server_accept+0x7c>)
 8001d1a:	68b8      	ldr	r0, [r7, #8]
 8001d1c:	f009 f8c0 	bl	800aea0 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <tcp_server_accept+0x80>)
 8001d22:	68b8      	ldr	r0, [r7, #8]
 8001d24:	f009 f8fe 	bl	800af24 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	490b      	ldr	r1, [pc, #44]	; (8001d58 <tcp_server_accept+0x84>)
 8001d2c:	68b8      	ldr	r0, [r7, #8]
 8001d2e:	f009 f931 	bl	800af94 <tcp_poll>

    ret_err = ERR_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
 8001d36:	e005      	b.n	8001d44 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	68b8      	ldr	r0, [r7, #8]
 8001d3c:	f000 f961 	bl	8002002 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001d40:	23ff      	movs	r3, #255	; 0xff
 8001d42:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08001d5d 	.word	0x08001d5d
 8001d54:	08001e91 	.word	0x08001e91
 8001d58:	08001eb5 	.word	0x08001eb5

08001d5c <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <tcp_server_recv+0x20>
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <tcp_server_recv+0x124>)
 8001d72:	22c5      	movs	r2, #197	; 0xc5
 8001d74:	4943      	ldr	r1, [pc, #268]	; (8001e84 <tcp_server_recv+0x128>)
 8001d76:	4844      	ldr	r0, [pc, #272]	; (8001e88 <tcp_server_recv+0x12c>)
 8001d78:	f011 fda2 	bl	80138c0 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001d94:	69b9      	ldr	r1, [r7, #24]
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	f000 f933 	bl	8002002 <tcp_server_connection_close>
 8001d9c:	e007      	b.n	8001dae <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001d9e:	493b      	ldr	r1, [pc, #236]	; (8001e8c <tcp_server_recv+0x130>)
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f009 f89f 	bl	800aee4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	f000 f8d7 	bl	8001f5c <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	77fb      	strb	r3, [r7, #31]
 8001db2:	e05f      	b.n	8001e74 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f007 fa7f 	bl	80092cc <pbuf_free>
    }
    ret_err = err;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	77fb      	strb	r3, [r7, #31]
 8001dd2:	e04f      	b.n	8001e74 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d110      	bne.n	8001dfe <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2202      	movs	r2, #2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001de8:	4928      	ldr	r1, [pc, #160]	; (8001e8c <tcp_server_recv+0x130>)
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f009 f87a 	bl	800aee4 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001df0:	69b9      	ldr	r1, [r7, #24]
 8001df2:	68b8      	ldr	r0, [r7, #8]
 8001df4:	f000 f92c 	bl	8002050 <tcp_server_handle>

    ret_err = ERR_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	77fb      	strb	r3, [r7, #31]
 8001dfc:	e03a      	b.n	8001e74 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d115      	bne.n	8001e32 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	68b8      	ldr	r0, [r7, #8]
 8001e18:	f000 f91a 	bl	8002050 <tcp_server_handle>
 8001e1c:	e006      	b.n	8001e2c <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f007 fb72 	bl	8009510 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
 8001e30:	e020      	b.n	8001e74 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d10e      	bne.n	8001e58 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	891b      	ldrh	r3, [r3, #8]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f008 fa31 	bl	800a2a8 <tcp_recved>
    es->p = NULL;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f007 fa3d 	bl	80092cc <pbuf_free>
    ret_err = ERR_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	77fb      	strb	r3, [r7, #31]
 8001e56:	e00d      	b.n	8001e74 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	891b      	ldrh	r3, [r3, #8]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68b8      	ldr	r0, [r7, #8]
 8001e60:	f008 fa22 	bl	800a2a8 <tcp_recved>
    es->p = NULL;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f007 fa2e 	bl	80092cc <pbuf_free>
    ret_err = ERR_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001e74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	080147bc 	.word	0x080147bc
 8001e84:	080147d8 	.word	0x080147d8
 8001e88:	080147e4 	.word	0x080147e4
 8001e8c:	08001f15 	.word	0x08001f15

08001e90 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f006 f9ec 	bl	8008284 <mem_free>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001ed0:	490f      	ldr	r1, [pc, #60]	; (8001f10 <tcp_server_poll+0x5c>)
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f009 f806 	bl	800aee4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6838      	ldr	r0, [r7, #0]
 8001edc:	f000 f83e 	bl	8001f5c <tcp_server_send>
 8001ee0:	e007      	b.n	8001ef2 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d103      	bne.n	8001ef2 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	6838      	ldr	r0, [r7, #0]
 8001eee:	f000 f888 	bl	8002002 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e004      	b.n	8001f02 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	f008 f82f 	bl	8009f5c <tcp_abort>
    ret_err = ERR_ABRT;
 8001efe:	23f3      	movs	r3, #243	; 0xf3
 8001f00:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	08001f15 	.word	0x08001f15

08001f14 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <tcp_server_sent+0x2a>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8001f34:	4908      	ldr	r1, [pc, #32]	; (8001f58 <tcp_server_sent+0x44>)
 8001f36:	68b8      	ldr	r0, [r7, #8]
 8001f38:	f008 ffd4 	bl	800aee4 <tcp_sent>
 8001f3c:	e007      	b.n	8001f4e <tcp_server_sent+0x3a>
 //   tcp_server_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d103      	bne.n	8001f4e <tcp_server_sent+0x3a>
      tcp_server_connection_close(tpcb, es);
 8001f46:	6979      	ldr	r1, [r7, #20]
 8001f48:	68b8      	ldr	r0, [r7, #8]
 8001f4a:	f000 f85a 	bl	8002002 <tcp_server_connection_close>
  }
  return ERR_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	08001f15 	.word	0x08001f15

08001f5c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001f6a:	e036      	b.n	8001fda <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	895a      	ldrh	r2, [r3, #10]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f00b fdb7 	bl	800daf0 <tcp_write>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11d      	bne.n	8001fca <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	895b      	ldrh	r3, [r3, #10]
 8001f92:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f007 fa39 	bl	8009420 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001fae:	6938      	ldr	r0, [r7, #16]
 8001fb0:	f007 f98c 	bl	80092cc <pbuf_free>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001fb8:	7b7b      	ldrb	r3, [r7, #13]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f7      	beq.n	8001fae <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8001fbe:	89fb      	ldrh	r3, [r7, #14]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f008 f970 	bl	800a2a8 <tcp_recved>
 8001fc8:	e007      	b.n	8001fda <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd2:	d102      	bne.n	8001fda <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10b      	bne.n	8001ffa <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	895a      	ldrh	r2, [r3, #10]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d9b8      	bls.n	8001f6c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f008 ff36 	bl	800ae80 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8002014:	2100      	movs	r1, #0
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f008 ff64 	bl	800aee4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800201c:	2100      	movs	r1, #0
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f008 ff3e 	bl	800aea0 <tcp_recv>
  tcp_err(tpcb, NULL);
 8002024:	2100      	movs	r1, #0
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f008 ff7c 	bl	800af24 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f008 ffaf 	bl	800af94 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	f006 f921 	bl	8008284 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f007 fec0 	bl	8009dc8 <tcp_close>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
		struct tcp_server_struct *esTx;
		esTx = es;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	617b      	str	r3, [r7, #20]
		u8_t * input_buf;//Здесь пришедшие байты
		void * output_buf;
		input_buf = (u8_t*) es->p->payload;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]
		 if (GetUVN_FLAGS() & 0b00001000)
 8002066:	f7fe fbdb 	bl	8000820 <GetUVN_FLAGS>
 800206a:	4603      	mov	r3, r0
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00f      	beq.n	8002094 <tcp_server_handle+0x44>
		 {
			 	 SaveFuture(input_buf);
 8002074:	6938      	ldr	r0, [r7, #16]
 8002076:	f7ff f84d 	bl	8001114 <SaveFuture>
				{
				esTx->p->payload = 1;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2201      	movs	r2, #1
 8002080:	605a      	str	r2, [r3, #4]
				esTx->p->tot_len = 2;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2202      	movs	r2, #2
 8002088:	811a      	strh	r2, [r3, #8]
				esTx->p->len= 2;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2202      	movs	r2, #2
 8002090:	815a      	strh	r2, [r3, #10]
 8002092:	e020      	b.n	80020d6 <tcp_server_handle+0x86>
				}
		 }
		 else
		 {
			 output_buf = GetFunc(input_buf);
 8002094:	6938      	ldr	r0, [r7, #16]
 8002096:	f7ff f873 	bl	8001180 <GetFunc>
 800209a:	60f8      	str	r0, [r7, #12]
			 if(input_buf[0]==7)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b07      	cmp	r3, #7
 80020a2:	d10c      	bne.n	80020be <tcp_server_handle+0x6e>
			 {
				esTx->p->payload = output_buf;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
				esTx->p->tot_len = 64;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	811a      	strh	r2, [r3, #8]
				esTx->p->len= 64;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	815a      	strh	r2, [r3, #10]
 80020bc:	e00b      	b.n	80020d6 <tcp_server_handle+0x86>
			 }
			 else
			 {
				 esTx->p->payload = output_buf;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]
				 esTx->p->tot_len = 2;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2202      	movs	r2, #2
 80020cc:	811a      	strh	r2, [r3, #8]
				 esTx->p->len= 2;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2202      	movs	r2, #2
 80020d4:	815a      	strh	r2, [r3, #10]
			 }
		 }
		 tcp_server_send(tpcb, esTx);//Отправляем байты клиенtu
 80020d6:	6979      	ldr	r1, [r7, #20]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff3f 	bl	8001f5c <tcp_server_send>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	4905      	ldr	r1, [pc, #20]	; (8002104 <CDC_Init_FS+0x1c>)
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <CDC_Init_FS+0x20>)
 80020f2:	f010 f805 	bl	8012100 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80020f6:	4905      	ldr	r1, [pc, #20]	; (800210c <CDC_Init_FS+0x24>)
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <CDC_Init_FS+0x20>)
 80020fa:	f010 f81a 	bl	8012132 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80020fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000658 	.word	0x20000658
 8002108:	20008f14 	.word	0x20008f14
 800210c:	20000258 	.word	0x20000258

08002110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8002114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	4613      	mov	r3, r2
 800212e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2b23      	cmp	r3, #35	; 0x23
 8002134:	d84a      	bhi.n	80021cc <CDC_Control_FS+0xac>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <CDC_Control_FS+0x1c>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	080021cd 	.word	0x080021cd
 8002140:	080021cd 	.word	0x080021cd
 8002144:	080021cd 	.word	0x080021cd
 8002148:	080021cd 	.word	0x080021cd
 800214c:	080021cd 	.word	0x080021cd
 8002150:	080021cd 	.word	0x080021cd
 8002154:	080021cd 	.word	0x080021cd
 8002158:	080021cd 	.word	0x080021cd
 800215c:	080021cd 	.word	0x080021cd
 8002160:	080021cd 	.word	0x080021cd
 8002164:	080021cd 	.word	0x080021cd
 8002168:	080021cd 	.word	0x080021cd
 800216c:	080021cd 	.word	0x080021cd
 8002170:	080021cd 	.word	0x080021cd
 8002174:	080021cd 	.word	0x080021cd
 8002178:	080021cd 	.word	0x080021cd
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021cd 	.word	0x080021cd
 8002184:	080021cd 	.word	0x080021cd
 8002188:	080021cd 	.word	0x080021cd
 800218c:	080021cd 	.word	0x080021cd
 8002190:	080021cd 	.word	0x080021cd
 8002194:	080021cd 	.word	0x080021cd
 8002198:	080021cd 	.word	0x080021cd
 800219c:	080021cd 	.word	0x080021cd
 80021a0:	080021cd 	.word	0x080021cd
 80021a4:	080021cd 	.word	0x080021cd
 80021a8:	080021cd 	.word	0x080021cd
 80021ac:	080021cd 	.word	0x080021cd
 80021b0:	080021cd 	.word	0x080021cd
 80021b4:	080021cd 	.word	0x080021cd
 80021b8:	080021cd 	.word	0x080021cd
 80021bc:	080021cd 	.word	0x080021cd
 80021c0:	080021cd 	.word	0x080021cd
 80021c4:	080021cd 	.word	0x080021cd
 80021c8:	080021cd 	.word	0x080021cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80021cc:	bf00      	nop
  }

  return (USBD_OK);
 80021ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <CDC_Receive_FS+0x30>)
 80021ea:	f00f ffa2 	bl	8012132 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <CDC_Receive_FS+0x30>)
 80021f0:	f00f ffdc 	bl	80121ac <USBD_CDC_ReceivePacket>
  SetUSBF(1);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7fe fb45 	bl	8000884 <SetUSBF>
  SetBuf(Buf);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fb8c 	bl	8000918 <SetBuf>
  return (USBD_OK);
 8002200:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20008f14 	.word	0x20008f14

08002210 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <CDC_Transmit_FS+0x48>)
 8002222:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002226:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8002232:	2301      	movs	r3, #1
 8002234:	e00b      	b.n	800224e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	461a      	mov	r2, r3
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4806      	ldr	r0, [pc, #24]	; (8002258 <CDC_Transmit_FS+0x48>)
 800223e:	f00f ff5f 	bl	8012100 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <CDC_Transmit_FS+0x48>)
 8002244:	f00f ff88 	bl	8012158 <USBD_CDC_TransmitPacket>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20008f14 	.word	0x20008f14

0800225c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
	  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	; (8002294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	; (80022a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002282:	f7ff fca7 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002286:	f011 f9ed 	bl	8013664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228a:	f7ff f869 	bl	8001360 <main>
  bx lr
 800228e:	4770      	bx	lr
	  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002298:	0801682c 	.word	0x0801682c
  ldr r2, =_sbss
 800229c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80022a0:	20009970 	.word	0x20009970

080022a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_2_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_Init+0x28>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_Init+0x28>)
 80022b2:	f043 0310 	orr.w	r3, r3, #16
 80022b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f947 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 f808 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7ff fb58 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x54>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x58>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f95f 	bl	80025b6 <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 f927 	bl	8002562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <HAL_InitTick+0x5c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000004 	.word	0x20000004
 800232c:	2000001c 	.word	0x2000001c
 8002330:	20000018 	.word	0x20000018

08002334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x1c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_IncTick+0x20>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a03      	ldr	r2, [pc, #12]	; (8002354 <HAL_IncTick+0x20>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	2000001c 	.word	0x2000001c
 8002354:	20000a58 	.word	0x20000a58

08002358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b02      	ldr	r3, [pc, #8]	; (8002368 <HAL_GetTick+0x10>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000a58 	.word	0x20000a58

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff fff0 	bl	8002358 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffe0 	bl	8002358 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000001c 	.word	0x2000001c

080023b4 <__NVIC_SetPriorityGrouping>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <__NVIC_EnableIRQ+0x34>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff90 	bl	8002450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff2d 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff42 	bl	80023fc <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff90 	bl	80024a4 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5f 	bl	8002450 <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff35 	bl	8002418 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa2 	bl	8002508 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80025e0:	4ba4      	ldr	r3, [pc, #656]	; (8002874 <HAL_ETH_Init+0x2a4>)
 80025e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e153      	b.n	800289e <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f004 ff08 	bl	8007420 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8002610:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_ETH_Init+0x2a8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a98      	ldr	r2, [pc, #608]	; (8002878 <HAL_ETH_Init+0x2a8>)
 8002616:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800261a:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 800261c:	4b96      	ldr	r3, [pc, #600]	; (8002878 <HAL_ETH_Init+0x2a8>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4994      	ldr	r1, [pc, #592]	; (8002878 <HAL_ETH_Init+0x2a8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002640:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002642:	f7ff fe89 	bl	8002358 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002648:	e011      	b.n	800266e <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800264a:	f7ff fe85 	bl	8002358 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002658:	d909      	bls.n	800266e <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e117      	b.n	800289e <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e4      	bne.n	800264a <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f023 031c 	bic.w	r3, r3, #28
 800268e:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002690:	f003 fa04 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8002694:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4a78      	ldr	r2, [pc, #480]	; (800287c <HAL_ETH_Init+0x2ac>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d908      	bls.n	80026b0 <HAL_ETH_Init+0xe0>
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4a77      	ldr	r2, [pc, #476]	; (8002880 <HAL_ETH_Init+0x2b0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d804      	bhi.n	80026b0 <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e00b      	b.n	80026c8 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4a73      	ldr	r2, [pc, #460]	; (8002880 <HAL_ETH_Init+0x2b0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d907      	bls.n	80026c8 <HAL_ETH_Init+0xf8>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4a6e      	ldr	r2, [pc, #440]	; (8002874 <HAL_ETH_Init+0x2a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d203      	bcs.n	80026c8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f043 030c 	orr.w	r3, r3, #12
 80026c6:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80026d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026d4:	2100      	movs	r1, #0
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fb8b 	bl	8002df2 <HAL_ETH_WritePHYRegister>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fd41 	bl	8003170 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0d1      	b.n	800289e <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80026fa:	20ff      	movs	r0, #255	; 0xff
 80026fc:	f7ff fe36 	bl	800236c <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8096 	beq.w	8002836 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800270a:	f7ff fe25 	bl	8002358 <HAL_GetTick>
 800270e:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	461a      	mov	r2, r3
 8002716:	2101      	movs	r1, #1
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fb02 	bl	8002d22 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800271e:	f7ff fe1b 	bl	8002358 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d90f      	bls.n	8002750 <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002734:	6939      	ldr	r1, [r7, #16]
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fd1a 	bl	8003170 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0a6      	b.n	800289e <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0da      	beq.n	8002710 <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800275a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800275e:	2100      	movs	r1, #0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fb46 	bl	8002df2 <HAL_ETH_WritePHYRegister>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fcfc 	bl	8003170 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e08c      	b.n	800289e <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8002784:	f7ff fde8 	bl	8002358 <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	461a      	mov	r2, r3
 8002790:	2101      	movs	r1, #1
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fac5 	bl	8002d22 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002798:	f7ff fdde 	bl	8002358 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d90f      	bls.n	80027ca <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027ae:	6939      	ldr	r1, [r7, #16]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fcdd 	bl	8003170 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e069      	b.n	800289e <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0da      	beq.n	800278a <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	461a      	mov	r2, r3
 80027da:	2110      	movs	r1, #16
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 faa0 	bl	8002d22 <HAL_ETH_ReadPHYRegister>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fcbe 	bl	8003170 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e04e      	b.n	800289e <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	e002      	b.n	800281a <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e02f      	b.n	800288c <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e02a      	b.n	800288c <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	08db      	lsrs	r3, r3, #3
 800283c:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002846:	4313      	orrs	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 facf 	bl	8002df2 <HAL_ETH_WritePHYRegister>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d014      	beq.n	8002884 <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800285e:	6939      	ldr	r1, [r7, #16]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fc85 	bl	8003170 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e015      	b.n	800289e <HAL_ETH_Init+0x2ce>
 8002872:	bf00      	nop
 8002874:	03938700 	.word	0x03938700
 8002878:	40010000 	.word	0x40010000
 800287c:	01312cff 	.word	0x01312cff
 8002880:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002884:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002888:	f7ff fd70 	bl	800236c <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800288c:	6939      	ldr	r1, [r7, #16]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fc6e 	bl	8003170 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop

080028a8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_ETH_DMATxDescListInit+0x20>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e051      	b.n	800296c <HAL_ETH_DMATxDescListInit+0xc4>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e030      	b.n	8002946 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	4413      	add	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	461a      	mov	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3b01      	subs	r3, #1
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d208      	bcs.n	800293a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3301      	adds	r3, #1
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4413      	add	r3, r2
 8002932:	461a      	mov	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	60da      	str	r2, [r3, #12]
 8002938:	e002      	b.n	8002940 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3ca      	bcc.n	80028e4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002958:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002976:	b480      	push	{r7}
 8002978:	b087      	sub	sp, #28
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_ETH_DMARxDescListInit+0x20>
 8002992:	2302      	movs	r3, #2
 8002994:	e055      	b.n	8002a42 <HAL_ETH_DMARxDescListInit+0xcc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e034      	b.n	8002a1c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029c2:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80029ca:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	461a      	mov	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d208      	bcs.n	8002a10 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4413      	add	r3, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	e002      	b.n	8002a16 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3c6      	bcc.n	80029b2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a2e:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ETH_TransmitFrame+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0cc      	b.n	8002c0a <HAL_ETH_TransmitFrame+0x1be>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0b7      	b.n	8002c0a <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da09      	bge.n	8002ab8 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2212      	movs	r2, #18
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0a8      	b.n	8002c0a <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d915      	bls.n	8002aee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_ETH_TransmitFrame+0x1c8>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_ETH_TransmitFrame+0x1c8>)
 8002ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e001      	b.n	8002af2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8002aee:	2301      	movs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d11c      	bne.n	8002b32 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002b06:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b12:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b22:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b30:	e04b      	b.n	8002bca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e044      	b.n	8002bc2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b46:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b5c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b66:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d116      	bne.n	8002ba0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b80:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_ETH_TransmitFrame+0x1cc>)
 8002b86:	fb03 f202 	mul.w	r2, r3, r2
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002b92:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b9e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d3b6      	bcc.n	8002b38 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be4:	461a      	mov	r2, r3
 8002be6:	2304      	movs	r3, #4
 8002be8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	ac02b00b 	.word	0xac02b00b
 8002c18:	fffffa0c 	.word	0xfffffa0c

08002c1c <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_ETH_GetReceivedFrame+0x1a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e070      	b.n	8002d18 <HAL_ETH_GetReceivedFrame+0xfc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db5a      	blt.n	8002d06 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d030      	beq.n	8002cc0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d103      	bne.n	8002c78 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c8c:	3b04      	subs	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e02b      	b.n	8002d18 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
 8002cee:	e00a      	b.n	8002d06 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b82      	cmp	r3, #130	; 0x82
 8002d42:	d101      	bne.n	8002d48 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
 8002d46:	e050      	b.n	8002dea <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2282      	movs	r2, #130	; 0x82
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 031c 	and.w	r3, r3, #28
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8a1b      	ldrh	r3, [r3, #16]
 8002d64:	02db      	lsls	r3, r3, #11
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f023 0302 	bic.w	r3, r3, #2
 8002d82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d94:	f7ff fae0 	bl	8002358 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d9a:	e015      	b.n	8002dc8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002d9c:	f7ff fadc 	bl	8002358 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d309      	bcc.n	8002dc0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e014      	b.n	8002dea <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e4      	bne.n	8002d9c <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b42      	cmp	r3, #66	; 0x42
 8002e12:	d101      	bne.n	8002e18 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
 8002e16:	e04e      	b.n	8002eb6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2242      	movs	r2, #66	; 0x42
 8002e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 031c 	and.w	r3, r3, #28
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8a1b      	ldrh	r3, [r3, #16]
 8002e34:	02db      	lsls	r3, r3, #11
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	019b      	lsls	r3, r3, #6
 8002e42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6e:	f7ff fa73 	bl	8002358 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e74:	e015      	b.n	8002ea2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002e76:	f7ff fa6f 	bl	8002358 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d309      	bcc.n	8002e9a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e00d      	b.n	8002eb6 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e4      	bne.n	8002e76 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_ETH_Start+0x16>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e01f      	b.n	8002f14 <HAL_ETH_Start+0x56>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb3b 	bl	8003560 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fb72 	bl	80035d4 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fbfd 	bl	80036f0 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fba6 	bl	8003648 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fbcd 	bl	800369c <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ETH_Stop+0x16>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e01f      	b.n	8002f72 <HAL_ETH_Stop+0x56>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fb95 	bl	8003672 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fbbc 	bl	80036c6 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fb5d 	bl	800360e <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fbcb 	bl	80036f0 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fb1d 	bl	800359a <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ETH_ConfigMAC+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0e4      	b.n	8003162 <HAL_ETH_ConfigMAC+0x1e6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80b1 	beq.w	8003112 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_ETH_ConfigMAC+0x1f0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002fc8:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002fce:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8002fd4:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8002fda:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8002fe0:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8002fe6:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002fec:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8002ff2:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002ff8:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002ffe:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8003004:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 800300a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003022:	2001      	movs	r0, #1
 8003024:	f7ff f9a2 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003038:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800303e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003044:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 800304a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003050:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003056:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003062:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003064:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800306e:	2001      	movs	r0, #1
 8003070:	f7ff f97c 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003084:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800308e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800309e:	4013      	ands	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030ac:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80030b2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80030b8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 80030be:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80030c4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030dc:	2001      	movs	r0, #1
 80030de:	f7ff f945 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003102:	2001      	movs	r0, #1
 8003104:	f7ff f932 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	61da      	str	r2, [r3, #28]
 8003110:	e01e      	b.n	8003150 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003120:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003142:	2001      	movs	r0, #1
 8003144:	f7ff f912 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	ff20810f 	.word	0xff20810f

08003170 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b0b0      	sub	sp, #192	; 0xc0
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800318c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003194:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800319e:	2300      	movs	r3, #0
 80031a0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ba:	663b      	str	r3, [r7, #96]	; 0x60
 80031bc:	e001      	b.n	80031c2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80031c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031cc:	2300      	movs	r3, #0
 80031ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80031dc:	2340      	movs	r3, #64	; 0x40
 80031de:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003248:	4ba8      	ldr	r3, [pc, #672]	; (80034ec <ETH_MACDMAConfig+0x37c>)
 800324a:	4013      	ands	r3, r2
 800324c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003250:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8003252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003254:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8003256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8003258:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 800325c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8003262:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8003264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8003266:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8003268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 800326a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8003270:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8003274:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8003276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8003278:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 800327a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 800327c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8003280:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8003282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8003284:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003298:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7ff f861 	bl	800236c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032b2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80032b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80032b8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80032ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80032bc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80032be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80032c2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80032c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80032c8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80032ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80032ce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80032d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80032d4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80032d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80032e0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80032e2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7ff f83c 	bl	800236c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032fc:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003306:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003310:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800331c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003320:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003324:	4013      	ands	r3, r2
 8003326:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800332a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800332e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8003334:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800333a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 800333c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003340:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8003346:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8003348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800334c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800334e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003360:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800336c:	2001      	movs	r0, #1
 800336e:	f7fe fffd 	bl	800236c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800337a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800337c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8003380:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003396:	2001      	movs	r0, #1
 8003398:	f7fe ffe8 	bl	800236c <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a4:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ae:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80033b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033b8:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80033ca:	2304      	movs	r3, #4
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80033ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80033d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80033da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80033ea:	2300      	movs	r3, #0
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80033fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <ETH_MACDMAConfig+0x380>)
 8003402:	4013      	ands	r3, r2
 8003404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8003408:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 800340a:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800340c:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800340e:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8003410:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8003412:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8003414:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8003416:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 8003418:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800341a:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 800341c:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 8003420:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8003424:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 8003428:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800342a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343c:	461a      	mov	r2, r3
 800343e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003442:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003452:	2001      	movs	r0, #1
 8003454:	f7fe ff8a 	bl	800236c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003460:	461a      	mov	r2, r3
 8003462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003466:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800346c:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 8003470:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003474:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8003476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003478:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 800347a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800347e:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800348c:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800349c:	2001      	movs	r0, #1
 800349e:	f7fe ff65 	bl	800236c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034aa:	461a      	mov	r2, r3
 80034ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034b0:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10d      	bne.n	80034d6 <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034d4:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	461a      	mov	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f808 	bl	80034f4 <ETH_MACAddressConfig>
}
 80034e4:	bf00      	nop
 80034e6:	37c0      	adds	r7, #192	; 0xc0
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	ff20810f 	.word	0xff20810f
 80034f0:	f8de3f23 	.word	0xf8de3f23

080034f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3305      	adds	r3, #5
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	3204      	adds	r2, #4
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <ETH_MACAddressConfig+0x64>)
 8003516:	4413      	add	r3, r2
 8003518:	461a      	mov	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3303      	adds	r3, #3
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	061a      	lsls	r2, r3, #24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3302      	adds	r3, #2
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3301      	adds	r3, #1
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4313      	orrs	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <ETH_MACAddressConfig+0x68>)
 8003546:	4413      	add	r3, r2
 8003548:	461a      	mov	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6013      	str	r3, [r2, #0]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40028040 	.word	0x40028040
 800355c:	40028044 	.word	0x40028044

08003560 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0208 	orr.w	r2, r2, #8
 800357a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003584:	2001      	movs	r0, #1
 8003586:	f000 f8d9 	bl	800373c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035be:	2001      	movs	r0, #1
 80035c0:	f000 f8bc 	bl	800373c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0204 	orr.w	r2, r2, #4
 80035ee:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035f8:	2001      	movs	r0, #1
 80035fa:	f000 f89f 	bl	800373c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0204 	bic.w	r2, r2, #4
 8003628:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003632:	2001      	movs	r0, #1
 8003634:	f000 f882 	bl	800373c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003666:	6193      	str	r3, [r2, #24]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003690:	6193      	str	r3, [r2, #24]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ba:	6193      	str	r3, [r2, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f023 0302 	bic.w	r3, r3, #2
 80036e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036e4:	6193      	str	r3, [r2, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003712:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003720:	2001      	movs	r0, #1
 8003722:	f000 f80b 	bl	800373c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003730:	6193      	str	r3, [r2, #24]
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <ETH_Delay+0x34>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <ETH_Delay+0x38>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003758:	bf00      	nop
  }
  while (Delay --);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1e5a      	subs	r2, r3, #1
 800375e:	60fa      	str	r2, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f9      	bne.n	8003758 <ETH_Delay+0x1c>
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	20000004 	.word	0x20000004
 8003774:	10624dd3 	.word	0x10624dd3

08003778 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003792:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_FLASH_Program+0xd8>)
 8003794:	7e1b      	ldrb	r3, [r3, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_FLASH_Program+0x26>
 800379a:	2302      	movs	r3, #2
 800379c:	e054      	b.n	8003848 <HAL_FLASH_Program+0xd0>
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <HAL_FLASH_Program+0xd8>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037a8:	f000 f8a8 	bl	80038fc <FLASH_WaitForLastOperation>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d144      	bne.n	8003840 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80037bc:	2301      	movs	r3, #1
 80037be:	757b      	strb	r3, [r7, #21]
 80037c0:	e007      	b.n	80037d2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d102      	bne.n	80037ce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80037c8:	2302      	movs	r3, #2
 80037ca:	757b      	strb	r3, [r7, #21]
 80037cc:	e001      	b.n	80037d2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80037ce:	2304      	movs	r3, #4
 80037d0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	75bb      	strb	r3, [r7, #22]
 80037d6:	e02d      	b.n	8003834 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80037d8:	7dbb      	ldrb	r3, [r7, #22]
 80037da:	005a      	lsls	r2, r3, #1
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	eb02 0c03 	add.w	ip, r2, r3
 80037e2:	7dbb      	ldrb	r3, [r7, #22]
 80037e4:	0119      	lsls	r1, r3, #4
 80037e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ea:	f1c1 0620 	rsb	r6, r1, #32
 80037ee:	f1a1 0020 	sub.w	r0, r1, #32
 80037f2:	fa22 f401 	lsr.w	r4, r2, r1
 80037f6:	fa03 f606 	lsl.w	r6, r3, r6
 80037fa:	4334      	orrs	r4, r6
 80037fc:	fa23 f000 	lsr.w	r0, r3, r0
 8003800:	4304      	orrs	r4, r0
 8003802:	fa23 f501 	lsr.w	r5, r3, r1
 8003806:	b2a3      	uxth	r3, r4
 8003808:	4619      	mov	r1, r3
 800380a:	4660      	mov	r0, ip
 800380c:	f000 f85a 	bl	80038c4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003814:	f000 f872 	bl	80038fc <FLASH_WaitForLastOperation>
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_FLASH_Program+0xdc>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_FLASH_Program+0xdc>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800382e:	7dbb      	ldrb	r3, [r7, #22]
 8003830:	3301      	adds	r3, #1
 8003832:	75bb      	strb	r3, [r7, #22]
 8003834:	7dba      	ldrb	r2, [r7, #22]
 8003836:	7d7b      	ldrb	r3, [r7, #21]
 8003838:	429a      	cmp	r2, r3
 800383a:	d3cd      	bcc.n	80037d8 <HAL_FLASH_Program+0x60>
 800383c:	e000      	b.n	8003840 <HAL_FLASH_Program+0xc8>
      {
        break;
 800383e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_FLASH_Program+0xd8>)
 8003842:	2200      	movs	r2, #0
 8003844:	761a      	strb	r2, [r3, #24]

  return status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	20000a60 	.word	0x20000a60
 8003854:	40022000 	.word	0x40022000

08003858 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_FLASH_Unlock+0x40>)
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_FLASH_Unlock+0x40>)
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_FLASH_Unlock+0x44>)
 8003872:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_FLASH_Unlock+0x40>)
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_FLASH_Unlock+0x48>)
 8003878:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <HAL_FLASH_Unlock+0x40>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800388a:	79fb      	ldrb	r3, [r7, #7]
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40022000 	.word	0x40022000
 800389c:	45670123 	.word	0x45670123
 80038a0:	cdef89ab 	.word	0xcdef89ab

080038a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_FLASH_Lock+0x1c>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_FLASH_Lock+0x1c>)
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40022000 	.word	0x40022000

080038c4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <FLASH_Program_HalfWord+0x30>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <FLASH_Program_HalfWord+0x34>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <FLASH_Program_HalfWord+0x34>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	887a      	ldrh	r2, [r7, #2]
 80038e6:	801a      	strh	r2, [r3, #0]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000a60 	.word	0x20000a60
 80038f8:	40022000 	.word	0x40022000

080038fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003904:	f7fe fd28 	bl	8002358 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800390a:	e010      	b.n	800392e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d00c      	beq.n	800392e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <FLASH_WaitForLastOperation+0x2e>
 800391a:	f7fe fd1d 	bl	8002358 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d201      	bcs.n	800392e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e025      	b.n	800397a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <FLASH_WaitForLastOperation+0x88>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e8      	bne.n	800390c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <FLASH_WaitForLastOperation+0x88>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003946:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <FLASH_WaitForLastOperation+0x88>)
 8003948:	2220      	movs	r2, #32
 800394a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <FLASH_WaitForLastOperation+0x88>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <FLASH_WaitForLastOperation+0x88>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <FLASH_WaitForLastOperation+0x88>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003970:	f000 f80a 	bl	8003988 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40022000 	.word	0x40022000

08003988 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <FLASH_SetErrorCode+0x9c>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <FLASH_SetErrorCode+0x9c>)
 80039a8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f043 0310 	orr.w	r3, r3, #16
 80039b0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <FLASH_SetErrorCode+0x9c>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <FLASH_SetErrorCode+0x9c>)
 80039c8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <FLASH_SetErrorCode+0x9c>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <FLASH_SetErrorCode+0x9c>)
 80039e8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f240 1201 	movw	r2, #257	; 0x101
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d106      	bne.n	8003a0e <FLASH_SetErrorCode+0x86>
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	61d3      	str	r3, [r2, #28]
}  
 8003a0c:	e002      	b.n	8003a14 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a0e:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <FLASH_SetErrorCode+0x98>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60d3      	str	r3, [r2, #12]
}  
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000
 8003a24:	20000a60 	.word	0x20000a60

08003a28 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <FLASH_PageErase+0x38>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <FLASH_PageErase+0x3c>)
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <FLASH_PageErase+0x3c>)
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <FLASH_PageErase+0x3c>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <FLASH_PageErase+0x3c>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <FLASH_PageErase+0x3c>)
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000a60 	.word	0x20000a60
 8003a64:	40022000 	.word	0x40022000

08003a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b08b      	sub	sp, #44	; 0x2c
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a7a:	e169      	b.n	8003d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	f040 8158 	bne.w	8003d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a9a      	ldr	r2, [pc, #616]	; (8003d08 <HAL_GPIO_Init+0x2a0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d05e      	beq.n	8003b62 <HAL_GPIO_Init+0xfa>
 8003aa4:	4a98      	ldr	r2, [pc, #608]	; (8003d08 <HAL_GPIO_Init+0x2a0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d875      	bhi.n	8003b96 <HAL_GPIO_Init+0x12e>
 8003aaa:	4a98      	ldr	r2, [pc, #608]	; (8003d0c <HAL_GPIO_Init+0x2a4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d058      	beq.n	8003b62 <HAL_GPIO_Init+0xfa>
 8003ab0:	4a96      	ldr	r2, [pc, #600]	; (8003d0c <HAL_GPIO_Init+0x2a4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d86f      	bhi.n	8003b96 <HAL_GPIO_Init+0x12e>
 8003ab6:	4a96      	ldr	r2, [pc, #600]	; (8003d10 <HAL_GPIO_Init+0x2a8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d052      	beq.n	8003b62 <HAL_GPIO_Init+0xfa>
 8003abc:	4a94      	ldr	r2, [pc, #592]	; (8003d10 <HAL_GPIO_Init+0x2a8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d869      	bhi.n	8003b96 <HAL_GPIO_Init+0x12e>
 8003ac2:	4a94      	ldr	r2, [pc, #592]	; (8003d14 <HAL_GPIO_Init+0x2ac>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04c      	beq.n	8003b62 <HAL_GPIO_Init+0xfa>
 8003ac8:	4a92      	ldr	r2, [pc, #584]	; (8003d14 <HAL_GPIO_Init+0x2ac>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d863      	bhi.n	8003b96 <HAL_GPIO_Init+0x12e>
 8003ace:	4a92      	ldr	r2, [pc, #584]	; (8003d18 <HAL_GPIO_Init+0x2b0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d046      	beq.n	8003b62 <HAL_GPIO_Init+0xfa>
 8003ad4:	4a90      	ldr	r2, [pc, #576]	; (8003d18 <HAL_GPIO_Init+0x2b0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d85d      	bhi.n	8003b96 <HAL_GPIO_Init+0x12e>
 8003ada:	2b12      	cmp	r3, #18
 8003adc:	d82a      	bhi.n	8003b34 <HAL_GPIO_Init+0xcc>
 8003ade:	2b12      	cmp	r3, #18
 8003ae0:	d859      	bhi.n	8003b96 <HAL_GPIO_Init+0x12e>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <HAL_GPIO_Init+0x80>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b63 	.word	0x08003b63
 8003aec:	08003b3d 	.word	0x08003b3d
 8003af0:	08003b4f 	.word	0x08003b4f
 8003af4:	08003b91 	.word	0x08003b91
 8003af8:	08003b97 	.word	0x08003b97
 8003afc:	08003b97 	.word	0x08003b97
 8003b00:	08003b97 	.word	0x08003b97
 8003b04:	08003b97 	.word	0x08003b97
 8003b08:	08003b97 	.word	0x08003b97
 8003b0c:	08003b97 	.word	0x08003b97
 8003b10:	08003b97 	.word	0x08003b97
 8003b14:	08003b97 	.word	0x08003b97
 8003b18:	08003b97 	.word	0x08003b97
 8003b1c:	08003b97 	.word	0x08003b97
 8003b20:	08003b97 	.word	0x08003b97
 8003b24:	08003b97 	.word	0x08003b97
 8003b28:	08003b97 	.word	0x08003b97
 8003b2c:	08003b45 	.word	0x08003b45
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	4a79      	ldr	r2, [pc, #484]	; (8003d1c <HAL_GPIO_Init+0x2b4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b3a:	e02c      	b.n	8003b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	623b      	str	r3, [r7, #32]
          break;
 8003b42:	e029      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	623b      	str	r3, [r7, #32]
          break;
 8003b4c:	e024      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	3308      	adds	r3, #8
 8003b54:	623b      	str	r3, [r7, #32]
          break;
 8003b56:	e01f      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	623b      	str	r3, [r7, #32]
          break;
 8003b60:	e01a      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	623b      	str	r3, [r7, #32]
          break;
 8003b6e:	e013      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b78:	2308      	movs	r3, #8
 8003b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	611a      	str	r2, [r3, #16]
          break;
 8003b82:	e009      	b.n	8003b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b84:	2308      	movs	r3, #8
 8003b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	615a      	str	r2, [r3, #20]
          break;
 8003b8e:	e003      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
          break;
 8003b94:	e000      	b.n	8003b98 <HAL_GPIO_Init+0x130>
          break;
 8003b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2bff      	cmp	r3, #255	; 0xff
 8003b9c:	d801      	bhi.n	8003ba2 <HAL_GPIO_Init+0x13a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	e001      	b.n	8003ba6 <HAL_GPIO_Init+0x13e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2bff      	cmp	r3, #255	; 0xff
 8003bac:	d802      	bhi.n	8003bb4 <HAL_GPIO_Init+0x14c>
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	e002      	b.n	8003bba <HAL_GPIO_Init+0x152>
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	3b08      	subs	r3, #8
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	210f      	movs	r1, #15
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	6a39      	ldr	r1, [r7, #32]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80b1 	beq.w	8003d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_GPIO_Init+0x2b8>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4a4c      	ldr	r2, [pc, #304]	; (8003d20 <HAL_GPIO_Init+0x2b8>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6193      	str	r3, [r2, #24]
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_GPIO_Init+0x2b8>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c00:	4a48      	ldr	r2, [pc, #288]	; (8003d24 <HAL_GPIO_Init+0x2bc>)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	220f      	movs	r2, #15
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a40      	ldr	r2, [pc, #256]	; (8003d28 <HAL_GPIO_Init+0x2c0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_GPIO_Init+0x1ec>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3f      	ldr	r2, [pc, #252]	; (8003d2c <HAL_GPIO_Init+0x2c4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00d      	beq.n	8003c50 <HAL_GPIO_Init+0x1e8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3e      	ldr	r2, [pc, #248]	; (8003d30 <HAL_GPIO_Init+0x2c8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <HAL_GPIO_Init+0x1e4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3d      	ldr	r2, [pc, #244]	; (8003d34 <HAL_GPIO_Init+0x2cc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_GPIO_Init+0x1e0>
 8003c44:	2303      	movs	r3, #3
 8003c46:	e006      	b.n	8003c56 <HAL_GPIO_Init+0x1ee>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	e004      	b.n	8003c56 <HAL_GPIO_Init+0x1ee>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e002      	b.n	8003c56 <HAL_GPIO_Init+0x1ee>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <HAL_GPIO_Init+0x1ee>
 8003c54:	2300      	movs	r3, #0
 8003c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c58:	f002 0203 	and.w	r2, r2, #3
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	4093      	lsls	r3, r2
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c66:	492f      	ldr	r1, [pc, #188]	; (8003d24 <HAL_GPIO_Init+0x2bc>)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d006      	beq.n	8003c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	492c      	ldr	r1, [pc, #176]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
 8003c8c:	e006      	b.n	8003c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	4928      	ldr	r1, [pc, #160]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	4922      	ldr	r1, [pc, #136]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	491e      	ldr	r1, [pc, #120]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	4914      	ldr	r1, [pc, #80]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d021      	beq.n	8003d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	490e      	ldr	r1, [pc, #56]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60cb      	str	r3, [r1, #12]
 8003d04:	e021      	b.n	8003d4a <HAL_GPIO_Init+0x2e2>
 8003d06:	bf00      	nop
 8003d08:	10320000 	.word	0x10320000
 8003d0c:	10310000 	.word	0x10310000
 8003d10:	10220000 	.word	0x10220000
 8003d14:	10210000 	.word	0x10210000
 8003d18:	10120000 	.word	0x10120000
 8003d1c:	10110000 	.word	0x10110000
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010800 	.word	0x40010800
 8003d2c:	40010c00 	.word	0x40010c00
 8003d30:	40011000 	.word	0x40011000
 8003d34:	40011400 	.word	0x40011400
 8003d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_GPIO_Init+0x304>)
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	4909      	ldr	r1, [pc, #36]	; (8003d6c <HAL_GPIO_Init+0x304>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f47f ae8e 	bne.w	8003a7c <HAL_GPIO_Init+0x14>
  }
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	372c      	adds	r7, #44	; 0x2c
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	40010400 	.word	0x40010400

08003d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e001      	b.n	8003d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	807b      	strh	r3, [r7, #2]
 8003daa:	4613      	mov	r3, r2
 8003dac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dae:	787b      	ldrb	r3, [r7, #1]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db4:	887a      	ldrh	r2, [r7, #2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dba:	e003      	b.n	8003dc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	041a      	lsls	r2, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	611a      	str	r2, [r3, #16]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fdb2 	bl	8001958 <HAL_GPIO_EXTI_Callback>
  }
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010400 	.word	0x40010400

08003e00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	b08f      	sub	sp, #60	; 0x3c
 8003e04:	af0a      	add	r7, sp, #40	; 0x28
 8003e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e116      	b.n	8004040 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f00f f945 	bl	80130bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2203      	movs	r2, #3
 8003e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e40:	d102      	bne.n	8003e48 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 f84d 	bl	8005eec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	687e      	ldr	r6, [r7, #4]
 8003e5a:	466d      	mov	r5, sp
 8003e5c:	f106 0410 	add.w	r4, r6, #16
 8003e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e70:	1d33      	adds	r3, r6, #4
 8003e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e74:	6838      	ldr	r0, [r7, #0]
 8003e76:	f001 ff6b 	bl	8005d50 <USB_CoreInit>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_PCD_Init+0x8c>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0d9      	b.n	8004040 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f002 f83a 	bl	8005f0c <USB_SetCurrentMode>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_PCD_Init+0xaa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0ca      	b.n	8004040 <HAL_PCD_Init+0x240>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
 8003eae:	e04a      	b.n	8003f46 <HAL_PCD_Init+0x146>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	333d      	adds	r3, #61	; 0x3d
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	333c      	adds	r3, #60	; 0x3c
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	b298      	uxth	r0, r3
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3356      	adds	r3, #86	; 0x56
 8003eec:	4602      	mov	r2, r0
 8003eee:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	3340      	adds	r3, #64	; 0x40
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	3344      	adds	r3, #68	; 0x44
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	3348      	adds	r3, #72	; 0x48
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	334c      	adds	r3, #76	; 0x4c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3af      	bcc.n	8003eb0 <HAL_PCD_Init+0xb0>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e044      	b.n	8003fe0 <HAL_PCD_Init+0x1e0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f56:	7bfa      	ldrb	r2, [r7, #15]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3b5      	bcc.n	8003f56 <HAL_PCD_Init+0x156>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	687e      	ldr	r6, [r7, #4]
 8003ff2:	466d      	mov	r5, sp
 8003ff4:	f106 0410 	add.w	r4, r6, #16
 8003ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004000:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004004:	e885 0003 	stmia.w	r5, {r0, r1}
 8004008:	1d33      	adds	r3, r6, #4
 800400a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800400c:	6838      	ldr	r0, [r7, #0]
 800400e:	f001 ffc9 	bl	8005fa4 <USB_DevInit>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_PCD_Init+0x224>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e00d      	b.n	8004040 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f002 ff4d 	bl	8006ed8 <USB_DevDisconnect>

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004048 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_PCD_Start+0x16>
 800405a:	2302      	movs	r3, #2
 800405c:	e012      	b.n	8004084 <HAL_PCD_Start+0x3c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f001 ff2e 	bl	8005ecc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f002 ff0f 	bl	8006e98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b08d      	sub	sp, #52	; 0x34
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 ffc6 	bl	8007034 <USB_GetMode>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 8443 	bne.w	8004936 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 ff2f 	bl	8006f18 <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8439 	beq.w	8004934 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f002 ff1c 	bl	8006f18 <USB_ReadInterrupts>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d107      	bne.n	80040fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f002 0202 	and.w	r2, r2, #2
 80040f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f002 ff0a 	bl	8006f18 <USB_ReadInterrupts>
 8004104:	4603      	mov	r3, r0
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d161      	bne.n	80041d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0210 	bic.w	r2, r2, #16
 800411c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	0c5b      	lsrs	r3, r3, #17
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	2b02      	cmp	r3, #2
 8004148:	d124      	bne.n	8004194 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d035      	beq.n	80041c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6a38      	ldr	r0, [r7, #32]
 800416a:	f002 fd47 	bl	8006bfc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800417a:	441a      	add	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418c:	441a      	add	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	615a      	str	r2, [r3, #20]
 8004192:	e016      	b.n	80041c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	0c5b      	lsrs	r3, r3, #17
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b06      	cmp	r3, #6
 800419e:	d110      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041a6:	2208      	movs	r2, #8
 80041a8:	4619      	mov	r1, r3
 80041aa:	6a38      	ldr	r0, [r7, #32]
 80041ac:	f002 fd26 	bl	8006bfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041bc:	441a      	add	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0210 	orr.w	r2, r2, #16
 80041d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f002 fe9e 	bl	8006f18 <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041e6:	f040 80a7 	bne.w	8004338 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 fea2 	bl	8006f3c <USB_ReadDevAllOutEpInterrupt>
 80041f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041fa:	e099      	b.n	8004330 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 808e 	beq.w	8004324 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f002 fec4 	bl	8006fa0 <USB_ReadDevOutEPInterrupt>
 8004218:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00c      	beq.n	800423e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fe41 	bl	8004ec0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	2308      	movs	r3, #8
 8004258:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800425a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fe7d 	bl	8004f5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	2310      	movs	r3, #16
 800427c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d030      	beq.n	80042ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d109      	bne.n	80042a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	78db      	ldrb	r3, [r3, #3]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f00e ffbe 	bl	8013254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	2302      	movs	r3, #2
 80042e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	2320      	movs	r3, #32
 8004304:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004322:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	3301      	adds	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	f47f af62 	bne.w	80041fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f002 fdeb 	bl	8006f18 <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800434c:	f040 80a4 	bne.w	8004498 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f002 fe0a 	bl	8006f6e <USB_ReadDevAllInEpInterrupt>
 800435a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004360:	e096      	b.n	8004490 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 808b 	beq.w	8004484 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f002 fe2e 	bl	8006fda <USB_ReadDevInEPInterrupt>
 800437e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	2201      	movs	r2, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043aa:	4013      	ands	r3, r2
 80043ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	461a      	mov	r2, r3
 80043bc:	2301      	movs	r3, #1
 80043be:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f00e fec9 	bl	801315e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	461a      	mov	r2, r3
 80043e4:	2308      	movs	r3, #8
 80043e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	461a      	mov	r2, r3
 8004400:	2310      	movs	r3, #16
 8004402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	461a      	mov	r2, r3
 800441c:	2340      	movs	r3, #64	; 0x40
 800441e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d023      	beq.n	8004472 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800442a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800442c:	6a38      	ldr	r0, [r7, #32]
 800442e:	f001 fedb 	bl	80061e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	3338      	adds	r3, #56	; 0x38
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	3304      	adds	r3, #4
 8004444:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d108      	bne.n	8004460 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2200      	movs	r2, #0
 8004452:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	b2db      	uxtb	r3, r3
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f00e ff0c 	bl	8013278 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	2302      	movs	r3, #2
 8004470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800447c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fc96 	bl	8004db0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	3301      	adds	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	f47f af65 	bne.w	8004362 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fd3b 	bl	8006f18 <USB_ReadInterrupts>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ac:	d114      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f00e feb8 	bl	8013238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f002 fd1b 	bl	8006f18 <USB_ReadInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ec:	d112      	bne.n	8004514 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f00e fe74 	bl	80131ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004512:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f002 fcfd 	bl	8006f18 <USB_ReadInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	f040 80b5 	bne.w	8004696 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2110      	movs	r1, #16
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fe4e 	bl	80061e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	e046      	b.n	80045e0 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	461a      	mov	r2, r3
 8004560:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004564:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004584:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	461a      	mov	r2, r3
 8004594:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004598:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	3301      	adds	r3, #1
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3b3      	bcc.n	8004552 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80045fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004616:	f043 030b 	orr.w	r3, r3, #11
 800461a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462c:	f043 030b 	orr.w	r3, r3, #11
 8004630:	6453      	str	r3, [r2, #68]	; 0x44
 8004632:	e015      	b.n	8004660 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004646:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800464a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465a:	f043 030b 	orr.w	r3, r3, #11
 800465e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004672:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f002 fd07 	bl	8007094 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f002 fc3c 	bl	8006f18 <USB_ReadInterrupts>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046aa:	d124      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f002 fccc 	bl	800704e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fe0a 	bl	80062d4 <USB_GetDevSpeed>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681c      	ldr	r4, [r3, #0]
 80046cc:	f001 f9e6 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 80046d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4620      	mov	r0, r4
 80046dc:	f001 fb5a 	bl	8005d94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f00e fd64 	bl	80131ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f002 fc0c 	bl	8006f18 <USB_ReadInterrupts>
 8004700:	4603      	mov	r3, r0
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b08      	cmp	r3, #8
 8004708:	d10a      	bne.n	8004720 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f00e fd41 	bl	8013192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f002 0208 	and.w	r2, r2, #8
 800471e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f002 fbf7 	bl	8006f18 <USB_ReadInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d122      	bne.n	800477a <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004740:	2301      	movs	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	e014      	b.n	8004770 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	b2db      	uxtb	r3, r3
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 faf2 	bl	8004d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	3301      	adds	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	429a      	cmp	r2, r3
 8004778:	d3e5      	bcc.n	8004746 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f002 fbca 	bl	8006f18 <USB_ReadInterrupts>
 8004784:	4603      	mov	r3, r0
 8004786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478e:	d13b      	bne.n	8004808 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004790:	2301      	movs	r3, #1
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	e02b      	b.n	80047ee <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3340      	adds	r3, #64	; 0x40
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d115      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da12      	bge.n	80047e8 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	333f      	adds	r3, #63	; 0x3f
 80047d2:	2201      	movs	r2, #1
 80047d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fab3 	bl	8004d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3ce      	bcc.n	8004796 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f002 fb83 	bl	8006f18 <USB_ReadInterrupts>
 8004812:	4603      	mov	r3, r0
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481c:	d155      	bne.n	80048ca <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481e:	2301      	movs	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
 8004822:	e045      	b.n	80048b0 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d12e      	bne.n	80048aa <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800484c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800484e:	2b00      	cmp	r3, #0
 8004850:	da2b      	bge.n	80048aa <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800485e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004862:	429a      	cmp	r2, r3
 8004864:	d121      	bne.n	80048aa <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a6:	6053      	str	r3, [r2, #4]
            break;
 80048a8:	e007      	b.n	80048ba <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	3301      	adds	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3b4      	bcc.n	8004824 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f002 fb22 	bl	8006f18 <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048de:	d10a      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f00e fcdb 	bl	801329c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 fb0c 	bl	8006f18 <USB_ReadInterrupts>
 8004900:	4603      	mov	r3, r0
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d115      	bne.n	8004936 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f00e fccb 	bl	80132b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	e000      	b.n	8004936 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8004934:	bf00      	nop
    }
  }
}
 8004936:	3734      	adds	r7, #52	; 0x34
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}

0800493c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_PCD_SetAddress+0x1a>
 8004952:	2302      	movs	r3, #2
 8004954:	e013      	b.n	800497e <HAL_PCD_SetAddress+0x42>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f002 fa6d 	bl	8006e4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	4608      	mov	r0, r1
 8004990:	4611      	mov	r1, r2
 8004992:	461a      	mov	r2, r3
 8004994:	4603      	mov	r3, r0
 8004996:	70fb      	strb	r3, [r7, #3]
 8004998:	460b      	mov	r3, r1
 800499a:	803b      	strh	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da0f      	bge.n	80049cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 020f 	and.w	r2, r3, #15
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	3338      	adds	r3, #56	; 0x38
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	3304      	adds	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	705a      	strb	r2, [r3, #1]
 80049ca:	e00f      	b.n	80049ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	f003 020f 	and.w	r2, r3, #15
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049f8:	883a      	ldrh	r2, [r7, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	78ba      	ldrb	r2, [r7, #2]
 8004a02:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a16:	78bb      	ldrb	r3, [r7, #2]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d102      	bne.n	8004a22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_PCD_EP_Open+0xaa>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e00e      	b.n	8004a4e <HAL_PCD_EP_Open+0xc8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fc66 	bl	8006310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da0f      	bge.n	8004a8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	3338      	adds	r3, #56	; 0x38
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3304      	adds	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	705a      	strb	r2, [r3, #1]
 8004a88:	e00f      	b.n	8004aaa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 020f 	and.w	r2, r3, #15
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_PCD_EP_Close+0x6e>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e00e      	b.n	8004ae2 <HAL_PCD_EP_Close+0x8c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fca2 	bl	800641c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	460b      	mov	r3, r1
 8004af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	f003 020f 	and.w	r2, r3, #15
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	3304      	adds	r3, #4
 8004b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fd48 	bl	80065d4 <USB_EPStartXfer>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004b70:	681b      	ldr	r3, [r3, #0]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8c:	7afb      	ldrb	r3, [r7, #11]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	3338      	adds	r3, #56	; 0x38
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bbc:	7afb      	ldrb	r3, [r7, #11]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fd00 	bl	80065d4 <USB_EPStartXfer>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d901      	bls.n	8004bfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e04e      	b.n	8004c9a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	da0f      	bge.n	8004c24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	f003 020f 	and.w	r2, r3, #15
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	3338      	adds	r3, #56	; 0x38
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	3304      	adds	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	705a      	strb	r2, [r3, #1]
 8004c22:	e00d      	b.n	8004c40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	3304      	adds	r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_PCD_EP_SetStall+0x82>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e01c      	b.n	8004c9a <HAL_PCD_EP_SetStall+0xbc>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f002 f81b 	bl	8006caa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d108      	bne.n	8004c90 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f002 fa02 	bl	8007094 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 020f 	and.w	r2, r3, #15
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d901      	bls.n	8004cc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e042      	b.n	8004d46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da0f      	bge.n	8004ce8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	3338      	adds	r3, #56	; 0x38
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	3304      	adds	r3, #4
 8004cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	705a      	strb	r2, [r3, #1]
 8004ce6:	e00f      	b.n	8004d08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 020f 	and.w	r2, r3, #15
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_PCD_EP_ClrStall+0x86>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e00e      	b.n	8004d46 <HAL_PCD_EP_ClrStall+0xa4>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 f824 	bl	8006d84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da0c      	bge.n	8004d7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3338      	adds	r3, #56	; 0x38
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	3304      	adds	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e00c      	b.n	8004d96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fe4b 	bl	8006a38 <USB_EPStopXfer>
 8004da2:	4603      	mov	r3, r0
 8004da4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004da6:	7afb      	ldrb	r3, [r7, #11]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3338      	adds	r3, #56	; 0x38
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d901      	bls.n	8004de8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e067      	b.n	8004eb8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d902      	bls.n	8004e04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3303      	adds	r3, #3
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e0c:	e026      	b.n	8004e5c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d902      	bls.n	8004e2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3303      	adds	r3, #3
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f001 fea3 	bl	8006b8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	441a      	add	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	441a      	add	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d809      	bhi.n	8004e86 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d203      	bcs.n	8004e86 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1c3      	bne.n	8004e0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d811      	bhi.n	8004eb6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	2201      	movs	r2, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	6939      	ldr	r1, [r7, #16]
 8004eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	333c      	adds	r3, #60	; 0x3c
 8004ed8:	3304      	adds	r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <PCD_EP_OutXfrComplete_int+0x98>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d124      	bne.n	8004f40 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f12:	6093      	str	r3, [r2, #8]
 8004f14:	e01a      	b.n	8004f4c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2320      	movs	r3, #32
 8004f30:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f00e f8f5 	bl	8013128 <HAL_PCD_DataOutStageCallback>
 8004f3e:	e005      	b.n	8004f4c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00e f8ee 	bl	8013128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	4f54310a 	.word	0x4f54310a

08004f5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	333c      	adds	r3, #60	; 0x3c
 8004f74:	3304      	adds	r3, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <PCD_EP_OutSetupPacket_int+0x64>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d90e      	bls.n	8004fb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f00e f8a7 	bl	8013104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	4f54300a 	.word	0x4f54300a

08004fc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fe2:	883b      	ldrh	r3, [r7, #0]
 8004fe4:	0419      	lsls	r1, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff0:	e028      	b.n	8005044 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005000:	2300      	movs	r3, #0
 8005002:	73fb      	strb	r3, [r7, #15]
 8005004:	e00d      	b.n	8005022 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	3340      	adds	r3, #64	; 0x40
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4413      	add	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	3301      	adds	r3, #1
 8005020:	73fb      	strb	r3, [r7, #15]
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	3b01      	subs	r3, #1
 8005028:	429a      	cmp	r2, r3
 800502a:	d3ec      	bcc.n	8005006 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800502c:	883b      	ldrh	r3, [r7, #0]
 800502e:	0418      	lsls	r0, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	3b01      	subs	r3, #1
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	4302      	orrs	r2, r0
 800503c:	3340      	adds	r3, #64	; 0x40
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	887a      	ldrh	r2, [r7, #2]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e304      	b.n	800568c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8087 	beq.w	800519e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005090:	4b92      	ldr	r3, [pc, #584]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b04      	cmp	r3, #4
 800509a:	d00c      	beq.n	80050b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800509c:	4b8f      	ldr	r3, [pc, #572]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d112      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
 80050a8:	4b8c      	ldr	r3, [pc, #560]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d10b      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b6:	4b89      	ldr	r3, [pc, #548]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06c      	beq.n	800519c <HAL_RCC_OscConfig+0x12c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d168      	bne.n	800519c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e2de      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x76>
 80050d8:	4b80      	ldr	r3, [pc, #512]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a7f      	ldr	r2, [pc, #508]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e02e      	b.n	8005144 <HAL_RCC_OscConfig+0xd4>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x98>
 80050ee:	4b7b      	ldr	r3, [pc, #492]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7a      	ldr	r2, [pc, #488]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b78      	ldr	r3, [pc, #480]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a77      	ldr	r2, [pc, #476]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e01d      	b.n	8005144 <HAL_RCC_OscConfig+0xd4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0xbc>
 8005112:	4b72      	ldr	r3, [pc, #456]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a71      	ldr	r2, [pc, #452]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4b6f      	ldr	r3, [pc, #444]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6e      	ldr	r2, [pc, #440]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0xd4>
 800512c:	4b6b      	ldr	r3, [pc, #428]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6a      	ldr	r2, [pc, #424]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b68      	ldr	r3, [pc, #416]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a67      	ldr	r2, [pc, #412]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fd f904 	bl	8002358 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fd f900 	bl	8002358 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e292      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b5d      	ldr	r3, [pc, #372]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0xe4>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fd f8f0 	bl	8002358 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd f8ec 	bl	8002358 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e27e      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	4b53      	ldr	r3, [pc, #332]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x10c>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d063      	beq.n	8005272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051aa:	4b4c      	ldr	r3, [pc, #304]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051b6:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d11c      	bne.n	80051fc <HAL_RCC_OscConfig+0x18c>
 80051c2:	4b46      	ldr	r3, [pc, #280]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	4b43      	ldr	r3, [pc, #268]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_RCC_OscConfig+0x176>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e252      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4939      	ldr	r1, [pc, #228]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fa:	e03a      	b.n	8005272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d020      	beq.n	8005246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005204:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <HAL_RCC_OscConfig+0x270>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fd f8a5 	bl	8002358 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005212:	f7fd f8a1 	bl	8002358 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e233      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005224:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005230:	4b2a      	ldr	r3, [pc, #168]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4927      	ldr	r1, [pc, #156]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]
 8005244:	e015      	b.n	8005272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005246:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <HAL_RCC_OscConfig+0x270>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fd f884 	bl	8002358 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005254:	f7fd f880 	bl	8002358 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e212      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005266:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d03a      	beq.n	80052f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d019      	beq.n	80052ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_RCC_OscConfig+0x274>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528c:	f7fd f864 	bl	8002358 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005294:	f7fd f860 	bl	8002358 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e1f2      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <HAL_RCC_OscConfig+0x26c>)
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052b2:	2001      	movs	r0, #1
 80052b4:	f000 fbfc 	bl	8005ab0 <RCC_Delay>
 80052b8:	e01c      	b.n	80052f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_RCC_OscConfig+0x274>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c0:	f7fd f84a 	bl	8002358 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c6:	e00f      	b.n	80052e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fd f846 	bl	8002358 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d908      	bls.n	80052e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1d8      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	42420000 	.word	0x42420000
 80052e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e8:	4b9b      	ldr	r3, [pc, #620]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e9      	bne.n	80052c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80a6 	beq.w	800544e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005306:	4b94      	ldr	r3, [pc, #592]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10d      	bne.n	800532e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	4b91      	ldr	r3, [pc, #580]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4a90      	ldr	r2, [pc, #576]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531c:	61d3      	str	r3, [r2, #28]
 800531e:	4b8e      	ldr	r3, [pc, #568]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800532a:	2301      	movs	r3, #1
 800532c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532e:	4b8b      	ldr	r3, [pc, #556]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d118      	bne.n	800536c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800533a:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a87      	ldr	r2, [pc, #540]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005346:	f7fd f807 	bl	8002358 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fd f803 	bl	8002358 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	; 0x64
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e195      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005360:	4b7e      	ldr	r3, [pc, #504]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d106      	bne.n	8005382 <HAL_RCC_OscConfig+0x312>
 8005374:	4b78      	ldr	r3, [pc, #480]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4a77      	ldr	r2, [pc, #476]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6213      	str	r3, [r2, #32]
 8005380:	e02d      	b.n	80053de <HAL_RCC_OscConfig+0x36e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x334>
 800538a:	4b73      	ldr	r3, [pc, #460]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	4a72      	ldr	r2, [pc, #456]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6213      	str	r3, [r2, #32]
 8005396:	4b70      	ldr	r3, [pc, #448]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4a6f      	ldr	r2, [pc, #444]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	6213      	str	r3, [r2, #32]
 80053a2:	e01c      	b.n	80053de <HAL_RCC_OscConfig+0x36e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCC_OscConfig+0x356>
 80053ac:	4b6a      	ldr	r3, [pc, #424]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	4a69      	ldr	r2, [pc, #420]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	6213      	str	r3, [r2, #32]
 80053b8:	4b67      	ldr	r3, [pc, #412]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4a66      	ldr	r2, [pc, #408]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6213      	str	r3, [r2, #32]
 80053c4:	e00b      	b.n	80053de <HAL_RCC_OscConfig+0x36e>
 80053c6:	4b64      	ldr	r3, [pc, #400]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	4a63      	ldr	r2, [pc, #396]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	6213      	str	r3, [r2, #32]
 80053d2:	4b61      	ldr	r3, [pc, #388]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	4a60      	ldr	r2, [pc, #384]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053d8:	f023 0304 	bic.w	r3, r3, #4
 80053dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d015      	beq.n	8005412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e6:	f7fc ffb7 	bl	8002358 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ec:	e00a      	b.n	8005404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fc ffb3 	bl	8002358 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e143      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005404:	4b54      	ldr	r3, [pc, #336]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ee      	beq.n	80053ee <HAL_RCC_OscConfig+0x37e>
 8005410:	e014      	b.n	800543c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005412:	f7fc ffa1 	bl	8002358 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fc ff9d 	bl	8002358 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	; 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e12d      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005430:	4b49      	ldr	r3, [pc, #292]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ee      	bne.n	800541a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005442:	4b45      	ldr	r3, [pc, #276]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4a44      	ldr	r2, [pc, #272]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 808c 	beq.w	8005570 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005458:	4b3f      	ldr	r3, [pc, #252]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d10e      	bne.n	8005484 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005466:	4b3c      	ldr	r3, [pc, #240]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800546e:	2b08      	cmp	r3, #8
 8005470:	d108      	bne.n	8005484 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800547a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547e:	d101      	bne.n	8005484 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e103      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	2b02      	cmp	r3, #2
 800548a:	d14e      	bne.n	800552a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800548c:	4b32      	ldr	r3, [pc, #200]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005498:	4b2f      	ldr	r3, [pc, #188]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0ef      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80054ac:	4b2c      	ldr	r3, [pc, #176]	; (8005560 <HAL_RCC_OscConfig+0x4f0>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fc ff51 	bl	8002358 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054ba:	f7fc ff4d 	bl	8002358 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b64      	cmp	r3, #100	; 0x64
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0df      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80054cc:	4b22      	ldr	r3, [pc, #136]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f0      	bne.n	80054ba <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80054d8:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	491c      	ldr	r1, [pc, #112]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	4918      	ldr	r1, [pc, #96]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80054fc:	4b18      	ldr	r3, [pc, #96]	; (8005560 <HAL_RCC_OscConfig+0x4f0>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005502:	f7fc ff29 	bl	8002358 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800550a:	f7fc ff25 	bl	8002358 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b64      	cmp	r3, #100	; 0x64
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0b7      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800551c:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x49a>
 8005528:	e022      	b.n	8005570 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 8005530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_RCC_OscConfig+0x4f0>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc ff0c 	bl	8002358 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005542:	e00f      	b.n	8005564 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005544:	f7fc ff08 	bl	8002358 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d908      	bls.n	8005564 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e09a      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
 8005560:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005564:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e9      	bne.n	8005544 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8088 	beq.w	800568a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800557a:	4b46      	ldr	r3, [pc, #280]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b08      	cmp	r3, #8
 8005584:	d068      	beq.n	8005658 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d14d      	bne.n	800562a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558e:	4b42      	ldr	r3, [pc, #264]	; (8005698 <HAL_RCC_OscConfig+0x628>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fc fee0 	bl	8002358 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fc fedc 	bl	8002358 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e06e      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c2:	d10f      	bne.n	80055e4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80055c4:	4b33      	ldr	r3, [pc, #204]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4931      	ldr	r1, [pc, #196]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	f023 020f 	bic.w	r2, r3, #15
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	492d      	ldr	r1, [pc, #180]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055e4:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	430b      	orrs	r3, r1
 80055f6:	4927      	ldr	r1, [pc, #156]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <HAL_RCC_OscConfig+0x628>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005602:	f7fc fea9 	bl	8002358 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560a:	f7fc fea5 	bl	8002358 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e037      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800561c:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x59a>
 8005628:	e02f      	b.n	800568a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_RCC_OscConfig+0x628>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fc fe92 	bl	8002358 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005638:	f7fc fe8e 	bl	8002358 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e020      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x5c8>
 8005656:	e018      	b.n	800568a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e013      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_OscConfig+0x624>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	429a      	cmp	r2, r3
 8005676:	d106      	bne.n	8005686 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	42420060 	.word	0x42420060

0800569c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0d0      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056b0:	4b6a      	ldr	r3, [pc, #424]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d910      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b67      	ldr	r3, [pc, #412]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 0207 	bic.w	r2, r3, #7
 80056c6:	4965      	ldr	r1, [pc, #404]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b63      	ldr	r3, [pc, #396]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0b8      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f8:	4b59      	ldr	r3, [pc, #356]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a58      	ldr	r2, [pc, #352]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 80056fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005710:	4b53      	ldr	r3, [pc, #332]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a52      	ldr	r2, [pc, #328]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005716:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800571a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571c:	4b50      	ldr	r3, [pc, #320]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	494d      	ldr	r1, [pc, #308]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800572a:	4313      	orrs	r3, r2
 800572c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d040      	beq.n	80057bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d115      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e07f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800575a:	4b41      	ldr	r3, [pc, #260]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e073      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576a:	4b3d      	ldr	r3, [pc, #244]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e06b      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800577a:	4b39      	ldr	r3, [pc, #228]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f023 0203 	bic.w	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4936      	ldr	r1, [pc, #216]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800578c:	f7fc fde4 	bl	8002358 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005792:	e00a      	b.n	80057aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005794:	f7fc fde0 	bl	8002358 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e053      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057aa:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 020c 	and.w	r2, r3, #12
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d1eb      	bne.n	8005794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d210      	bcs.n	80057ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ca:	4b24      	ldr	r3, [pc, #144]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f023 0207 	bic.w	r2, r3, #7
 80057d2:	4922      	ldr	r1, [pc, #136]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b20      	ldr	r3, [pc, #128]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e032      	b.n	8005852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4916      	ldr	r1, [pc, #88]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	490e      	ldr	r1, [pc, #56]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800582a:	f000 f859 	bl	80058e0 <HAL_RCC_GetSysClockFreq>
 800582e:	4602      	mov	r2, r0
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	490a      	ldr	r1, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x1c8>)
 800583c:	5ccb      	ldrb	r3, [r1, r3]
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <HAL_RCC_ClockConfig+0x1cc>)
 8005844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_ClockConfig+0x1d0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc fd42 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40022000 	.word	0x40022000
 8005860:	40021000 	.word	0x40021000
 8005864:	080165d8 	.word	0x080165d8
 8005868:	20000004 	.word	0x20000004
 800586c:	20000018 	.word	0x20000018

08005870 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800587c:	f107 0318 	add.w	r3, r7, #24
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	609a      	str	r2, [r3, #8]
 8005888:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800588a:	2302      	movs	r3, #2
 800588c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800588e:	2303      	movs	r3, #3
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8005892:	2300      	movs	r3, #0
 8005894:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8005896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800589a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800589c:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <HAL_RCC_MCOConfig+0x68>)
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_RCC_MCOConfig+0x68>)
 80058a2:	f043 0304 	orr.w	r3, r3, #4
 80058a6:	6193      	str	r3, [r2, #24]
 80058a8:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <HAL_RCC_MCOConfig+0x68>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80058b4:	f107 0318 	add.w	r3, r7, #24
 80058b8:	4619      	mov	r1, r3
 80058ba:	4808      	ldr	r0, [pc, #32]	; (80058dc <HAL_RCC_MCOConfig+0x6c>)
 80058bc:	f7fe f8d4 	bl	8003a68 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCC_MCOConfig+0x68>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80058c8:	4903      	ldr	r1, [pc, #12]	; (80058d8 <HAL_RCC_MCOConfig+0x68>)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
}
 80058d0:	bf00      	nop
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40021000 	.word	0x40021000
 80058dc:	40010800 	.word	0x40010800

080058e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	b099      	sub	sp, #100	; 0x64
 80058e6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80058e8:	4b66      	ldr	r3, [pc, #408]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058ea:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80058ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058f0:	c407      	stmia	r4!, {r0, r1, r2}
 80058f2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80058f4:	4b64      	ldr	r3, [pc, #400]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80058f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80058fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	657b      	str	r3, [r7, #84]	; 0x54
 8005904:	2300      	movs	r3, #0
 8005906:	653b      	str	r3, [r7, #80]	; 0x50
 8005908:	2300      	movs	r3, #0
 800590a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800590c:	2300      	movs	r3, #0
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
 8005918:	2300      	movs	r3, #0
 800591a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800591c:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b04      	cmp	r3, #4
 800592a:	d002      	beq.n	8005932 <HAL_RCC_GetSysClockFreq+0x52>
 800592c:	2b08      	cmp	r3, #8
 800592e:	d003      	beq.n	8005938 <HAL_RCC_GetSysClockFreq+0x58>
 8005930:	e09f      	b.n	8005a72 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005932:	4b57      	ldr	r3, [pc, #348]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005934:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005936:	e09f      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593a:	0c9b      	lsrs	r3, r3, #18
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	3340      	adds	r3, #64	; 0x40
 8005942:	f107 0220 	add.w	r2, r7, #32
 8005946:	4413      	add	r3, r2
 8005948:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800594c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800594e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8084 	beq.w	8005a62 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800595a:	4b4c      	ldr	r3, [pc, #304]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	3340      	adds	r3, #64	; 0x40
 8005964:	f107 0220 	add.w	r2, r7, #32
 8005968:	4413      	add	r3, r2
 800596a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800596e:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005970:	4b46      	ldr	r3, [pc, #280]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d060      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800597c:	4b43      	ldr	r3, [pc, #268]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	3301      	adds	r3, #1
 8005988:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800598a:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	3302      	adds	r3, #2
 8005996:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599a:	2200      	movs	r2, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	617a      	str	r2, [r7, #20]
 80059a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a2:	2200      	movs	r2, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	61fa      	str	r2, [r7, #28]
 80059a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80059ac:	4622      	mov	r2, r4
 80059ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059b2:	4684      	mov	ip, r0
 80059b4:	fb0c f202 	mul.w	r2, ip, r2
 80059b8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80059bc:	468c      	mov	ip, r1
 80059be:	4618      	mov	r0, r3
 80059c0:	4621      	mov	r1, r4
 80059c2:	4603      	mov	r3, r0
 80059c4:	fb03 f30c 	mul.w	r3, r3, ip
 80059c8:	4413      	add	r3, r2
 80059ca:	4602      	mov	r2, r0
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	fba2 8901 	umull	r8, r9, r2, r1
 80059d2:	444b      	add	r3, r9
 80059d4:	4699      	mov	r9, r3
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80059d8:	fb03 f209 	mul.w	r2, r3, r9
 80059dc:	2300      	movs	r3, #0
 80059de:	fb03 f308 	mul.w	r3, r3, r8
 80059e2:	4413      	add	r3, r2
 80059e4:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80059e6:	fba8 ab02 	umull	sl, fp, r8, r2
 80059ea:	445b      	add	r3, fp
 80059ec:	469b      	mov	fp, r3
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f0:	2200      	movs	r2, #0
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	60fa      	str	r2, [r7, #12]
 80059f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f8:	2200      	movs	r2, #0
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005a02:	4622      	mov	r2, r4
 8005a04:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005a08:	4641      	mov	r1, r8
 8005a0a:	fb01 f202 	mul.w	r2, r1, r2
 8005a0e:	46cc      	mov	ip, r9
 8005a10:	4618      	mov	r0, r3
 8005a12:	4621      	mov	r1, r4
 8005a14:	4603      	mov	r3, r0
 8005a16:	fb03 f30c 	mul.w	r3, r3, ip
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4641      	mov	r1, r8
 8005a20:	fba2 5601 	umull	r5, r6, r2, r1
 8005a24:	4433      	add	r3, r6
 8005a26:	461e      	mov	r6, r3
 8005a28:	462a      	mov	r2, r5
 8005a2a:	4633      	mov	r3, r6
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	4659      	mov	r1, fp
 8005a30:	f7fa fc00 	bl	8000234 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3c:	e007      	b.n	8005a4e <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005a42:	fb03 f202 	mul.w	r2, r3, r2
 8005a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005a4e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005a52:	461a      	mov	r2, r3
 8005a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d108      	bne.n	8005a6c <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8005a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a60:	e004      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a64:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8005a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6e:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005a70:	e002      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a74:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005a76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3764      	adds	r7, #100	; 0x64
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	0801480c 	.word	0x0801480c
 8005a88:	0801481c 	.word	0x0801481c
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	017d7840 	.word	0x017d7840
 8005a94:	003d0900 	.word	0x003d0900
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <HAL_RCC_GetHCLKFreq+0x10>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	20000004 	.word	0x20000004

08005ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <RCC_Delay+0x34>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <RCC_Delay+0x38>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	0a5b      	lsrs	r3, r3, #9
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005acc:	bf00      	nop
  }
  while (Delay --);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	60fa      	str	r2, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f9      	bne.n	8005acc <RCC_Delay+0x1c>
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	20000004 	.word	0x20000004
 8005ae8:	10624dd3 	.word	0x10624dd3

08005aec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	2300      	movs	r3, #0
 8005afa:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d07d      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b10:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10d      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1c:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	4a87      	ldr	r2, [pc, #540]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b26:	61d3      	str	r3, [r2, #28]
 8005b28:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b34:	2301      	movs	r3, #1
 8005b36:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b38:	4b82      	ldr	r3, [pc, #520]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d118      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b44:	4b7f      	ldr	r3, [pc, #508]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7e      	ldr	r2, [pc, #504]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b50:	f7fc fc02 	bl	8002358 <HAL_GetTick>
 8005b54:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	e008      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b58:	f7fc fbfe 	bl	8002358 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e0e5      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b76      	ldr	r3, [pc, #472]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b76:	4b72      	ldr	r3, [pc, #456]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d02e      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d027      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ba4:	4b68      	ldr	r3, [pc, #416]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005baa:	4a65      	ldr	r2, [pc, #404]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bba:	f7fc fbcd 	bl	8002358 <HAL_GetTick>
 8005bbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc fbc9 	bl	8002358 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0ae      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd8:	4b59      	ldr	r3, [pc, #356]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ee      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005be4:	4b56      	ldr	r3, [pc, #344]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4953      	ldr	r1, [pc, #332]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bf6:	7efb      	ldrb	r3, [r7, #27]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfc:	4b50      	ldr	r3, [pc, #320]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	4a4f      	ldr	r2, [pc, #316]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4947      	ldr	r1, [pc, #284]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005c32:	4b43      	ldr	r3, [pc, #268]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4940      	ldr	r1, [pc, #256]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005c50:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4938      	ldr	r1, [pc, #224]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005c62:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d148      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005c84:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d138      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c90:	4b2b      	ldr	r3, [pc, #172]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005c9c:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e042      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005cb0:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	4920      	ldr	r1, [pc, #128]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005cc2:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	491c      	ldr	r1, [pc, #112]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cda:	f7fc fb3d 	bl	8002358 <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ce2:	f7fc fb39 	bl	8002358 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b64      	cmp	r3, #100	; 0x64
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e020      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005d00:	e009      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d001      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00f      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4904      	ldr	r1, [pc, #16]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40007000 	.word	0x40007000
 8005d48:	42420440 	.word	0x42420440
 8005d4c:	42420070 	.word	0x42420070

08005d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d50:	b084      	sub	sp, #16
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	f107 001c 	add.w	r0, r7, #28
 8005d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 f9d8 	bl	8007124 <USB_CoreReset>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d90:	b004      	add	sp, #16
 8005d92:	4770      	bx	lr

08005d94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d165      	bne.n	8005e74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4a3e      	ldr	r2, [pc, #248]	; (8005ea4 <USB_SetTurnaroundTime+0x110>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d906      	bls.n	8005dbe <USB_SetTurnaroundTime+0x2a>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4a3d      	ldr	r2, [pc, #244]	; (8005ea8 <USB_SetTurnaroundTime+0x114>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d202      	bcs.n	8005dbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005db8:	230f      	movs	r3, #15
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e05c      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4a39      	ldr	r2, [pc, #228]	; (8005ea8 <USB_SetTurnaroundTime+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d306      	bcc.n	8005dd4 <USB_SetTurnaroundTime+0x40>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4a38      	ldr	r2, [pc, #224]	; (8005eac <USB_SetTurnaroundTime+0x118>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d202      	bcs.n	8005dd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005dce:	230e      	movs	r3, #14
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	e051      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4a35      	ldr	r2, [pc, #212]	; (8005eac <USB_SetTurnaroundTime+0x118>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d306      	bcc.n	8005dea <USB_SetTurnaroundTime+0x56>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4a34      	ldr	r2, [pc, #208]	; (8005eb0 <USB_SetTurnaroundTime+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d202      	bcs.n	8005dea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005de4:	230d      	movs	r3, #13
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e046      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <USB_SetTurnaroundTime+0x11c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d306      	bcc.n	8005e00 <USB_SetTurnaroundTime+0x6c>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <USB_SetTurnaroundTime+0x120>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d802      	bhi.n	8005e00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e03b      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a2c      	ldr	r2, [pc, #176]	; (8005eb4 <USB_SetTurnaroundTime+0x120>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d906      	bls.n	8005e16 <USB_SetTurnaroundTime+0x82>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a2b      	ldr	r2, [pc, #172]	; (8005eb8 <USB_SetTurnaroundTime+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d802      	bhi.n	8005e16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e10:	230b      	movs	r3, #11
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e030      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <USB_SetTurnaroundTime+0x124>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d906      	bls.n	8005e2c <USB_SetTurnaroundTime+0x98>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <USB_SetTurnaroundTime+0x128>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d802      	bhi.n	8005e2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e26:	230a      	movs	r3, #10
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e025      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4a23      	ldr	r2, [pc, #140]	; (8005ebc <USB_SetTurnaroundTime+0x128>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d906      	bls.n	8005e42 <USB_SetTurnaroundTime+0xae>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <USB_SetTurnaroundTime+0x12c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d202      	bcs.n	8005e42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e3c:	2309      	movs	r3, #9
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e01a      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a1e      	ldr	r2, [pc, #120]	; (8005ec0 <USB_SetTurnaroundTime+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d306      	bcc.n	8005e58 <USB_SetTurnaroundTime+0xc4>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <USB_SetTurnaroundTime+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d802      	bhi.n	8005e58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e52:	2308      	movs	r3, #8
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e00f      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <USB_SetTurnaroundTime+0x130>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d906      	bls.n	8005e6e <USB_SetTurnaroundTime+0xda>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4a19      	ldr	r2, [pc, #100]	; (8005ec8 <USB_SetTurnaroundTime+0x134>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d202      	bcs.n	8005e6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e68:	2307      	movs	r3, #7
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e004      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e6e:	2306      	movs	r3, #6
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e001      	b.n	8005e78 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e74:	2309      	movs	r3, #9
 8005e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	00d8acbf 	.word	0x00d8acbf
 8005ea8:	00e4e1c0 	.word	0x00e4e1c0
 8005eac:	00f42400 	.word	0x00f42400
 8005eb0:	01067380 	.word	0x01067380
 8005eb4:	011a499f 	.word	0x011a499f
 8005eb8:	01312cff 	.word	0x01312cff
 8005ebc:	014ca43f 	.word	0x014ca43f
 8005ec0:	016e3600 	.word	0x016e3600
 8005ec4:	01a6ab1f 	.word	0x01a6ab1f
 8005ec8:	01e84800 	.word	0x01e84800

08005ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f023 0201 	bic.w	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d115      	bne.n	8005f5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f3a:	200a      	movs	r0, #10
 8005f3c:	f7fc fa16 	bl	800236c <HAL_Delay>
      ms += 10U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	330a      	adds	r3, #10
 8005f44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 f874 	bl	8007034 <USB_GetMode>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d01e      	beq.n	8005f90 <USB_SetCurrentMode+0x84>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2bc7      	cmp	r3, #199	; 0xc7
 8005f56:	d9f0      	bls.n	8005f3a <USB_SetCurrentMode+0x2e>
 8005f58:	e01a      	b.n	8005f90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d115      	bne.n	8005f8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f6c:	200a      	movs	r0, #10
 8005f6e:	f7fc f9fd 	bl	800236c <HAL_Delay>
      ms += 10U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	330a      	adds	r3, #10
 8005f76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f85b 	bl	8007034 <USB_GetMode>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <USB_SetCurrentMode+0x84>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2bc7      	cmp	r3, #199	; 0xc7
 8005f88:	d9f0      	bls.n	8005f6c <USB_SetCurrentMode+0x60>
 8005f8a:	e001      	b.n	8005f90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e005      	b.n	8005f9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2bc8      	cmp	r3, #200	; 0xc8
 8005f94:	d101      	bne.n	8005f9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	e009      	b.n	8005fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3340      	adds	r3, #64	; 0x40
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b0e      	cmp	r3, #14
 8005fdc:	d9f2      	bls.n	8005fc4 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f953 	bl	80062a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ffe:	2110      	movs	r1, #16
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f8f1 	bl	80061e8 <USB_FlushTxFifo>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f91a 	bl	800624a <USB_FlushRxFifo>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	461a      	mov	r2, r3
 8006028:	2300      	movs	r3, #0
 800602a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	461a      	mov	r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	461a      	mov	r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006044:	2300      	movs	r3, #0
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	e043      	b.n	80060d2 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800605c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006060:	d118      	bne.n	8006094 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	461a      	mov	r2, r3
 8006076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e013      	b.n	80060a6 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	461a      	mov	r2, r3
 800608c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e008      	b.n	80060a6 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	461a      	mov	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b2:	461a      	mov	r2, r3
 80060b4:	2300      	movs	r3, #0
 80060b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	461a      	mov	r2, r3
 80060c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3301      	adds	r3, #1
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d3b7      	bcc.n	800604a <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	e043      	b.n	8006168 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f6:	d118      	bne.n	800612a <USB_DevInit+0x186>
    {
      if (i == 0U)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	461a      	mov	r2, r3
 800610c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	e013      	b.n	800613c <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	461a      	mov	r2, r3
 8006122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e008      	b.n	800613c <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	461a      	mov	r2, r3
 8006138:	2300      	movs	r3, #0
 800613a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	461a      	mov	r2, r3
 800614a:	2300      	movs	r3, #0
 800614c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	461a      	mov	r2, r3
 800615c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	3301      	adds	r3, #1
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	429a      	cmp	r2, r3
 800616e:	d3b7      	bcc.n	80060e0 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800617e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006182:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006190:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f043 0210 	orr.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <USB_DevInit+0x240>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f043 0208 	orr.w	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d107      	bne.n	80061d2 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ca:	f043 0304 	orr.w	r3, r3, #4
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061de:	b004      	add	sp, #16
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	803c3800 	.word	0x803c3800

080061e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006202:	d901      	bls.n	8006208 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e01b      	b.n	8006240 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	daf2      	bge.n	80061f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	019b      	lsls	r3, r3, #6
 8006218:	f043 0220 	orr.w	r2, r3, #32
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800622c:	d901      	bls.n	8006232 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e006      	b.n	8006240 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b20      	cmp	r3, #32
 800623c:	d0f0      	beq.n	8006220 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006262:	d901      	bls.n	8006268 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e018      	b.n	800629a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	daf2      	bge.n	8006256 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2210      	movs	r2, #16
 8006278:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006286:	d901      	bls.n	800628c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e006      	b.n	800629a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b10      	cmp	r3, #16
 8006296:	d0f0      	beq.n	800627a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c4:	4313      	orrs	r3, r2
 80062c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0306 	and.w	r3, r3, #6
 80062ec:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d002      	beq.n	80062fa <USB_GetDevSpeed+0x26>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d102      	bne.n	8006300 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062fa:	2302      	movs	r3, #2
 80062fc:	75fb      	strb	r3, [r7, #23]
 80062fe:	e001      	b.n	8006304 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006300:	230f      	movs	r3, #15
 8006302:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d13a      	bne.n	80063a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	2101      	movs	r1, #1
 800633e:	fa01 f303 	lsl.w	r3, r1, r3
 8006342:	b29b      	uxth	r3, r3
 8006344:	68f9      	ldr	r1, [r7, #12]
 8006346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800634a:	4313      	orrs	r3, r2
 800634c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d155      	bne.n	8006410 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	791b      	ldrb	r3, [r3, #4]
 800637e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	059b      	lsls	r3, r3, #22
 8006386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006388:	4313      	orrs	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	e036      	b.n	8006410 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	2101      	movs	r1, #1
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11a      	bne.n	8006410 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	791b      	ldrb	r3, [r3, #4]
 80063f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063f6:	430b      	orrs	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d161      	bne.n	80064fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644e:	d11f      	bne.n	8006490 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800646e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	2101      	movs	r1, #1
 80064a2:	fa01 f303 	lsl.w	r3, r1, r3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b0:	4013      	ands	r3, r2
 80064b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	43db      	mvns	r3, r3
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d4:	4013      	ands	r3, r2
 80064d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	0159      	lsls	r1, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	440b      	add	r3, r1
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	4619      	mov	r1, r3
 80064f4:	4b35      	ldr	r3, [pc, #212]	; (80065cc <USB_DeactivateEndpoint+0x1b0>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]
 80064fa:	e060      	b.n	80065be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	d11f      	bne.n	8006554 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006532:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f303 	lsl.w	r3, r1, r3
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	43db      	mvns	r3, r3
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006574:	4013      	ands	r3, r2
 8006576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	2101      	movs	r1, #1
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	041b      	lsls	r3, r3, #16
 8006590:	43db      	mvns	r3, r3
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006598:	4013      	ands	r3, r2
 800659a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	0159      	lsls	r1, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	440b      	add	r3, r1
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	4619      	mov	r1, r3
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <USB_DeactivateEndpoint+0x1b4>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	ec337800 	.word	0xec337800
 80065d0:	eff37800 	.word	0xeff37800

080065d4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	f040 8128 	bne.w	8006842 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d132      	bne.n	8006660 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800661c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800663c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006658:	0cdb      	lsrs	r3, r3, #19
 800665a:	04db      	lsls	r3, r3, #19
 800665c:	6113      	str	r3, [r2, #16]
 800665e:	e092      	b.n	8006786 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667a:	0cdb      	lsrs	r3, r3, #19
 800667c:	04db      	lsls	r3, r3, #19
 800667e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800669e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11a      	bne.n	80066e0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d903      	bls.n	80066be <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066dc:	6113      	str	r3, [r2, #16]
 80066de:	e01b      	b.n	8006718 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6919      	ldr	r1, [r3, #16]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	440b      	add	r3, r1
 80066f8:	1e59      	subs	r1, r3, #1
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006702:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006704:	4b8d      	ldr	r3, [pc, #564]	; (800693c <USB_EPStartXfer+0x368>)
 8006706:	400b      	ands	r3, r1
 8006708:	6939      	ldr	r1, [r7, #16]
 800670a:	0148      	lsls	r0, r1, #5
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	4401      	add	r1, r0
 8006710:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006714:	4313      	orrs	r3, r2
 8006716:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672e:	6939      	ldr	r1, [r7, #16]
 8006730:	0148      	lsls	r0, r1, #5
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	4401      	add	r1, r0
 8006736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800673a:	4313      	orrs	r3, r2
 800673c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d11f      	bne.n	8006786 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006760:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006764:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006784:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	440a      	add	r2, r1
 800679c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067a4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	791b      	ldrb	r3, [r3, #4]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d015      	beq.n	80067da <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8139 	beq.w	8006a2a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	2101      	movs	r1, #1
 80067ca:	fa01 f303 	lsl.w	r3, r1, r3
 80067ce:	6979      	ldr	r1, [r7, #20]
 80067d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d4:	4313      	orrs	r3, r2
 80067d6:	634b      	str	r3, [r1, #52]	; 0x34
 80067d8:	e127      	b.n	8006a2a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d110      	bne.n	800680c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e00f      	b.n	800682c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68d9      	ldr	r1, [r3, #12]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	b29b      	uxth	r3, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9a5 	bl	8006b8a <USB_WritePacket>
 8006840:	e0f3      	b.n	8006a2a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685c:	0cdb      	lsrs	r3, r3, #19
 800685e:	04db      	lsls	r3, r3, #19
 8006860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	440a      	add	r2, r1
 8006878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006880:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006884:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d12f      	bne.n	80068ec <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ba:	6939      	ldr	r1, [r7, #16]
 80068bc:	0148      	lsls	r0, r1, #5
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	4401      	add	r1, r0
 80068c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068e8:	6113      	str	r3, [r2, #16]
 80068ea:	e061      	b.n	80069b0 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d125      	bne.n	8006940 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800690a:	6939      	ldr	r1, [r7, #16]
 800690c:	0148      	lsls	r0, r1, #5
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	4401      	add	r1, r0
 8006912:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006916:	4313      	orrs	r3, r2
 8006918:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	440a      	add	r2, r1
 8006930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006938:	6113      	str	r3, [r2, #16]
 800693a:	e039      	b.n	80069b0 <USB_EPStartXfer+0x3dc>
 800693c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4413      	add	r3, r2
 800694a:	1e5a      	subs	r2, r3, #1
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	89fa      	ldrh	r2, [r7, #14]
 800695c:	fb03 f202 	mul.w	r2, r3, r2
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	89fb      	ldrh	r3, [r7, #14]
 8006974:	04d9      	lsls	r1, r3, #19
 8006976:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <USB_EPStartXfer+0x460>)
 8006978:	400b      	ands	r3, r1
 800697a:	6939      	ldr	r1, [r7, #16]
 800697c:	0148      	lsls	r0, r1, #5
 800697e:	6979      	ldr	r1, [r7, #20]
 8006980:	4401      	add	r1, r0
 8006982:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006986:	4313      	orrs	r3, r2
 8006988:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a0:	6939      	ldr	r1, [r7, #16]
 80069a2:	0148      	lsls	r0, r1, #5
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	4401      	add	r1, r0
 80069a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069ac:	4313      	orrs	r3, r2
 80069ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	791b      	ldrb	r3, [r3, #4]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d128      	bne.n	8006a0a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d110      	bne.n	80069ea <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e00f      	b.n	8006a0a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a08:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	1ff80000 	.word	0x1ff80000

08006a38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d14a      	bne.n	8006aec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a6e:	f040 8086 	bne.w	8006b7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d902      	bls.n	8006ad0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	e056      	b.n	8006b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae8:	d0e7      	beq.n	8006aba <USB_EPStopXfer+0x82>
 8006aea:	e048      	b.n	8006b7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b04:	d13b      	bne.n	8006b7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d902      	bls.n	8006b64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
          break;
 8006b62:	e00c      	b.n	8006b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7c:	d0e7      	beq.n	8006b4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b089      	sub	sp, #36	; 0x24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	4611      	mov	r1, r2
 8006b96:	461a      	mov	r2, r3
 8006b98:	460b      	mov	r3, r1
 8006b9a:	71fb      	strb	r3, [r7, #7]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006ba8:	88bb      	ldrh	r3, [r7, #4]
 8006baa:	3303      	adds	r3, #3
 8006bac:	089b      	lsrs	r3, r3, #2
 8006bae:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	e018      	b.n	8006be8 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	031a      	lsls	r2, r3, #12
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3301      	adds	r3, #1
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d3e2      	bcc.n	8006bb6 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3724      	adds	r7, #36	; 0x24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b08b      	sub	sp, #44	; 0x2c
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	e014      	b.n	8006c52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	3301      	adds	r3, #1
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	3301      	adds	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	3301      	adds	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d3e6      	bcc.n	8006c28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c5a:	8bfb      	ldrh	r3, [r7, #30]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f107 0310 	add.w	r3, r7, #16
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	701a      	strb	r2, [r3, #0]
      i++;
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	3301      	adds	r3, #1
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c92:	8bfb      	ldrh	r3, [r7, #30]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c98:	8bfb      	ldrh	r3, [r7, #30]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1ea      	bne.n	8006c74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	372c      	adds	r7, #44	; 0x2c
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d12c      	bne.n	8006d20 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	db12      	blt.n	8006cfe <USB_EPSetStall+0x54>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00f      	beq.n	8006cfe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cfc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e02b      	b.n	8006d78 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	db12      	blt.n	8006d58 <USB_EPSetStall+0xae>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00f      	beq.n	8006d58 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d56:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d128      	bne.n	8006df2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	791b      	ldrb	r3, [r3, #4]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d003      	beq.n	8006dd0 <USB_EPClearStall+0x4c>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	791b      	ldrb	r3, [r3, #4]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d138      	bne.n	8006e42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	e027      	b.n	8006e42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d003      	beq.n	8006e22 <USB_EPClearStall+0x9e>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	791b      	ldrb	r3, [r3, #4]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d10f      	bne.n	8006e42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec6:	f023 0302 	bic.w	r3, r3, #2
 8006eca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f06:	f043 0302 	orr.w	r3, r3, #2
 8006f0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr

08006f18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	0c1b      	lsrs	r3, r3, #16
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	b29b      	uxth	r3, r3
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fce:	68bb      	ldr	r3, [r7, #8]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	fa22 f303 	lsr.w	r3, r2, r3
 800700a:	01db      	lsls	r3, r3, #7
 800700c:	b2db      	uxtb	r3, r3
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4013      	ands	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007028:	68bb      	ldr	r3, [r7, #8]
}
 800702a:	4618      	mov	r0, r3
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	f003 0301 	and.w	r3, r3, #1
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007084:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
	...

08007094 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	333c      	adds	r3, #60	; 0x3c
 80070a6:	3304      	adds	r3, #4
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <USB_EP0_OutStart+0x8c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d90a      	bls.n	80070ca <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c4:	d101      	bne.n	80070ca <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e024      	b.n	8007114 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d0:	461a      	mov	r2, r3
 80070d2:	2300      	movs	r3, #0
 80070d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f8:	f043 0318 	orr.w	r3, r3, #24
 80070fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007110:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	4f54300a 	.word	0x4f54300a

08007124 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800713c:	d901      	bls.n	8007142 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e01b      	b.n	800717a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	daf2      	bge.n	8007130 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f043 0201 	orr.w	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007166:	d901      	bls.n	800716c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e006      	b.n	800717a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	d0f0      	beq.n	800715a <USB_CoreReset+0x36>

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(uint8_t * ipad, uint8_t * mask, uint8_t * netgw)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af04      	add	r7, sp, #16
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  /* IP addresses initialization */
  IP_ADDRESS[0] = ipad[0];
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	4b92      	ldr	r3, [pc, #584]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007196:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = ipad[1];
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	785a      	ldrb	r2, [r3, #1]
 800719c:	4b90      	ldr	r3, [pc, #576]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800719e:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = ipad[2];
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	789a      	ldrb	r2, [r3, #2]
 80071a4:	4b8e      	ldr	r3, [pc, #568]	; (80073e0 <MX_LWIP_Init+0x25c>)
 80071a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = ipad[3];
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	78da      	ldrb	r2, [r3, #3]
 80071ac:	4b8c      	ldr	r3, [pc, #560]	; (80073e0 <MX_LWIP_Init+0x25c>)
 80071ae:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = mask[0];
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	4b8b      	ldr	r3, [pc, #556]	; (80073e4 <MX_LWIP_Init+0x260>)
 80071b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = mask[1];
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	785a      	ldrb	r2, [r3, #1]
 80071bc:	4b89      	ldr	r3, [pc, #548]	; (80073e4 <MX_LWIP_Init+0x260>)
 80071be:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = mask[2];
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	789a      	ldrb	r2, [r3, #2]
 80071c4:	4b87      	ldr	r3, [pc, #540]	; (80073e4 <MX_LWIP_Init+0x260>)
 80071c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = mask[3];
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	78da      	ldrb	r2, [r3, #3]
 80071cc:	4b85      	ldr	r3, [pc, #532]	; (80073e4 <MX_LWIP_Init+0x260>)
 80071ce:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = netgw[0];
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	4b84      	ldr	r3, [pc, #528]	; (80073e8 <MX_LWIP_Init+0x264>)
 80071d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = netgw[1];
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	785a      	ldrb	r2, [r3, #1]
 80071dc:	4b82      	ldr	r3, [pc, #520]	; (80073e8 <MX_LWIP_Init+0x264>)
 80071de:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = netgw[2];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	789a      	ldrb	r2, [r3, #2]
 80071e4:	4b80      	ldr	r3, [pc, #512]	; (80073e8 <MX_LWIP_Init+0x264>)
 80071e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3]= netgw[3];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	78da      	ldrb	r2, [r3, #3]
 80071ec:	4b7e      	ldr	r3, [pc, #504]	; (80073e8 <MX_LWIP_Init+0x264>)
 80071ee:	70da      	strb	r2, [r3, #3]
/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */


  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80071f0:	f000 ff5d 	bl	80080ae <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80071f4:	4b7a      	ldr	r3, [pc, #488]	; (80073e0 <MX_LWIP_Init+0x25c>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	061a      	lsls	r2, r3, #24
 80071fa:	4b79      	ldr	r3, [pc, #484]	; (80073e0 <MX_LWIP_Init+0x25c>)
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	431a      	orrs	r2, r3
 8007202:	4b77      	ldr	r3, [pc, #476]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007204:	789b      	ldrb	r3, [r3, #2]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	4313      	orrs	r3, r2
 800720a:	4a75      	ldr	r2, [pc, #468]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800720c:	78d2      	ldrb	r2, [r2, #3]
 800720e:	4313      	orrs	r3, r2
 8007210:	061a      	lsls	r2, r3, #24
 8007212:	4b73      	ldr	r3, [pc, #460]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	0619      	lsls	r1, r3, #24
 8007218:	4b71      	ldr	r3, [pc, #452]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	041b      	lsls	r3, r3, #16
 800721e:	4319      	orrs	r1, r3
 8007220:	4b6f      	ldr	r3, [pc, #444]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	430b      	orrs	r3, r1
 8007228:	496d      	ldr	r1, [pc, #436]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800722a:	78c9      	ldrb	r1, [r1, #3]
 800722c:	430b      	orrs	r3, r1
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007234:	431a      	orrs	r2, r3
 8007236:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	0619      	lsls	r1, r3, #24
 800723c:	4b68      	ldr	r3, [pc, #416]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	4319      	orrs	r1, r3
 8007244:	4b66      	ldr	r3, [pc, #408]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007246:	789b      	ldrb	r3, [r3, #2]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	430b      	orrs	r3, r1
 800724c:	4964      	ldr	r1, [pc, #400]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800724e:	78c9      	ldrb	r1, [r1, #3]
 8007250:	430b      	orrs	r3, r1
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007258:	431a      	orrs	r2, r3
 800725a:	4b61      	ldr	r3, [pc, #388]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	0619      	lsls	r1, r3, #24
 8007260:	4b5f      	ldr	r3, [pc, #380]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	4319      	orrs	r1, r3
 8007268:	4b5d      	ldr	r3, [pc, #372]	; (80073e0 <MX_LWIP_Init+0x25c>)
 800726a:	789b      	ldrb	r3, [r3, #2]
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	430b      	orrs	r3, r1
 8007270:	495b      	ldr	r1, [pc, #364]	; (80073e0 <MX_LWIP_Init+0x25c>)
 8007272:	78c9      	ldrb	r1, [r1, #3]
 8007274:	430b      	orrs	r3, r1
 8007276:	0e1b      	lsrs	r3, r3, #24
 8007278:	4313      	orrs	r3, r2
 800727a:	4a5c      	ldr	r2, [pc, #368]	; (80073ec <MX_LWIP_Init+0x268>)
 800727c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800727e:	4b59      	ldr	r3, [pc, #356]	; (80073e4 <MX_LWIP_Init+0x260>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	061a      	lsls	r2, r3, #24
 8007284:	4b57      	ldr	r3, [pc, #348]	; (80073e4 <MX_LWIP_Init+0x260>)
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	431a      	orrs	r2, r3
 800728c:	4b55      	ldr	r3, [pc, #340]	; (80073e4 <MX_LWIP_Init+0x260>)
 800728e:	789b      	ldrb	r3, [r3, #2]
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	4313      	orrs	r3, r2
 8007294:	4a53      	ldr	r2, [pc, #332]	; (80073e4 <MX_LWIP_Init+0x260>)
 8007296:	78d2      	ldrb	r2, [r2, #3]
 8007298:	4313      	orrs	r3, r2
 800729a:	061a      	lsls	r2, r3, #24
 800729c:	4b51      	ldr	r3, [pc, #324]	; (80073e4 <MX_LWIP_Init+0x260>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	0619      	lsls	r1, r3, #24
 80072a2:	4b50      	ldr	r3, [pc, #320]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	4319      	orrs	r1, r3
 80072aa:	4b4e      	ldr	r3, [pc, #312]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072ac:	789b      	ldrb	r3, [r3, #2]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	430b      	orrs	r3, r1
 80072b2:	494c      	ldr	r1, [pc, #304]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072b4:	78c9      	ldrb	r1, [r1, #3]
 80072b6:	430b      	orrs	r3, r1
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072be:	431a      	orrs	r2, r3
 80072c0:	4b48      	ldr	r3, [pc, #288]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	0619      	lsls	r1, r3, #24
 80072c6:	4b47      	ldr	r3, [pc, #284]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	4319      	orrs	r1, r3
 80072ce:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072d0:	789b      	ldrb	r3, [r3, #2]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	430b      	orrs	r3, r1
 80072d6:	4943      	ldr	r1, [pc, #268]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072d8:	78c9      	ldrb	r1, [r1, #3]
 80072da:	430b      	orrs	r3, r1
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072e2:	431a      	orrs	r2, r3
 80072e4:	4b3f      	ldr	r3, [pc, #252]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	0619      	lsls	r1, r3, #24
 80072ea:	4b3e      	ldr	r3, [pc, #248]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	4319      	orrs	r1, r3
 80072f2:	4b3c      	ldr	r3, [pc, #240]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072f4:	789b      	ldrb	r3, [r3, #2]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	430b      	orrs	r3, r1
 80072fa:	493a      	ldr	r1, [pc, #232]	; (80073e4 <MX_LWIP_Init+0x260>)
 80072fc:	78c9      	ldrb	r1, [r1, #3]
 80072fe:	430b      	orrs	r3, r1
 8007300:	0e1b      	lsrs	r3, r3, #24
 8007302:	4313      	orrs	r3, r2
 8007304:	4a3a      	ldr	r2, [pc, #232]	; (80073f0 <MX_LWIP_Init+0x26c>)
 8007306:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007308:	4b37      	ldr	r3, [pc, #220]	; (80073e8 <MX_LWIP_Init+0x264>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	061a      	lsls	r2, r3, #24
 800730e:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	431a      	orrs	r2, r3
 8007316:	4b34      	ldr	r3, [pc, #208]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007318:	789b      	ldrb	r3, [r3, #2]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	4313      	orrs	r3, r2
 800731e:	4a32      	ldr	r2, [pc, #200]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007320:	78d2      	ldrb	r2, [r2, #3]
 8007322:	4313      	orrs	r3, r2
 8007324:	061a      	lsls	r2, r3, #24
 8007326:	4b30      	ldr	r3, [pc, #192]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	0619      	lsls	r1, r3, #24
 800732c:	4b2e      	ldr	r3, [pc, #184]	; (80073e8 <MX_LWIP_Init+0x264>)
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	4319      	orrs	r1, r3
 8007334:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007336:	789b      	ldrb	r3, [r3, #2]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	430b      	orrs	r3, r1
 800733c:	492a      	ldr	r1, [pc, #168]	; (80073e8 <MX_LWIP_Init+0x264>)
 800733e:	78c9      	ldrb	r1, [r1, #3]
 8007340:	430b      	orrs	r3, r1
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007348:	431a      	orrs	r2, r3
 800734a:	4b27      	ldr	r3, [pc, #156]	; (80073e8 <MX_LWIP_Init+0x264>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	0619      	lsls	r1, r3, #24
 8007350:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	4319      	orrs	r1, r3
 8007358:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <MX_LWIP_Init+0x264>)
 800735a:	789b      	ldrb	r3, [r3, #2]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	430b      	orrs	r3, r1
 8007360:	4921      	ldr	r1, [pc, #132]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007362:	78c9      	ldrb	r1, [r1, #3]
 8007364:	430b      	orrs	r3, r1
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800736c:	431a      	orrs	r2, r3
 800736e:	4b1e      	ldr	r3, [pc, #120]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	0619      	lsls	r1, r3, #24
 8007374:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	4319      	orrs	r1, r3
 800737c:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <MX_LWIP_Init+0x264>)
 800737e:	789b      	ldrb	r3, [r3, #2]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	430b      	orrs	r3, r1
 8007384:	4918      	ldr	r1, [pc, #96]	; (80073e8 <MX_LWIP_Init+0x264>)
 8007386:	78c9      	ldrb	r1, [r1, #3]
 8007388:	430b      	orrs	r3, r1
 800738a:	0e1b      	lsrs	r3, r3, #24
 800738c:	4313      	orrs	r3, r2
 800738e:	4a19      	ldr	r2, [pc, #100]	; (80073f4 <MX_LWIP_Init+0x270>)
 8007390:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007392:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <MX_LWIP_Init+0x274>)
 8007394:	9302      	str	r3, [sp, #8]
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <MX_LWIP_Init+0x278>)
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	2300      	movs	r3, #0
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <MX_LWIP_Init+0x270>)
 80073a0:	4a13      	ldr	r2, [pc, #76]	; (80073f0 <MX_LWIP_Init+0x26c>)
 80073a2:	4912      	ldr	r1, [pc, #72]	; (80073ec <MX_LWIP_Init+0x268>)
 80073a4:	4816      	ldr	r0, [pc, #88]	; (8007400 <MX_LWIP_Init+0x27c>)
 80073a6:	f001 fa83 	bl	80088b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80073aa:	4815      	ldr	r0, [pc, #84]	; (8007400 <MX_LWIP_Init+0x27c>)
 80073ac:	f001 fb62 	bl	8008a74 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80073b0:	4b13      	ldr	r3, [pc, #76]	; (8007400 <MX_LWIP_Init+0x27c>)
 80073b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <MX_LWIP_Init+0x246>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80073c2:	480f      	ldr	r0, [pc, #60]	; (8007400 <MX_LWIP_Init+0x27c>)
 80073c4:	f001 fb64 	bl	8008a90 <netif_set_up>
 80073c8:	e002      	b.n	80073d0 <MX_LWIP_Init+0x24c>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80073ca:	480d      	ldr	r0, [pc, #52]	; (8007400 <MX_LWIP_Init+0x27c>)
 80073cc:	f001 fba4 	bl	8008b18 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80073d0:	490c      	ldr	r1, [pc, #48]	; (8007404 <MX_LWIP_Init+0x280>)
 80073d2:	480b      	ldr	r0, [pc, #44]	; (8007400 <MX_LWIP_Init+0x27c>)
 80073d4:	f001 fbc2 	bl	8008b5c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000ac0 	.word	0x20000ac0
 80073e4:	20000ac4 	.word	0x20000ac4
 80073e8:	20000ac8 	.word	0x20000ac8
 80073ec:	20000ab4 	.word	0x20000ab4
 80073f0:	20000ab8 	.word	0x20000ab8
 80073f4:	20000abc 	.word	0x20000abc
 80073f8:	08011955 	.word	0x08011955
 80073fc:	080079b1 	.word	0x080079b1
 8007400:	20000a80 	.word	0x20000a80
 8007404:	08007a1d 	.word	0x08007a1d

08007408 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800740c:	4803      	ldr	r0, [pc, #12]	; (800741c <MX_LWIP_Process+0x14>)
 800740e:	f000 faaf 	bl	8007970 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007412:	f007 fded 	bl	800eff0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20000a80 	.word	0x20000a80

08007420 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08e      	sub	sp, #56	; 0x38
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a54      	ldr	r2, [pc, #336]	; (800758c <HAL_ETH_MspInit+0x16c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	f040 80a0 	bne.w	8007582 <HAL_ETH_MspInit+0x162>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007442:	4b53      	ldr	r3, [pc, #332]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	4a52      	ldr	r2, [pc, #328]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800744c:	6153      	str	r3, [r2, #20]
 800744e:	4b50      	ldr	r3, [pc, #320]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007456:	623b      	str	r3, [r7, #32]
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	4b4d      	ldr	r3, [pc, #308]	; (8007590 <HAL_ETH_MspInit+0x170>)
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	4a4c      	ldr	r2, [pc, #304]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007464:	6153      	str	r3, [r2, #20]
 8007466:	4b4a      	ldr	r3, [pc, #296]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4b47      	ldr	r3, [pc, #284]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	4a46      	ldr	r2, [pc, #280]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747c:	6153      	str	r3, [r2, #20]
 800747e:	4b44      	ldr	r3, [pc, #272]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800748a:	4b41      	ldr	r3, [pc, #260]	; (8007590 <HAL_ETH_MspInit+0x170>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	4a40      	ldr	r2, [pc, #256]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007490:	f043 0310 	orr.w	r3, r3, #16
 8007494:	6193      	str	r3, [r2, #24]
 8007496:	4b3e      	ldr	r3, [pc, #248]	; (8007590 <HAL_ETH_MspInit+0x170>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a2:	4b3b      	ldr	r3, [pc, #236]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	4a3a      	ldr	r2, [pc, #232]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074a8:	f043 0304 	orr.w	r3, r3, #4
 80074ac:	6193      	str	r3, [r2, #24]
 80074ae:	4b38      	ldr	r3, [pc, #224]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ba:	4b35      	ldr	r3, [pc, #212]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	4a34      	ldr	r2, [pc, #208]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074c0:	f043 0308 	orr.w	r3, r3, #8
 80074c4:	6193      	str	r3, [r2, #24]
 80074c6:	4b32      	ldr	r3, [pc, #200]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80074d2:	4b2f      	ldr	r3, [pc, #188]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	4a2e      	ldr	r2, [pc, #184]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074d8:	f043 0320 	orr.w	r3, r3, #32
 80074dc:	6193      	str	r3, [r2, #24]
 80074de:	4b2c      	ldr	r3, [pc, #176]	; (8007590 <HAL_ETH_MspInit+0x170>)
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80074ea:	2302      	movs	r3, #2
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ee:	2302      	movs	r3, #2
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074f2:	2303      	movs	r3, #3
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fa:	4619      	mov	r1, r3
 80074fc:	4825      	ldr	r0, [pc, #148]	; (8007594 <HAL_ETH_MspInit+0x174>)
 80074fe:	f7fc fab3 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007502:	2302      	movs	r3, #2
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007506:	2300      	movs	r3, #0
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750a:	2300      	movs	r3, #0
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800750e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007512:	4619      	mov	r1, r3
 8007514:	4820      	ldr	r0, [pc, #128]	; (8007598 <HAL_ETH_MspInit+0x178>)
 8007516:	f7fc faa7 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800751a:	2304      	movs	r3, #4
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751e:	2302      	movs	r3, #2
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007522:	2303      	movs	r3, #3
 8007524:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752a:	4619      	mov	r1, r3
 800752c:	481a      	ldr	r0, [pc, #104]	; (8007598 <HAL_ETH_MspInit+0x178>)
 800752e:	f7fc fa9b 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007532:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007538:	2302      	movs	r3, #2
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800753c:	2303      	movs	r3, #3
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007544:	4619      	mov	r1, r3
 8007546:	4815      	ldr	r0, [pc, #84]	; (800759c <HAL_ETH_MspInit+0x17c>)
 8007548:	f7fc fa8e 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800754c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007552:	2300      	movs	r3, #0
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007556:	2300      	movs	r3, #0
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800755a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755e:	4619      	mov	r1, r3
 8007560:	480f      	ldr	r0, [pc, #60]	; (80075a0 <HAL_ETH_MspInit+0x180>)
 8007562:	f7fc fa81 	bl	8003a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 8007566:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <HAL_ETH_MspInit+0x184>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
 800756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
 800757c:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <HAL_ETH_MspInit+0x184>)
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007582:	bf00      	nop
 8007584:	3738      	adds	r7, #56	; 0x38
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40028000 	.word	0x40028000
 8007590:	40021000 	.word	0x40021000
 8007594:	40011000 	.word	0x40011000
 8007598:	40010800 	.word	0x40010800
 800759c:	40010c00 	.word	0x40010c00
 80075a0:	40011400 	.word	0x40011400
 80075a4:	40010000 	.word	0x40010000

080075a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80075b0:	4b41      	ldr	r3, [pc, #260]	; (80076b8 <low_level_init+0x110>)
 80075b2:	4a42      	ldr	r2, [pc, #264]	; (80076bc <low_level_init+0x114>)
 80075b4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80075b6:	4b40      	ldr	r3, [pc, #256]	; (80076b8 <low_level_init+0x110>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80075bc:	4b3e      	ldr	r3, [pc, #248]	; (80076b8 <low_level_init+0x110>)
 80075be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80075c2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80075c4:	4b3c      	ldr	r3, [pc, #240]	; (80076b8 <low_level_init+0x110>)
 80075c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ca:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = KSZ8721bl_PHY_ADDRESS;
 80075cc:	4b3a      	ldr	r3, [pc, #232]	; (80076b8 <low_level_init+0x110>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0xAA;
 80075d2:	23aa      	movs	r3, #170	; 0xaa
 80075d4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xEE;
 80075d6:	23ee      	movs	r3, #238	; 0xee
 80075d8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x25;
 80075da:	2325      	movs	r3, #37	; 0x25
 80075dc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x04;
 80075de:	2304      	movs	r3, #4
 80075e0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x20;
 80075e2:	2320      	movs	r3, #32
 80075e4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x03;
 80075e6:	2303      	movs	r3, #3
 80075e8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80075ea:	4a33      	ldr	r2, [pc, #204]	; (80076b8 <low_level_init+0x110>)
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80075f2:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <low_level_init+0x110>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80075f8:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <low_level_init+0x110>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80075fe:	4b2e      	ldr	r3, [pc, #184]	; (80076b8 <low_level_init+0x110>)
 8007600:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007604:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007606:	482c      	ldr	r0, [pc, #176]	; (80076b8 <low_level_init+0x110>)
 8007608:	f7fa ffe2 	bl	80025d0 <HAL_ETH_Init>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d108      	bne.n	8007628 <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800761c:	f043 0304 	orr.w	r3, r3, #4
 8007620:	b2da      	uxtb	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007628:	2304      	movs	r3, #4
 800762a:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <low_level_init+0x118>)
 800762c:	4925      	ldr	r1, [pc, #148]	; (80076c4 <low_level_init+0x11c>)
 800762e:	4822      	ldr	r0, [pc, #136]	; (80076b8 <low_level_init+0x110>)
 8007630:	f7fb f93a 	bl	80028a8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007634:	2308      	movs	r3, #8
 8007636:	4a24      	ldr	r2, [pc, #144]	; (80076c8 <low_level_init+0x120>)
 8007638:	4924      	ldr	r1, [pc, #144]	; (80076cc <low_level_init+0x124>)
 800763a:	481f      	ldr	r0, [pc, #124]	; (80076b8 <low_level_init+0x110>)
 800763c:	f7fb f99b 	bl	8002976 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2206      	movs	r2, #6
 8007644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <low_level_init+0x110>)
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <low_level_init+0x110>)
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	785a      	ldrb	r2, [r3, #1]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <low_level_init+0x110>)
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	789a      	ldrb	r2, [r3, #2]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800766c:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <low_level_init+0x110>)
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	78da      	ldrb	r2, [r3, #3]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <low_level_init+0x110>)
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	791a      	ldrb	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <low_level_init+0x110>)
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	795a      	ldrb	r2, [r3, #5]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007696:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800769e:	f043 030a 	orr.w	r3, r3, #10
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80076aa:	4803      	ldr	r0, [pc, #12]	; (80076b8 <low_level_init+0x110>)
 80076ac:	f7fb fc07 	bl	8002ebe <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	200052fc 	.word	0x200052fc
 80076bc:	40028000 	.word	0x40028000
 80076c0:	20003b2c 	.word	0x20003b2c
 80076c4:	20000b4c 	.word	0x20000b4c
 80076c8:	20000b8c 	.word	0x20000b8c
 80076cc:	20000acc 	.word	0x20000acc

080076d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80076da:	4b4b      	ldr	r3, [pc, #300]	; (8007808 <low_level_output+0x138>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80076f2:	4b45      	ldr	r3, [pc, #276]	; (8007808 <low_level_output+0x138>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	623b      	str	r3, [r7, #32]
 8007700:	e05a      	b.n	80077b8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	da03      	bge.n	8007712 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800770a:	23f8      	movs	r3, #248	; 0xf8
 800770c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007710:	e05c      	b.n	80077cc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	895b      	ldrh	r3, [r3, #10]
 8007716:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800771c:	e02f      	b.n	800777e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	18d0      	adds	r0, r2, r3
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	18d1      	adds	r1, r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007732:	3304      	adds	r3, #4
 8007734:	461a      	mov	r2, r3
 8007736:	f00b ffd1 	bl	80136dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	da03      	bge.n	8007750 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007748:	23f8      	movs	r3, #248	; 0xf8
 800774a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800774e:	e03d      	b.n	80077cc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007760:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800776c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007778:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4413      	add	r3, r2
 8007784:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007788:	4293      	cmp	r3, r2
 800778a:	d8c8      	bhi.n	800771e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	18d0      	adds	r0, r2, r3
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4413      	add	r3, r2
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4619      	mov	r1, r3
 800779e:	f00b ff9d 	bl	80136dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	623b      	str	r3, [r7, #32]
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1a1      	bne.n	8007702 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80077be:	6979      	ldr	r1, [r7, #20]
 80077c0:	4811      	ldr	r0, [pc, #68]	; (8007808 <low_level_output+0x138>)
 80077c2:	f7fb f943 	bl	8002a4c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <low_level_output+0x138>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80077de:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <low_level_output+0x138>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e6:	461a      	mov	r2, r3
 80077e8:	2320      	movs	r3, #32
 80077ea:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <low_level_output+0x138>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f4:	461a      	mov	r2, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80077fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	; 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200052fc 	.word	0x200052fc

0800780c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800782c:	2300      	movs	r3, #0
 800782e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007830:	484e      	ldr	r0, [pc, #312]	; (800796c <low_level_input+0x160>)
 8007832:	f7fb f9f3 	bl	8002c1c <HAL_ETH_GetReceivedFrame>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <low_level_input+0x34>

    return NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	e090      	b.n	8007962 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007840:	4b4a      	ldr	r3, [pc, #296]	; (800796c <low_level_input+0x160>)
 8007842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007844:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007846:	4b49      	ldr	r3, [pc, #292]	; (800796c <low_level_input+0x160>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800784c:	89fb      	ldrh	r3, [r7, #14]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d006      	beq.n	8007860 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	2203      	movs	r2, #3
 8007856:	4619      	mov	r1, r3
 8007858:	2004      	movs	r0, #4
 800785a:	f001 f9bf 	bl	8008bdc <pbuf_alloc>
 800785e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d04b      	beq.n	80078fe <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007866:	4b41      	ldr	r3, [pc, #260]	; (800796c <low_level_input+0x160>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
 8007874:	e040      	b.n	80078f8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	895b      	ldrh	r3, [r3, #10]
 800787a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007880:	e021      	b.n	80078c6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	18d0      	adds	r0, r2, r3
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	18d1      	adds	r1, r2, r3
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007896:	3304      	adds	r3, #4
 8007898:	461a      	mov	r2, r3
 800789a:	f00b ff1f 	bl	80136dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80078b4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80078c0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d8d6      	bhi.n	8007882 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	18d0      	adds	r0, r2, r3
 80078dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f00b fef9 	bl	80136dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1bb      	bne.n	8007876 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80078fe:	4b1b      	ldr	r3, [pc, #108]	; (800796c <low_level_input+0x160>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	e00b      	b.n	8007922 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3301      	adds	r3, #1
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <low_level_input+0x160>)
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d3ee      	bcc.n	800790a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <low_level_input+0x160>)
 800792e:	2200      	movs	r2, #0
 8007930:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007932:	4b0e      	ldr	r3, [pc, #56]	; (800796c <low_level_input+0x160>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007944:	4b09      	ldr	r3, [pc, #36]	; (800796c <low_level_input+0x160>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794c:	461a      	mov	r2, r3
 800794e:	2380      	movs	r3, #128	; 0x80
 8007950:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007952:	4b06      	ldr	r3, [pc, #24]	; (800796c <low_level_input+0x160>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795a:	461a      	mov	r2, r3
 800795c:	2300      	movs	r3, #0
 800795e:	6093      	str	r3, [r2, #8]
  }
  return p;
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007962:	4618      	mov	r0, r3
 8007964:	3730      	adds	r7, #48	; 0x30
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	200052fc 	.word	0x200052fc

08007970 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ff47 	bl	800780c <low_level_input>
 800797e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	4798      	blx	r3
 8007990:	4603      	mov	r3, r0
 8007992:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007994:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 fc95 	bl	80092cc <pbuf_free>
    p = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	e000      	b.n	80079aa <ethernetif_input+0x3a>
  if (p == NULL) return;
 80079a8:	bf00      	nop
  }
}
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <ethernetif_init+0x1c>
 80079be:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <ethernetif_init+0x48>)
 80079c0:	f44f 7202 	mov.w	r2, #520	; 0x208
 80079c4:	490d      	ldr	r1, [pc, #52]	; (80079fc <ethernetif_init+0x4c>)
 80079c6:	480e      	ldr	r0, [pc, #56]	; (8007a00 <ethernetif_init+0x50>)
 80079c8:	f00b ff7a 	bl	80138c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2273      	movs	r2, #115	; 0x73
 80079d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2274      	movs	r2, #116	; 0x74
 80079d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <ethernetif_init+0x54>)
 80079e0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a08      	ldr	r2, [pc, #32]	; (8007a08 <ethernetif_init+0x58>)
 80079e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fddd 	bl	80075a8 <low_level_init>

  return ERR_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	0801482c 	.word	0x0801482c
 80079fc:	08014848 	.word	0x08014848
 8007a00:	08014858 	.word	0x08014858
 8007a04:	0800ff35 	.word	0x0800ff35
 8007a08:	080076d1 	.word	0x080076d1

08007a0c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007a10:	f7fa fca2 	bl	8002358 <HAL_GetTick>
 8007a14:	4603      	mov	r3, r0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a32:	089b      	lsrs	r3, r3, #2
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d05d      	beq.n	8007afa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007a3e:	4b34      	ldr	r3, [pc, #208]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d03f      	beq.n	8007ac6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4830      	ldr	r0, [pc, #192]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007a4e:	f7fb f9d0 	bl	8002df2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007a52:	f7fa fc81 	bl	8002358 <HAL_GetTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a5a:	f107 0308 	add.w	r3, r7, #8
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2101      	movs	r1, #1
 8007a62:	482b      	ldr	r0, [pc, #172]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007a64:	f7fb f95d 	bl	8002d22 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007a68:	f7fa fc76 	bl	8002358 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a76:	d828      	bhi.n	8007aca <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0eb      	beq.n	8007a5a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	461a      	mov	r2, r3
 8007a88:	2110      	movs	r1, #16
 8007a8a:	4821      	ldr	r0, [pc, #132]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007a8c:	f7fb f949 	bl	8002d22 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a9a:	4b1d      	ldr	r3, [pc, #116]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	e002      	b.n	8007aaa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007ab4:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	609a      	str	r2, [r3, #8]
 8007aba:	e016      	b.n	8007aea <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007abc:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	e011      	b.n	8007aea <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <ethernetif_update_config+0xb0>
          goto error;
 8007aca:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007acc:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	08db      	lsrs	r3, r3, #3
 8007ad2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007adc:	4313      	orrs	r3, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	480a      	ldr	r0, [pc, #40]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007ae6:	f7fb f984 	bl	8002df2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007aea:	2100      	movs	r1, #0
 8007aec:	4808      	ldr	r0, [pc, #32]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007aee:	f7fb fa45 	bl	8002f7c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007af2:	4807      	ldr	r0, [pc, #28]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007af4:	f7fb f9e3 	bl	8002ebe <HAL_ETH_Start>
 8007af8:	e002      	b.n	8007b00 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <ethernetif_update_config+0xf4>)
 8007afc:	f7fb fa0e 	bl	8002f1c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f807 	bl	8007b14 <ethernetif_notify_conn_changed>
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200052fc 	.word	0x200052fc

08007b14 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	ba5b      	rev16	r3, r3
 8007b34:	b29b      	uxth	r3, r3
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	061a      	lsls	r2, r3, #24
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	0a1b      	lsrs	r3, r3, #8
 8007b5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	4313      	orrs	r3, r2
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr

08007b70 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8007b80:	f000 fa80 	bl	8008084 <dns_check_entries>
}
 8007b84:	bf00      	nop
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b090      	sub	sp, #64	; 0x40
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
 8007b92:	79fa      	ldrb	r2, [r7, #7]
 8007b94:	4613      	mov	r3, r2
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	4413      	add	r3, r2
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	4a64      	ldr	r2, [pc, #400]	; (8007d30 <dns_send+0x1a8>)
 8007b9e:	4413      	add	r3, r2
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	7adb      	ldrb	r3, [r3, #11]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d906      	bls.n	8007bb8 <dns_send+0x30>
 8007baa:	4b62      	ldr	r3, [pc, #392]	; (8007d34 <dns_send+0x1ac>)
 8007bac:	f240 22ed 	movw	r2, #749	; 0x2ed
 8007bb0:	4961      	ldr	r1, [pc, #388]	; (8007d38 <dns_send+0x1b0>)
 8007bb2:	4862      	ldr	r0, [pc, #392]	; (8007d3c <dns_send+0x1b4>)
 8007bb4:	f00b fe84 	bl	80138c0 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	7adb      	ldrb	r3, [r3, #11]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4b60      	ldr	r3, [pc, #384]	; (8007d40 <dns_send+0x1b8>)
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <dns_send+0x54>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f8bb 	bl	8007d48 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e0a4      	b.n	8007d26 <dns_send+0x19e>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	3310      	adds	r3, #16
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7f8 fb1f 	bl	8000224 <strlen>
 8007be6:	4603      	mov	r3, r0
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3312      	adds	r3, #18
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f000 fff2 	bl	8008bdc <pbuf_alloc>
 8007bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 808d 	beq.w	8007d1c <dns_send+0x194>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8007c02:	f107 0310 	add.w	r3, r7, #16
 8007c06:	220c      	movs	r2, #12
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f00b fd74 	bl	80136f8 <memset>
    hdr.id = lwip_htons(entry->txid);
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	891b      	ldrh	r3, [r3, #8]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ff86 	bl	8007b26 <lwip_htons>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8007c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c26:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8007c28:	f107 0310 	add.w	r3, r7, #16
 8007c2c:	220c      	movs	r2, #12
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c32:	f001 fdff 	bl	8009834 <pbuf_take>
    hostname = entry->name;
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	3310      	adds	r3, #16
 8007c3a:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8007c42:	230c      	movs	r3, #12
 8007c44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	3301      	adds	r3, #1
 8007c4a:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c56:	e007      	b.n	8007c68 <dns_send+0xe0>
        ++n;
 8007c58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	3301      	adds	r3, #1
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c6e:	d003      	beq.n	8007c78 <dns_send+0xf0>
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1ef      	bne.n	8007c58 <dns_send+0xd0>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
      pbuf_put_at(p, query_idx, n);
 8007c80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007c86:	4619      	mov	r1, r3
 8007c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c8a:	f001 feb7 	bl	80099fc <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 8007c8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007c90:	3301      	adds	r3, #1
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9a:	f001 fe5d 	bl	8009958 <pbuf_take_at>
      query_idx += n + 1;
 8007c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ca6:	4413      	add	r3, r2
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3301      	adds	r3, #1
 8007cac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1c7      	bne.n	8007c46 <dns_send+0xbe>
    pbuf_put_at(p, query_idx, 0);
 8007cb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cbe:	f001 fe9d 	bl	80099fc <pbuf_put_at>
    query_idx++;
 8007cc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8007cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ccc:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8007cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd2:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8007cd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007cd6:	f107 010c 	add.w	r1, r7, #12
 8007cda:	2204      	movs	r2, #4
 8007cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cde:	f001 fe3b 	bl	8009958 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	7bdb      	ldrb	r3, [r3, #15]
 8007ce6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8007cea:	2335      	movs	r3, #53	; 0x35
 8007cec:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	7adb      	ldrb	r3, [r3, #11]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <dns_send+0x1b8>)
 8007cf6:	4413      	add	r3, r2
 8007cf8:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8007cfa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007cfe:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <dns_send+0x1bc>)
 8007d00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d0a:	f007 fb21 	bl	800f350 <udp_sendto>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8007d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d16:	f001 fad9 	bl	80092cc <pbuf_free>
 8007d1a:	e002      	b.n	8007d22 <dns_send+0x19a>
  } else {
    err = ERR_MEM;
 8007d1c:	23ff      	movs	r3, #255	; 0xff
 8007d1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8007d22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3740      	adds	r7, #64	; 0x40
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20005354 	.word	0x20005354
 8007d34:	08014880 	.word	0x08014880
 8007d38:	080148b0 	.word	0x080148b0
 8007d3c:	080148c8 	.word	0x080148c8
 8007d40:	200057c4 	.word	0x200057c4
 8007d44:	20005344 	.word	0x20005344

08007d48 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 8007d48:	b590      	push	{r4, r7, lr}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	6039      	str	r1, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	e03d      	b.n	8007dd6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8007d5a:	7bfa      	ldrb	r2, [r7, #15]
 8007d5c:	4957      	ldr	r1, [pc, #348]	; (8007ebc <dns_call_found+0x174>)
 8007d5e:	4613      	mov	r3, r2
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d030      	beq.n	8007dd0 <dns_call_found+0x88>
 8007d6e:	7bfa      	ldrb	r2, [r7, #15]
 8007d70:	4952      	ldr	r1, [pc, #328]	; (8007ebc <dns_call_found+0x174>)
 8007d72:	4613      	mov	r3, r2
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	79fa      	ldrb	r2, [r7, #7]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d124      	bne.n	8007dd0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8007d86:	7bfa      	ldrb	r2, [r7, #15]
 8007d88:	494c      	ldr	r1, [pc, #304]	; (8007ebc <dns_call_found+0x174>)
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	681c      	ldr	r4, [r3, #0]
 8007d96:	79fa      	ldrb	r2, [r7, #7]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	4413      	add	r3, r2
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	3310      	adds	r3, #16
 8007da2:	4a47      	ldr	r2, [pc, #284]	; (8007ec0 <dns_call_found+0x178>)
 8007da4:	1898      	adds	r0, r3, r2
 8007da6:	7bfa      	ldrb	r2, [r7, #15]
 8007da8:	4944      	ldr	r1, [pc, #272]	; (8007ebc <dns_call_found+0x174>)
 8007daa:	4613      	mov	r3, r2
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	3304      	adds	r3, #4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8007dbe:	7bfa      	ldrb	r2, [r7, #15]
 8007dc0:	493e      	ldr	r1, [pc, #248]	; (8007ebc <dns_call_found+0x174>)
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d9be      	bls.n	8007d5a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
 8007de0:	e031      	b.n	8007e46 <dns_call_found+0xfe>
    if (i == idx) {
 8007de2:	7bfa      	ldrb	r2, [r7, #15]
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d029      	beq.n	8007e3e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	4934      	ldr	r1, [pc, #208]	; (8007ec0 <dns_call_found+0x178>)
 8007dee:	4613      	mov	r3, r2
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	4413      	add	r3, r2
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	440b      	add	r3, r1
 8007df8:	330a      	adds	r3, #10
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d11f      	bne.n	8007e40 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8007e00:	7bfa      	ldrb	r2, [r7, #15]
 8007e02:	492f      	ldr	r1, [pc, #188]	; (8007ec0 <dns_call_found+0x178>)
 8007e04:	4613      	mov	r3, r2
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	4413      	add	r3, r2
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	440b      	add	r3, r1
 8007e0e:	330f      	adds	r3, #15
 8007e10:	7819      	ldrb	r1, [r3, #0]
 8007e12:	79fa      	ldrb	r2, [r7, #7]
 8007e14:	482a      	ldr	r0, [pc, #168]	; (8007ec0 <dns_call_found+0x178>)
 8007e16:	4613      	mov	r3, r2
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	4413      	add	r3, r2
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	4403      	add	r3, r0
 8007e20:	330f      	adds	r3, #15
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	4299      	cmp	r1, r3
 8007e26:	d10b      	bne.n	8007e40 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007e28:	79fa      	ldrb	r2, [r7, #7]
 8007e2a:	4925      	ldr	r1, [pc, #148]	; (8007ec0 <dns_call_found+0x178>)
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	4413      	add	r3, r2
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	440b      	add	r3, r1
 8007e36:	330f      	adds	r3, #15
 8007e38:	2204      	movs	r2, #4
 8007e3a:	701a      	strb	r2, [r3, #0]
        break;
 8007e3c:	e006      	b.n	8007e4c <dns_call_found+0x104>
      continue; /* only check other requests */
 8007e3e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	3301      	adds	r3, #1
 8007e44:	73fb      	strb	r3, [r7, #15]
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d9ca      	bls.n	8007de2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8007e4c:	79fa      	ldrb	r2, [r7, #7]
 8007e4e:	491c      	ldr	r1, [pc, #112]	; (8007ec0 <dns_call_found+0x178>)
 8007e50:	4613      	mov	r3, r2
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	4413      	add	r3, r2
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	440b      	add	r3, r1
 8007e5a:	330f      	adds	r3, #15
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d827      	bhi.n	8007eb2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8007e62:	79fa      	ldrb	r2, [r7, #7]
 8007e64:	4916      	ldr	r1, [pc, #88]	; (8007ec0 <dns_call_found+0x178>)
 8007e66:	4613      	mov	r3, r2
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	4413      	add	r3, r2
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	440b      	add	r3, r1
 8007e70:	330f      	adds	r3, #15
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <dns_call_found+0x17c>)
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f007 fbd9 	bl	800f634 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8007e82:	79fa      	ldrb	r2, [r7, #7]
 8007e84:	490e      	ldr	r1, [pc, #56]	; (8007ec0 <dns_call_found+0x178>)
 8007e86:	4613      	mov	r3, r2
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	4413      	add	r3, r2
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	440b      	add	r3, r1
 8007e90:	330f      	adds	r3, #15
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	4619      	mov	r1, r3
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <dns_call_found+0x17c>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007e9e:	79fa      	ldrb	r2, [r7, #7]
 8007ea0:	4907      	ldr	r1, [pc, #28]	; (8007ec0 <dns_call_found+0x178>)
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	440b      	add	r3, r1
 8007eac:	330f      	adds	r3, #15
 8007eae:	2204      	movs	r2, #4
 8007eb0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd90      	pop	{r4, r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20005794 	.word	0x20005794
 8007ec0:	20005354 	.word	0x20005354
 8007ec4:	20005344 	.word	0x20005344

08007ec8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8007ece:	f00b fd0f 	bl	80138f0 <rand>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	71fb      	strb	r3, [r7, #7]
 8007eda:	e01a      	b.n	8007f12 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8007edc:	79fa      	ldrb	r2, [r7, #7]
 8007ede:	4911      	ldr	r1, [pc, #68]	; (8007f24 <dns_create_txid+0x5c>)
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	4413      	add	r3, r2
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	440b      	add	r3, r1
 8007eea:	330a      	adds	r3, #10
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d10c      	bne.n	8007f0c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8007ef2:	79fa      	ldrb	r2, [r7, #7]
 8007ef4:	490b      	ldr	r1, [pc, #44]	; (8007f24 <dns_create_txid+0x5c>)
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	4413      	add	r3, r2
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	440b      	add	r3, r1
 8007f00:	3308      	adds	r3, #8
 8007f02:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8007f04:	88ba      	ldrh	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d100      	bne.n	8007f0c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8007f0a:	e7e0      	b.n	8007ece <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	71fb      	strb	r3, [r7, #7]
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d9e1      	bls.n	8007edc <dns_create_txid+0x14>
    }
  }

  return txid;
 8007f18:	88bb      	ldrh	r3, [r7, #4]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20005354 	.word	0x20005354

08007f28 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8007f32:	79fa      	ldrb	r2, [r7, #7]
 8007f34:	4613      	mov	r3, r2
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	4413      	add	r3, r2
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	4a4b      	ldr	r2, [pc, #300]	; (800806c <dns_check_entry+0x144>)
 8007f3e:	4413      	add	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d906      	bls.n	8007f56 <dns_check_entry+0x2e>
 8007f48:	4b49      	ldr	r3, [pc, #292]	; (8008070 <dns_check_entry+0x148>)
 8007f4a:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8007f4e:	4949      	ldr	r1, [pc, #292]	; (8008074 <dns_check_entry+0x14c>)
 8007f50:	4849      	ldr	r0, [pc, #292]	; (8008078 <dns_check_entry+0x150>)
 8007f52:	f00b fcb5 	bl	80138c0 <iprintf>

  switch (entry->state) {
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	7a9b      	ldrb	r3, [r3, #10]
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d875      	bhi.n	800804a <dns_check_entry+0x122>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <dns_check_entry+0x3c>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	0800805b 	.word	0x0800805b
 8007f68:	08007f75 	.word	0x08007f75
 8007f6c:	08007fa7 	.word	0x08007fa7
 8007f70:	08008029 	.word	0x08008029
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8007f74:	f7ff ffa8 	bl	8007ec8 <dns_create_txid>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2202      	movs	r2, #2
 8007f84:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fdf4 	bl	8007b88 <dns_send>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8007fa4:	e05e      	b.n	8008064 <dns_check_entry+0x13c>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	7b1b      	ldrb	r3, [r3, #12]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	731a      	strb	r2, [r3, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	7b1b      	ldrb	r3, [r3, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d151      	bne.n	800805e <dns_check_entry+0x136>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	7b5b      	ldrb	r3, [r3, #13]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	735a      	strb	r2, [r3, #13]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	7b5b      	ldrb	r3, [r3, #13]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d121      	bne.n	8008012 <dns_check_entry+0xea>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	7adb      	ldrb	r3, [r3, #11]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d114      	bne.n	8008000 <dns_check_entry+0xd8>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	7adb      	ldrb	r3, [r3, #11]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	4a27      	ldr	r2, [pc, #156]	; (800807c <dns_check_entry+0x154>)
 8007fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00c      	beq.n	8008000 <dns_check_entry+0xd8>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	7adb      	ldrb	r3, [r3, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	735a      	strb	r2, [r3, #13]
 8007ffe:	e00c      	b.n	800801a <dns_check_entry+0xf2>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fe9f 	bl	8007d48 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	729a      	strb	r2, [r3, #10]
            break;
 8008010:	e028      	b.n	8008064 <dns_check_entry+0x13c>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	7b5a      	ldrb	r2, [r3, #13]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff fdb3 	bl	8007b88 <dns_send>
 8008022:	4603      	mov	r3, r0
 8008024:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8008026:	e01a      	b.n	800805e <dns_check_entry+0x136>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d008      	beq.n	8008042 <dns_check_entry+0x11a>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	1e5a      	subs	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10f      	bne.n	8008062 <dns_check_entry+0x13a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	729a      	strb	r2, [r3, #10]
      }
      break;
 8008048:	e00b      	b.n	8008062 <dns_check_entry+0x13a>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <dns_check_entry+0x148>)
 800804c:	f240 4237 	movw	r2, #1079	; 0x437
 8008050:	490b      	ldr	r1, [pc, #44]	; (8008080 <dns_check_entry+0x158>)
 8008052:	4809      	ldr	r0, [pc, #36]	; (8008078 <dns_check_entry+0x150>)
 8008054:	f00b fc34 	bl	80138c0 <iprintf>
      break;
 8008058:	e004      	b.n	8008064 <dns_check_entry+0x13c>
      break;
 800805a:	bf00      	nop
 800805c:	e002      	b.n	8008064 <dns_check_entry+0x13c>
      break;
 800805e:	bf00      	nop
 8008060:	e000      	b.n	8008064 <dns_check_entry+0x13c>
      break;
 8008062:	bf00      	nop
  }
}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20005354 	.word	0x20005354
 8008070:	08014880 	.word	0x08014880
 8008074:	080148f0 	.word	0x080148f0
 8008078:	080148c8 	.word	0x080148c8
 800807c:	200057c4 	.word	0x200057c4
 8008080:	0801490c 	.word	0x0801490c

08008084 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800808a:	2300      	movs	r3, #0
 800808c:	71fb      	strb	r3, [r7, #7]
 800808e:	e006      	b.n	800809e <dns_check_entries+0x1a>
    dns_check_entry(i);
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff ff48 	bl	8007f28 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	3301      	adds	r3, #1
 800809c:	71fb      	strb	r3, [r7, #7]
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d9f5      	bls.n	8008090 <dns_check_entries+0xc>
  }
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80080b8:	f000 f8a8 	bl	800820c <mem_init>
  memp_init();
 80080bc:	f000 fb38 	bl	8008730 <memp_init>
  pbuf_init();
  netif_init();
 80080c0:	f000 fbf0 	bl	80088a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80080c4:	f006 ffe6 	bl	800f094 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80080c8:	f001 fcba 	bl	8009a40 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80080cc:	f7ff fd50 	bl	8007b70 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80080d0:	f006 fec2 	bl	800ee58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80080e4:	4b40      	ldr	r3, [pc, #256]	; (80081e8 <plug_holes+0x10c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d206      	bcs.n	80080fc <plug_holes+0x20>
 80080ee:	4b3f      	ldr	r3, [pc, #252]	; (80081ec <plug_holes+0x110>)
 80080f0:	f240 125d 	movw	r2, #349	; 0x15d
 80080f4:	493e      	ldr	r1, [pc, #248]	; (80081f0 <plug_holes+0x114>)
 80080f6:	483f      	ldr	r0, [pc, #252]	; (80081f4 <plug_holes+0x118>)
 80080f8:	f00b fbe2 	bl	80138c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80080fc:	4b3e      	ldr	r3, [pc, #248]	; (80081f8 <plug_holes+0x11c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d306      	bcc.n	8008114 <plug_holes+0x38>
 8008106:	4b39      	ldr	r3, [pc, #228]	; (80081ec <plug_holes+0x110>)
 8008108:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800810c:	493b      	ldr	r1, [pc, #236]	; (80081fc <plug_holes+0x120>)
 800810e:	4839      	ldr	r0, [pc, #228]	; (80081f4 <plug_holes+0x118>)
 8008110:	f00b fbd6 	bl	80138c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	791b      	ldrb	r3, [r3, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <plug_holes+0x4e>
 800811c:	4b33      	ldr	r3, [pc, #204]	; (80081ec <plug_holes+0x110>)
 800811e:	f240 125f 	movw	r2, #351	; 0x15f
 8008122:	4937      	ldr	r1, [pc, #220]	; (8008200 <plug_holes+0x124>)
 8008124:	4833      	ldr	r0, [pc, #204]	; (80081f4 <plug_holes+0x118>)
 8008126:	f00b fbcb 	bl	80138c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008132:	d906      	bls.n	8008142 <plug_holes+0x66>
 8008134:	4b2d      	ldr	r3, [pc, #180]	; (80081ec <plug_holes+0x110>)
 8008136:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800813a:	4932      	ldr	r1, [pc, #200]	; (8008204 <plug_holes+0x128>)
 800813c:	482d      	ldr	r0, [pc, #180]	; (80081f4 <plug_holes+0x118>)
 800813e:	f00b fbbf 	bl	80138c0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8008142:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <plug_holes+0x10c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	8812      	ldrh	r2, [r2, #0]
 800814a:	4413      	add	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	429a      	cmp	r2, r3
 8008154:	d01f      	beq.n	8008196 <plug_holes+0xba>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	791b      	ldrb	r3, [r3, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d11b      	bne.n	8008196 <plug_holes+0xba>
 800815e:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <plug_holes+0x11c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	429a      	cmp	r2, r3
 8008166:	d016      	beq.n	8008196 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008168:	4b27      	ldr	r3, [pc, #156]	; (8008208 <plug_holes+0x12c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	429a      	cmp	r2, r3
 8008170:	d102      	bne.n	8008178 <plug_holes+0x9c>
      lfree = mem;
 8008172:	4a25      	ldr	r2, [pc, #148]	; (8008208 <plug_holes+0x12c>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	881a      	ldrh	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8008180:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <plug_holes+0x10c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	1ad1      	subs	r1, r2, r3
 8008188:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <plug_holes+0x10c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	8812      	ldrh	r2, [r2, #0]
 8008190:	4413      	add	r3, r2
 8008192:	b28a      	uxth	r2, r1
 8008194:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <plug_holes+0x10c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	8852      	ldrh	r2, [r2, #2]
 800819e:	4413      	add	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d01a      	beq.n	80081e0 <plug_holes+0x104>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	791b      	ldrb	r3, [r3, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d116      	bne.n	80081e0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <plug_holes+0x12c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d102      	bne.n	80081c2 <plug_holes+0xe6>
      lfree = pmem;
 80081bc:	4a12      	ldr	r2, [pc, #72]	; (8008208 <plug_holes+0x12c>)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	881a      	ldrh	r2, [r3, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80081ca:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <plug_holes+0x10c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	1ad1      	subs	r1, r2, r3
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <plug_holes+0x10c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	8812      	ldrh	r2, [r2, #0]
 80081da:	4413      	add	r3, r2
 80081dc:	b28a      	uxth	r2, r1
 80081de:	805a      	strh	r2, [r3, #2]
  }
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20005e38 	.word	0x20005e38
 80081ec:	0801492c 	.word	0x0801492c
 80081f0:	0801495c 	.word	0x0801495c
 80081f4:	08014974 	.word	0x08014974
 80081f8:	20005e3c 	.word	0x20005e3c
 80081fc:	0801499c 	.word	0x0801499c
 8008200:	080149b8 	.word	0x080149b8
 8008204:	080149d4 	.word	0x080149d4
 8008208:	20005e40 	.word	0x20005e40

0800820c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <mem_init+0x68>)
 8008214:	3303      	adds	r3, #3
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	461a      	mov	r2, r3
 800821c:	4b16      	ldr	r3, [pc, #88]	; (8008278 <mem_init+0x6c>)
 800821e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <mem_init+0x6c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800822c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <mem_init+0x6c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8008242:	4a0e      	ldr	r2, [pc, #56]	; (800827c <mem_init+0x70>)
 8008244:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <mem_init+0x70>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2201      	movs	r2, #1
 800824c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800824e:	4b0b      	ldr	r3, [pc, #44]	; (800827c <mem_init+0x70>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008256:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008258:	4b08      	ldr	r3, [pc, #32]	; (800827c <mem_init+0x70>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008260:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <mem_init+0x6c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a06      	ldr	r2, [pc, #24]	; (8008280 <mem_init+0x74>)
 8008268:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr
 8008274:	200057e4 	.word	0x200057e4
 8008278:	20005e38 	.word	0x20005e38
 800827c:	20005e3c 	.word	0x20005e3c
 8008280:	20005e40 	.word	0x20005e40

08008284 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d043      	beq.n	800831a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <mem_free+0x26>
 800829c:	4b22      	ldr	r3, [pc, #136]	; (8008328 <mem_free+0xa4>)
 800829e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80082a2:	4922      	ldr	r1, [pc, #136]	; (800832c <mem_free+0xa8>)
 80082a4:	4822      	ldr	r0, [pc, #136]	; (8008330 <mem_free+0xac>)
 80082a6:	f00b fb0b 	bl	80138c0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80082aa:	4b22      	ldr	r3, [pc, #136]	; (8008334 <mem_free+0xb0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d304      	bcc.n	80082be <mem_free+0x3a>
 80082b4:	4b20      	ldr	r3, [pc, #128]	; (8008338 <mem_free+0xb4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d306      	bcc.n	80082cc <mem_free+0x48>
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <mem_free+0xa4>)
 80082c0:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80082c4:	491d      	ldr	r1, [pc, #116]	; (800833c <mem_free+0xb8>)
 80082c6:	481a      	ldr	r0, [pc, #104]	; (8008330 <mem_free+0xac>)
 80082c8:	f00b fafa 	bl	80138c0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80082cc:	4b19      	ldr	r3, [pc, #100]	; (8008334 <mem_free+0xb0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d323      	bcc.n	800831e <mem_free+0x9a>
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <mem_free+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d21e      	bcs.n	800831e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3b08      	subs	r3, #8
 80082e4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <mem_free+0x78>
 80082ee:	4b0e      	ldr	r3, [pc, #56]	; (8008328 <mem_free+0xa4>)
 80082f0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80082f4:	4912      	ldr	r1, [pc, #72]	; (8008340 <mem_free+0xbc>)
 80082f6:	480e      	ldr	r0, [pc, #56]	; (8008330 <mem_free+0xac>)
 80082f8:	f00b fae2 	bl	80138c0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008302:	4b10      	ldr	r3, [pc, #64]	; (8008344 <mem_free+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	429a      	cmp	r2, r3
 800830a:	d202      	bcs.n	8008312 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800830c:	4a0d      	ldr	r2, [pc, #52]	; (8008344 <mem_free+0xc0>)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fee2 	bl	80080dc <plug_holes>
 8008318:	e002      	b.n	8008320 <mem_free+0x9c>
    return;
 800831a:	bf00      	nop
 800831c:	e000      	b.n	8008320 <mem_free+0x9c>
    return;
 800831e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	0801492c 	.word	0x0801492c
 800832c:	08014a00 	.word	0x08014a00
 8008330:	08014974 	.word	0x08014974
 8008334:	20005e38 	.word	0x20005e38
 8008338:	20005e3c 	.word	0x20005e3c
 800833c:	08014a24 	.word	0x08014a24
 8008340:	08014a3c 	.word	0x08014a3c
 8008344:	20005e40 	.word	0x20005e40

08008348 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	3303      	adds	r3, #3
 8008358:	b29b      	uxth	r3, r3
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8008360:	887b      	ldrh	r3, [r7, #2]
 8008362:	2b0b      	cmp	r3, #11
 8008364:	d801      	bhi.n	800836a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008366:	230c      	movs	r3, #12
 8008368:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800836a:	887b      	ldrh	r3, [r7, #2]
 800836c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008370:	d901      	bls.n	8008376 <mem_trim+0x2e>
    return NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	e0b1      	b.n	80084da <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008376:	4b5b      	ldr	r3, [pc, #364]	; (80084e4 <mem_trim+0x19c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d304      	bcc.n	800838a <mem_trim+0x42>
 8008380:	4b59      	ldr	r3, [pc, #356]	; (80084e8 <mem_trim+0x1a0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d306      	bcc.n	8008398 <mem_trim+0x50>
 800838a:	4b58      	ldr	r3, [pc, #352]	; (80084ec <mem_trim+0x1a4>)
 800838c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008390:	4957      	ldr	r1, [pc, #348]	; (80084f0 <mem_trim+0x1a8>)
 8008392:	4858      	ldr	r0, [pc, #352]	; (80084f4 <mem_trim+0x1ac>)
 8008394:	f00b fa94 	bl	80138c0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008398:	4b52      	ldr	r3, [pc, #328]	; (80084e4 <mem_trim+0x19c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d304      	bcc.n	80083ac <mem_trim+0x64>
 80083a2:	4b51      	ldr	r3, [pc, #324]	; (80084e8 <mem_trim+0x1a0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d301      	bcc.n	80083b0 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	e094      	b.n	80084da <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3b08      	subs	r3, #8
 80083b4:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80083b6:	4b4b      	ldr	r3, [pc, #300]	; (80084e4 <mem_trim+0x19c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	881a      	ldrh	r2, [r3, #0]
 80083c4:	8a7b      	ldrh	r3, [r7, #18]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b08      	subs	r3, #8
 80083cc:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80083ce:	887a      	ldrh	r2, [r7, #2]
 80083d0:	8a3b      	ldrh	r3, [r7, #16]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d906      	bls.n	80083e4 <mem_trim+0x9c>
 80083d6:	4b45      	ldr	r3, [pc, #276]	; (80084ec <mem_trim+0x1a4>)
 80083d8:	f240 2206 	movw	r2, #518	; 0x206
 80083dc:	4946      	ldr	r1, [pc, #280]	; (80084f8 <mem_trim+0x1b0>)
 80083de:	4845      	ldr	r0, [pc, #276]	; (80084f4 <mem_trim+0x1ac>)
 80083e0:	f00b fa6e 	bl	80138c0 <iprintf>
  if (newsize > size) {
 80083e4:	887a      	ldrh	r2, [r7, #2]
 80083e6:	8a3b      	ldrh	r3, [r7, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d901      	bls.n	80083f0 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e074      	b.n	80084da <mem_trim+0x192>
  }
  if (newsize == size) {
 80083f0:	887a      	ldrh	r2, [r7, #2]
 80083f2:	8a3b      	ldrh	r3, [r7, #16]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d101      	bne.n	80083fc <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	e06e      	b.n	80084da <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80083fc:	4b39      	ldr	r3, [pc, #228]	; (80084e4 <mem_trim+0x19c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	8812      	ldrh	r2, [r2, #0]
 8008404:	4413      	add	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d131      	bne.n	8008474 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008416:	8a7a      	ldrh	r2, [r7, #18]
 8008418:	887b      	ldrh	r3, [r7, #2]
 800841a:	4413      	add	r3, r2
 800841c:	b29b      	uxth	r3, r3
 800841e:	3308      	adds	r3, #8
 8008420:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8008422:	4b36      	ldr	r3, [pc, #216]	; (80084fc <mem_trim+0x1b4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	429a      	cmp	r2, r3
 800842a:	d105      	bne.n	8008438 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <mem_trim+0x19c>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	897b      	ldrh	r3, [r7, #10]
 8008432:	4413      	add	r3, r2
 8008434:	4a31      	ldr	r2, [pc, #196]	; (80084fc <mem_trim+0x1b4>)
 8008436:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008438:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <mem_trim+0x19c>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	897b      	ldrh	r3, [r7, #10]
 800843e:	4413      	add	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	893a      	ldrh	r2, [r7, #8]
 800844c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8a7a      	ldrh	r2, [r7, #18]
 8008452:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	897a      	ldrh	r2, [r7, #10]
 8008458:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008462:	d039      	beq.n	80084d8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008464:	4b1f      	ldr	r3, [pc, #124]	; (80084e4 <mem_trim+0x19c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	8812      	ldrh	r2, [r2, #0]
 800846c:	4413      	add	r3, r2
 800846e:	897a      	ldrh	r2, [r7, #10]
 8008470:	805a      	strh	r2, [r3, #2]
 8008472:	e031      	b.n	80084d8 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008474:	887b      	ldrh	r3, [r7, #2]
 8008476:	f103 0214 	add.w	r2, r3, #20
 800847a:	8a3b      	ldrh	r3, [r7, #16]
 800847c:	429a      	cmp	r2, r3
 800847e:	d82b      	bhi.n	80084d8 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008480:	8a7a      	ldrh	r2, [r7, #18]
 8008482:	887b      	ldrh	r3, [r7, #2]
 8008484:	4413      	add	r3, r2
 8008486:	b29b      	uxth	r3, r3
 8008488:	3308      	adds	r3, #8
 800848a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800848c:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <mem_trim+0x19c>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	897b      	ldrh	r3, [r7, #10]
 8008492:	4413      	add	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8008496:	4b19      	ldr	r3, [pc, #100]	; (80084fc <mem_trim+0x1b4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	429a      	cmp	r2, r3
 800849e:	d202      	bcs.n	80084a6 <mem_trim+0x15e>
      lfree = mem2;
 80084a0:	4a16      	ldr	r2, [pc, #88]	; (80084fc <mem_trim+0x1b4>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	881a      	ldrh	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8a7a      	ldrh	r2, [r7, #18]
 80084b8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	897a      	ldrh	r2, [r7, #10]
 80084be:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084c8:	d006      	beq.n	80084d8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <mem_trim+0x19c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	8812      	ldrh	r2, [r2, #0]
 80084d2:	4413      	add	r3, r2
 80084d4:	897a      	ldrh	r2, [r7, #10]
 80084d6:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80084d8:	687b      	ldr	r3, [r7, #4]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20005e38 	.word	0x20005e38
 80084e8:	20005e3c 	.word	0x20005e3c
 80084ec:	0801492c 	.word	0x0801492c
 80084f0:	08014a50 	.word	0x08014a50
 80084f4:	08014974 	.word	0x08014974
 80084f8:	08014a68 	.word	0x08014a68
 80084fc:	20005e40 	.word	0x20005e40

08008500 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <mem_malloc+0x14>
    return NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	e0c7      	b.n	80086a4 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8008514:	88fb      	ldrh	r3, [r7, #6]
 8008516:	3303      	adds	r3, #3
 8008518:	b29b      	uxth	r3, r3
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	2b0b      	cmp	r3, #11
 8008524:	d801      	bhi.n	800852a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008526:	230c      	movs	r3, #12
 8008528:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008530:	d901      	bls.n	8008536 <mem_malloc+0x36>
    return NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	e0b6      	b.n	80086a4 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008536:	4b5d      	ldr	r3, [pc, #372]	; (80086ac <mem_malloc+0x1ac>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4b5d      	ldr	r3, [pc, #372]	; (80086b0 <mem_malloc+0x1b0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	83fb      	strh	r3, [r7, #30]
 8008542:	e0a7      	b.n	8008694 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8008544:	4b5a      	ldr	r3, [pc, #360]	; (80086b0 <mem_malloc+0x1b0>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	8bfb      	ldrh	r3, [r7, #30]
 800854a:	4413      	add	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f040 8098 	bne.w	8008688 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	8bfb      	ldrh	r3, [r7, #30]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f1a3 0208 	sub.w	r2, r3, #8
 8008566:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8008568:	429a      	cmp	r2, r3
 800856a:	f0c0 808d 	bcc.w	8008688 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	8bfb      	ldrh	r3, [r7, #30]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	f1a3 0208 	sub.w	r2, r3, #8
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	3314      	adds	r3, #20
 8008580:	429a      	cmp	r2, r3
 8008582:	d327      	bcc.n	80085d4 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8008584:	8bfa      	ldrh	r2, [r7, #30]
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	4413      	add	r3, r2
 800858a:	b29b      	uxth	r3, r3
 800858c:	3308      	adds	r3, #8
 800858e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8008590:	4b47      	ldr	r3, [pc, #284]	; (80086b0 <mem_malloc+0x1b0>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	8a7b      	ldrh	r3, [r7, #18]
 8008596:	4413      	add	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	881a      	ldrh	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8bfa      	ldrh	r2, [r7, #30]
 80085ac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	8a7a      	ldrh	r2, [r7, #18]
 80085b2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2201      	movs	r2, #1
 80085b8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80085c2:	d00a      	beq.n	80085da <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80085c4:	4b3a      	ldr	r3, [pc, #232]	; (80086b0 <mem_malloc+0x1b0>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	8812      	ldrh	r2, [r2, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	8a7a      	ldrh	r2, [r7, #18]
 80085d0:	805a      	strh	r2, [r3, #2]
 80085d2:	e002      	b.n	80085da <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2201      	movs	r2, #1
 80085d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80085da:	4b34      	ldr	r3, [pc, #208]	; (80086ac <mem_malloc+0x1ac>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d127      	bne.n	8008634 <mem_malloc+0x134>
          struct mem *cur = lfree;
 80085e4:	4b31      	ldr	r3, [pc, #196]	; (80086ac <mem_malloc+0x1ac>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80085ea:	e005      	b.n	80085f8 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80085ec:	4b30      	ldr	r3, [pc, #192]	; (80086b0 <mem_malloc+0x1b0>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	8812      	ldrh	r2, [r2, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	791b      	ldrb	r3, [r3, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <mem_malloc+0x10a>
 8008600:	4b2c      	ldr	r3, [pc, #176]	; (80086b4 <mem_malloc+0x1b4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	429a      	cmp	r2, r3
 8008608:	d1f0      	bne.n	80085ec <mem_malloc+0xec>
          }
          lfree = cur;
 800860a:	4a28      	ldr	r2, [pc, #160]	; (80086ac <mem_malloc+0x1ac>)
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008610:	4b26      	ldr	r3, [pc, #152]	; (80086ac <mem_malloc+0x1ac>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	4b27      	ldr	r3, [pc, #156]	; (80086b4 <mem_malloc+0x1b4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d00b      	beq.n	8008634 <mem_malloc+0x134>
 800861c:	4b23      	ldr	r3, [pc, #140]	; (80086ac <mem_malloc+0x1ac>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	791b      	ldrb	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d006      	beq.n	8008634 <mem_malloc+0x134>
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <mem_malloc+0x1b8>)
 8008628:	f240 22cf 	movw	r2, #719	; 0x2cf
 800862c:	4923      	ldr	r1, [pc, #140]	; (80086bc <mem_malloc+0x1bc>)
 800862e:	4824      	ldr	r0, [pc, #144]	; (80086c0 <mem_malloc+0x1c0>)
 8008630:	f00b f946 	bl	80138c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4413      	add	r3, r2
 800863a:	3308      	adds	r3, #8
 800863c:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <mem_malloc+0x1b4>)
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	4293      	cmp	r3, r2
 8008642:	d906      	bls.n	8008652 <mem_malloc+0x152>
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <mem_malloc+0x1b8>)
 8008646:	f240 22d3 	movw	r2, #723	; 0x2d3
 800864a:	491e      	ldr	r1, [pc, #120]	; (80086c4 <mem_malloc+0x1c4>)
 800864c:	481c      	ldr	r0, [pc, #112]	; (80086c0 <mem_malloc+0x1c0>)
 800864e:	f00b f937 	bl	80138c0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <mem_malloc+0x16a>
 800865c:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <mem_malloc+0x1b8>)
 800865e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8008662:	4919      	ldr	r1, [pc, #100]	; (80086c8 <mem_malloc+0x1c8>)
 8008664:	4816      	ldr	r0, [pc, #88]	; (80086c0 <mem_malloc+0x1c0>)
 8008666:	f00b f92b 	bl	80138c0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <mem_malloc+0x182>
 8008674:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <mem_malloc+0x1b8>)
 8008676:	f240 22d7 	movw	r2, #727	; 0x2d7
 800867a:	4914      	ldr	r1, [pc, #80]	; (80086cc <mem_malloc+0x1cc>)
 800867c:	4810      	ldr	r0, [pc, #64]	; (80086c0 <mem_malloc+0x1c0>)
 800867e:	f00b f91f 	bl	80138c0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	3308      	adds	r3, #8
 8008686:	e00d      	b.n	80086a4 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8008688:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <mem_malloc+0x1b0>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	8bfb      	ldrh	r3, [r7, #30]
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008694:	8bfa      	ldrh	r2, [r7, #30]
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800869c:	429a      	cmp	r2, r3
 800869e:	f4ff af51 	bcc.w	8008544 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20005e40 	.word	0x20005e40
 80086b0:	20005e38 	.word	0x20005e38
 80086b4:	20005e3c 	.word	0x20005e3c
 80086b8:	0801492c 	.word	0x0801492c
 80086bc:	08014a88 	.word	0x08014a88
 80086c0:	08014974 	.word	0x08014974
 80086c4:	08014aa4 	.word	0x08014aa4
 80086c8:	08014ad4 	.word	0x08014ad4
 80086cc:	08014b04 	.word	0x08014b04

080086d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	3303      	adds	r3, #3
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e011      	b.n	8008716 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	885b      	ldrh	r3, [r3, #2]
 800871a:	461a      	mov	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4293      	cmp	r3, r2
 8008720:	dbe7      	blt.n	80086f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008722:	bf00      	nop
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
	...

08008730 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008736:	2300      	movs	r3, #0
 8008738:	80fb      	strh	r3, [r7, #6]
 800873a:	e009      	b.n	8008750 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <memp_init+0x30>)
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff ffc3 	bl	80086d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800874a:	88fb      	ldrh	r3, [r7, #6]
 800874c:	3301      	adds	r3, #1
 800874e:	80fb      	strh	r3, [r7, #6]
 8008750:	88fb      	ldrh	r3, [r7, #6]
 8008752:	2b08      	cmp	r3, #8
 8008754:	d9f2      	bls.n	800873c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08016654 	.word	0x08016654

08008764 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d012      	beq.n	80087a0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d006      	beq.n	800879c <do_memp_malloc_pool+0x38>
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <do_memp_malloc_pool+0x48>)
 8008790:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8008794:	4906      	ldr	r1, [pc, #24]	; (80087b0 <do_memp_malloc_pool+0x4c>)
 8008796:	4807      	ldr	r0, [pc, #28]	; (80087b4 <do_memp_malloc_pool+0x50>)
 8008798:	f00b f892 	bl	80138c0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e000      	b.n	80087a2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	08014b28 	.word	0x08014b28
 80087b0:	08014b58 	.word	0x08014b58
 80087b4:	08014b7c 	.word	0x08014b7c

080087b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d908      	bls.n	80087da <memp_malloc+0x22>
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <memp_malloc+0x3c>)
 80087ca:	f240 1287 	movw	r2, #391	; 0x187
 80087ce:	490a      	ldr	r1, [pc, #40]	; (80087f8 <memp_malloc+0x40>)
 80087d0:	480a      	ldr	r0, [pc, #40]	; (80087fc <memp_malloc+0x44>)
 80087d2:	f00b f875 	bl	80138c0 <iprintf>
 80087d6:	2300      	movs	r3, #0
 80087d8:	e008      	b.n	80087ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	4a08      	ldr	r2, [pc, #32]	; (8008800 <memp_malloc+0x48>)
 80087de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff ffbe 	bl	8008764 <do_memp_malloc_pool>
 80087e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80087ea:	68fb      	ldr	r3, [r7, #12]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	08014b28 	.word	0x08014b28
 80087f8:	08014bb8 	.word	0x08014bb8
 80087fc:	08014b7c 	.word	0x08014b7c
 8008800:	08016654 	.word	0x08016654

08008804 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <do_memp_free_pool+0x22>
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <do_memp_free_pool+0x40>)
 800881a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800881e:	490a      	ldr	r1, [pc, #40]	; (8008848 <do_memp_free_pool+0x44>)
 8008820:	480a      	ldr	r0, [pc, #40]	; (800884c <do_memp_free_pool+0x48>)
 8008822:	f00b f84d 	bl	80138c0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	08014b28 	.word	0x08014b28
 8008848:	08014bd8 	.word	0x08014bd8
 800884c:	08014b7c 	.word	0x08014b7c

08008850 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b08      	cmp	r3, #8
 8008860:	d907      	bls.n	8008872 <memp_free+0x22>
 8008862:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <memp_free+0x44>)
 8008864:	f240 12db 	movw	r2, #475	; 0x1db
 8008868:	490b      	ldr	r1, [pc, #44]	; (8008898 <memp_free+0x48>)
 800886a:	480c      	ldr	r0, [pc, #48]	; (800889c <memp_free+0x4c>)
 800886c:	f00b f828 	bl	80138c0 <iprintf>
 8008870:	e00c      	b.n	800888c <memp_free+0x3c>

  if (mem == NULL) {
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <memp_free+0x50>)
 800887c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff ffbe 	bl	8008804 <do_memp_free_pool>
 8008888:	e000      	b.n	800888c <memp_free+0x3c>
    return;
 800888a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	08014b28 	.word	0x08014b28
 8008898:	08014bf8 	.word	0x08014bf8
 800889c:	08014b7c 	.word	0x08014b7c
 80088a0:	08016654 	.word	0x08016654

080088a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80088a8:	bf00      	nop
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr

080088b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <netif_add+0x20>
 80088c4:	4b21      	ldr	r3, [pc, #132]	; (800894c <netif_add+0x9c>)
 80088c6:	22fb      	movs	r2, #251	; 0xfb
 80088c8:	4921      	ldr	r1, [pc, #132]	; (8008950 <netif_add+0xa0>)
 80088ca:	4822      	ldr	r0, [pc, #136]	; (8008954 <netif_add+0xa4>)
 80088cc:	f00a fff8 	bl	80138c0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80088fe:	4b16      	ldr	r3, [pc, #88]	; (8008958 <netif_add+0xa8>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	b2d1      	uxtb	r1, r2
 8008906:	4a14      	ldr	r2, [pc, #80]	; (8008958 <netif_add+0xa8>)
 8008908:	7011      	strb	r1, [r2, #0]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a3a      	ldr	r2, [r7, #32]
 8008914:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f81f 	bl	8008960 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	4798      	blx	r3
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <netif_add+0x82>
    return NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	e007      	b.n	8008942 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <netif_add+0xac>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800893a:	4a08      	ldr	r2, [pc, #32]	; (800895c <netif_add+0xac>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8008940:	68fb      	ldr	r3, [r7, #12]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	08014c14 	.word	0x08014c14
 8008950:	08014c48 	.word	0x08014c48
 8008954:	08014c60 	.word	0x08014c60
 8008958:	20008db4 	.word	0x20008db4
 800895c:	20008dac 	.word	0x20008dac

08008960 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <netif_set_addr+0x1c>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10c      	bne.n	8008996 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f81a 	bl	80089b8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 f861 	bl	8008a4e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 f84a 	bl	8008a28 <netif_set_gw>
 8008994:	e00c      	b.n	80089b0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f858 	bl	8008a4e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f841 	bl	8008a28 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 f805 	bl	80089b8 <netif_set_ipaddr>
  }
}
 80089ae:	bf00      	nop
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <netif_set_ipaddr+0x18>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e002      	b.n	80089d6 <netif_set_ipaddr+0x1e>
 80089d0:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <netif_set_ipaddr+0x6c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d01c      	beq.n	8008a1c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3304      	adds	r3, #4
 80089e6:	f107 020c 	add.w	r2, r7, #12
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f002 fc0f 	bl	800b210 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3304      	adds	r3, #4
 80089f6:	f107 020c 	add.w	r2, r7, #12
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f006 fe4b 	bl	800f698 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <netif_set_ipaddr+0x56>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	e000      	b.n	8008a10 <netif_set_ipaddr+0x58>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008a14:	2101      	movs	r1, #1
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f85d 	bl	8008ad6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	080166c0 	.word	0x080166c0

08008a28 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <netif_set_gw+0x16>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	e000      	b.n	8008a40 <netif_set_gw+0x18>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr

08008a4e <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <netif_set_netmask+0x16>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	e000      	b.n	8008a66 <netif_set_netmask+0x18>
 8008a64:	2300      	movs	r3, #0
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a7c:	4a03      	ldr	r2, [pc, #12]	; (8008a8c <netif_set_default+0x18>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	20008db0 	.word	0x20008db0

08008a90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d113      	bne.n	8008ace <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008ac6:	2103      	movs	r1, #3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f804 	bl	8008ad6 <netif_issue_reports>
    }
  }
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d011      	beq.n	8008b10 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f007 fcf6 	bl	80104fc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d012      	beq.n	8008b54 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f007 f89a 	bl	800fc88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  if (netif) {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	61da      	str	r2, [r3, #28]
  }
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008b82:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <pbuf_free_ooseq+0x40>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b88:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <pbuf_free_ooseq+0x44>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	607b      	str	r3, [r7, #4]
 8008b8e:	e00f      	b.n	8008bb0 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 ffb0 	bl	800ab02 <tcp_segs_free>
      pcb->ooseq = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8008ba8:	e005      	b.n	8008bb6 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	607b      	str	r3, [r7, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1ec      	bne.n	8008b90 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20008db5 	.word	0x20008db5
 8008bc0:	20008dc4 	.word	0x20008dc4

08008bc4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008bc8:	4b03      	ldr	r3, [pc, #12]	; (8008bd8 <pbuf_pool_is_empty+0x14>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008bce:	bf00      	nop
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20008db5 	.word	0x20008db5

08008bdc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	71fb      	strb	r3, [r7, #7]
 8008be6:	460b      	mov	r3, r1
 8008be8:	80bb      	strh	r3, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d81c      	bhi.n	8008c2e <pbuf_alloc+0x52>
 8008bf4:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <pbuf_alloc+0x20>)
 8008bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008c11 	.word	0x08008c11
 8008c00:	08008c17 	.word	0x08008c17
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c23 	.word	0x08008c23
 8008c0c:	08008c29 	.word	0x08008c29
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008c10:	2336      	movs	r3, #54	; 0x36
 8008c12:	82fb      	strh	r3, [r7, #22]
    break;
 8008c14:	e014      	b.n	8008c40 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008c16:	2322      	movs	r3, #34	; 0x22
 8008c18:	82fb      	strh	r3, [r7, #22]
    break;
 8008c1a:	e011      	b.n	8008c40 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008c1c:	230e      	movs	r3, #14
 8008c1e:	82fb      	strh	r3, [r7, #22]
    break;
 8008c20:	e00e      	b.n	8008c40 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008c22:	2300      	movs	r3, #0
 8008c24:	82fb      	strh	r3, [r7, #22]
    break;
 8008c26:	e00b      	b.n	8008c40 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	82fb      	strh	r3, [r7, #22]
    break;
 8008c2c:	e008      	b.n	8008c40 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008c2e:	4ba1      	ldr	r3, [pc, #644]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008c30:	f44f 728b 	mov.w	r2, #278	; 0x116
 8008c34:	49a0      	ldr	r1, [pc, #640]	; (8008eb8 <pbuf_alloc+0x2dc>)
 8008c36:	48a1      	ldr	r0, [pc, #644]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008c38:	f00a fe42 	bl	80138c0 <iprintf>
    return NULL;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e15c      	b.n	8008efa <pbuf_alloc+0x31e>
  }

  switch (type) {
 8008c40:	79bb      	ldrb	r3, [r7, #6]
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d00d      	beq.n	8008c62 <pbuf_alloc+0x86>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	f300 8146 	bgt.w	8008ed8 <pbuf_alloc+0x2fc>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80d0 	beq.w	8008df2 <pbuf_alloc+0x216>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f2c0 8140 	blt.w	8008ed8 <pbuf_alloc+0x2fc>
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	f200 813c 	bhi.w	8008ed8 <pbuf_alloc+0x2fc>
 8008c60:	e10d      	b.n	8008e7e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008c62:	2008      	movs	r0, #8
 8008c64:	f7ff fda8 	bl	80087b8 <memp_malloc>
 8008c68:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d103      	bne.n	8008c78 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8008c70:	f7ff ffa8 	bl	8008bc4 <pbuf_pool_is_empty>
      return NULL;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e140      	b.n	8008efa <pbuf_alloc+0x31e>
    }
    p->type = type;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	79ba      	ldrb	r2, [r7, #6]
 8008c7c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8008c84:	8afb      	ldrh	r3, [r7, #22]
 8008c86:	3310      	adds	r3, #16
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3303      	adds	r3, #3
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	461a      	mov	r2, r3
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d006      	beq.n	8008cb2 <pbuf_alloc+0xd6>
 8008ca4:	4b83      	ldr	r3, [pc, #524]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008ca6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008caa:	4985      	ldr	r1, [pc, #532]	; (8008ec0 <pbuf_alloc+0x2e4>)
 8008cac:	4883      	ldr	r0, [pc, #524]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008cae:	f00a fe07 	bl	80138c0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	88ba      	ldrh	r2, [r7, #4]
 8008cb6:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008cb8:	8afb      	ldrh	r3, [r7, #22]
 8008cba:	3303      	adds	r3, #3
 8008cbc:	f023 0303 	bic.w	r3, r3, #3
 8008cc0:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8008cc4:	88bb      	ldrh	r3, [r7, #4]
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	bf28      	it	cs
 8008cca:	4613      	movcs	r3, r2
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	8952      	ldrh	r2, [r2, #10]
 8008cda:	441a      	add	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d906      	bls.n	8008cf4 <pbuf_alloc+0x118>
 8008ce6:	4b73      	ldr	r3, [pc, #460]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008ce8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008cec:	4975      	ldr	r1, [pc, #468]	; (8008ec4 <pbuf_alloc+0x2e8>)
 8008cee:	4873      	ldr	r0, [pc, #460]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008cf0:	f00a fde6 	bl	80138c0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008cf4:	8afb      	ldrh	r3, [r7, #22]
 8008cf6:	3303      	adds	r3, #3
 8008cf8:	f023 0303 	bic.w	r3, r3, #3
 8008cfc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008d00:	d106      	bne.n	8008d10 <pbuf_alloc+0x134>
 8008d02:	4b6c      	ldr	r3, [pc, #432]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008d04:	f240 1231 	movw	r2, #305	; 0x131
 8008d08:	496f      	ldr	r1, [pc, #444]	; (8008ec8 <pbuf_alloc+0x2ec>)
 8008d0a:	486c      	ldr	r0, [pc, #432]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008d0c:	f00a fdd8 	bl	80138c0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	2201      	movs	r2, #1
 8008d14:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008d1a:	88bb      	ldrh	r3, [r7, #4]
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	8952      	ldrh	r2, [r2, #10]
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8008d24:	e061      	b.n	8008dea <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008d26:	2008      	movs	r0, #8
 8008d28:	f7ff fd46 	bl	80087b8 <memp_malloc>
 8008d2c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d106      	bne.n	8008d42 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8008d34:	f7ff ff46 	bl	8008bc4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8008d38:	69f8      	ldr	r0, [r7, #28]
 8008d3a:	f000 fac7 	bl	80092cc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e0db      	b.n	8008efa <pbuf_alloc+0x31e>
      }
      q->type = type;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	79ba      	ldrb	r2, [r7, #6]
 8008d46:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d60:	4293      	cmp	r3, r2
 8008d62:	dd06      	ble.n	8008d72 <pbuf_alloc+0x196>
 8008d64:	4b53      	ldr	r3, [pc, #332]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008d66:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008d6a:	4958      	ldr	r1, [pc, #352]	; (8008ecc <pbuf_alloc+0x2f0>)
 8008d6c:	4853      	ldr	r0, [pc, #332]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008d6e:	f00a fda7 	bl	80138c0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008d82:	bf28      	it	cs
 8008d84:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f103 0210 	add.w	r2, r3, #16
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d006      	beq.n	8008db2 <pbuf_alloc+0x1d6>
 8008da4:	4b43      	ldr	r3, [pc, #268]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008da6:	f240 1251 	movw	r2, #337	; 0x151
 8008daa:	4949      	ldr	r1, [pc, #292]	; (8008ed0 <pbuf_alloc+0x2f4>)
 8008dac:	4843      	ldr	r0, [pc, #268]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008dae:	f00a fd87 	bl	80138c0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	8952      	ldrh	r2, [r2, #10]
 8008dba:	441a      	add	r2, r3
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d906      	bls.n	8008dd4 <pbuf_alloc+0x1f8>
 8008dc6:	4b3b      	ldr	r3, [pc, #236]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008dc8:	f240 1253 	movw	r2, #339	; 0x153
 8008dcc:	493d      	ldr	r1, [pc, #244]	; (8008ec4 <pbuf_alloc+0x2e8>)
 8008dce:	483b      	ldr	r0, [pc, #236]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008dd0:	f00a fd76 	bl	80138c0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	895b      	ldrh	r3, [r3, #10]
 8008dde:	461a      	mov	r2, r3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dc9a      	bgt.n	8008d26 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008df0:	e07c      	b.n	8008eec <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008df2:	8afb      	ldrh	r3, [r7, #22]
 8008df4:	3313      	adds	r3, #19
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	88bb      	ldrh	r3, [r7, #4]
 8008e00:	3303      	adds	r3, #3
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f023 0303 	bic.w	r3, r3, #3
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008e0e:	897a      	ldrh	r2, [r7, #10]
 8008e10:	88bb      	ldrh	r3, [r7, #4]
 8008e12:	3303      	adds	r3, #3
 8008e14:	f023 0303 	bic.w	r3, r3, #3
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d201      	bcs.n	8008e20 <pbuf_alloc+0x244>
        return NULL;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e06c      	b.n	8008efa <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008e20:	897b      	ldrh	r3, [r7, #10]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff fb6c 	bl	8008500 <mem_malloc>
 8008e28:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <pbuf_alloc+0x258>
      return NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	e062      	b.n	8008efa <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008e34:	8afb      	ldrh	r3, [r7, #22]
 8008e36:	3310      	adds	r3, #16
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3303      	adds	r3, #3
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	461a      	mov	r2, r3
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	88ba      	ldrh	r2, [r7, #4]
 8008e4c:	811a      	strh	r2, [r3, #8]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	891a      	ldrh	r2, [r3, #8]
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	79ba      	ldrb	r2, [r7, #6]
 8008e60:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d03d      	beq.n	8008eea <pbuf_alloc+0x30e>
 8008e6e:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <pbuf_alloc+0x2d8>)
 8008e70:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8008e74:	4917      	ldr	r1, [pc, #92]	; (8008ed4 <pbuf_alloc+0x2f8>)
 8008e76:	4811      	ldr	r0, [pc, #68]	; (8008ebc <pbuf_alloc+0x2e0>)
 8008e78:	f00a fd22 	bl	80138c0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8008e7c:	e035      	b.n	8008eea <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008e7e:	2007      	movs	r0, #7
 8008e80:	f7ff fc9a 	bl	80087b8 <memp_malloc>
 8008e84:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e034      	b.n	8008efa <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	2200      	movs	r2, #0
 8008e94:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	88ba      	ldrh	r2, [r7, #4]
 8008e9a:	811a      	strh	r2, [r3, #8]
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	891a      	ldrh	r2, [r3, #8]
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	79ba      	ldrb	r2, [r7, #6]
 8008eae:	731a      	strb	r2, [r3, #12]
    break;
 8008eb0:	e01c      	b.n	8008eec <pbuf_alloc+0x310>
 8008eb2:	bf00      	nop
 8008eb4:	08014c88 	.word	0x08014c88
 8008eb8:	08014cb8 	.word	0x08014cb8
 8008ebc:	08014cd4 	.word	0x08014cd4
 8008ec0:	08014cfc 	.word	0x08014cfc
 8008ec4:	08014d2c 	.word	0x08014d2c
 8008ec8:	08014d60 	.word	0x08014d60
 8008ecc:	08014d94 	.word	0x08014d94
 8008ed0:	08014da8 	.word	0x08014da8
 8008ed4:	08014dd8 	.word	0x08014dd8
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <pbuf_alloc+0x328>)
 8008eda:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008ede:	490a      	ldr	r1, [pc, #40]	; (8008f08 <pbuf_alloc+0x32c>)
 8008ee0:	480a      	ldr	r0, [pc, #40]	; (8008f0c <pbuf_alloc+0x330>)
 8008ee2:	f00a fced 	bl	80138c0 <iprintf>
    return NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e007      	b.n	8008efa <pbuf_alloc+0x31e>
    break;
 8008eea:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	08014c88 	.word	0x08014c88
 8008f08:	08014e04 	.word	0x08014e04
 8008f0c:	08014cd4 	.word	0x08014cd4

08008f10 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4603      	mov	r3, r0
 8008f1a:	71fb      	strb	r3, [r7, #7]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	80bb      	strh	r3, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d81b      	bhi.n	8008f62 <pbuf_alloced_custom+0x52>
 8008f2a:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <pbuf_alloced_custom+0x20>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f45 	.word	0x08008f45
 8008f34:	08008f4b 	.word	0x08008f4b
 8008f38:	08008f51 	.word	0x08008f51
 8008f3c:	08008f57 	.word	0x08008f57
 8008f40:	08008f5d 	.word	0x08008f5d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008f44:	2336      	movs	r3, #54	; 0x36
 8008f46:	81fb      	strh	r3, [r7, #14]
    break;
 8008f48:	e014      	b.n	8008f74 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008f4a:	2322      	movs	r3, #34	; 0x22
 8008f4c:	81fb      	strh	r3, [r7, #14]
    break;
 8008f4e:	e011      	b.n	8008f74 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008f50:	230e      	movs	r3, #14
 8008f52:	81fb      	strh	r3, [r7, #14]
    break;
 8008f54:	e00e      	b.n	8008f74 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008f56:	2300      	movs	r3, #0
 8008f58:	81fb      	strh	r3, [r7, #14]
    break;
 8008f5a:	e00b      	b.n	8008f74 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	81fb      	strh	r3, [r7, #14]
    break;
 8008f60:	e008      	b.n	8008f74 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8008f62:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <pbuf_alloced_custom+0xc8>)
 8008f64:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008f68:	491c      	ldr	r1, [pc, #112]	; (8008fdc <pbuf_alloced_custom+0xcc>)
 8008f6a:	481d      	ldr	r0, [pc, #116]	; (8008fe0 <pbuf_alloced_custom+0xd0>)
 8008f6c:	f00a fca8 	bl	80138c0 <iprintf>
    return NULL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	e02d      	b.n	8008fd0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008f74:	89fb      	ldrh	r3, [r7, #14]
 8008f76:	3303      	adds	r3, #3
 8008f78:	f023 0203 	bic.w	r2, r3, #3
 8008f7c:	88bb      	ldrh	r3, [r7, #4]
 8008f7e:	441a      	add	r2, r3
 8008f80:	8bbb      	ldrh	r3, [r7, #28]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d901      	bls.n	8008f8a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	e022      	b.n	8008fd0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d008      	beq.n	8008fa8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008f96:	89fb      	ldrh	r3, [r7, #14]
 8008f98:	3303      	adds	r3, #3
 8008f9a:	f023 0303 	bic.w	r3, r3, #3
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	441a      	add	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	e002      	b.n	8008fae <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2200      	movs	r2, #0
 8008fac:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	88ba      	ldrh	r2, [r7, #4]
 8008fb8:	811a      	strh	r2, [r3, #8]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	891a      	ldrh	r2, [r3, #8]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	79ba      	ldrb	r2, [r7, #6]
 8008fc6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8008fce:	683b      	ldr	r3, [r7, #0]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08014c88 	.word	0x08014c88
 8008fdc:	08014e20 	.word	0x08014e20
 8008fe0:	08014cd4 	.word	0x08014cd4

08008fe4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <pbuf_realloc+0x20>
 8008ff6:	4b4b      	ldr	r3, [pc, #300]	; (8009124 <pbuf_realloc+0x140>)
 8008ff8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008ffc:	494a      	ldr	r1, [pc, #296]	; (8009128 <pbuf_realloc+0x144>)
 8008ffe:	484b      	ldr	r0, [pc, #300]	; (800912c <pbuf_realloc+0x148>)
 8009000:	f00a fc5e 	bl	80138c0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	7b1b      	ldrb	r3, [r3, #12]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d012      	beq.n	8009032 <pbuf_realloc+0x4e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7b1b      	ldrb	r3, [r3, #12]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d00e      	beq.n	8009032 <pbuf_realloc+0x4e>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7b1b      	ldrb	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <pbuf_realloc+0x4e>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7b1b      	ldrb	r3, [r3, #12]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d006      	beq.n	8009032 <pbuf_realloc+0x4e>
 8009024:	4b3f      	ldr	r3, [pc, #252]	; (8009124 <pbuf_realloc+0x140>)
 8009026:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800902a:	4941      	ldr	r1, [pc, #260]	; (8009130 <pbuf_realloc+0x14c>)
 800902c:	483f      	ldr	r0, [pc, #252]	; (800912c <pbuf_realloc+0x148>)
 800902e:	f00a fc47 	bl	80138c0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	891b      	ldrh	r3, [r3, #8]
 8009036:	887a      	ldrh	r2, [r7, #2]
 8009038:	429a      	cmp	r2, r3
 800903a:	d26e      	bcs.n	800911a <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800903c:	887b      	ldrh	r3, [r7, #2]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	8912      	ldrh	r2, [r2, #8]
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009046:	887b      	ldrh	r3, [r7, #2]
 8009048:	827b      	strh	r3, [r7, #18]
  q = p;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800904e:	e025      	b.n	800909c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	895b      	ldrh	r3, [r3, #10]
 8009054:	8a7a      	ldrh	r2, [r7, #18]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009060:	4293      	cmp	r3, r2
 8009062:	dd06      	ble.n	8009072 <pbuf_realloc+0x8e>
 8009064:	4b2f      	ldr	r3, [pc, #188]	; (8009124 <pbuf_realloc+0x140>)
 8009066:	f240 220b 	movw	r2, #523	; 0x20b
 800906a:	4932      	ldr	r1, [pc, #200]	; (8009134 <pbuf_realloc+0x150>)
 800906c:	482f      	ldr	r0, [pc, #188]	; (800912c <pbuf_realloc+0x148>)
 800906e:	f00a fc27 	bl	80138c0 <iprintf>
    q->tot_len += (u16_t)grow;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	891a      	ldrh	r2, [r3, #8]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	b29b      	uxth	r3, r3
 800907a:	4413      	add	r3, r2
 800907c:	b29a      	uxth	r2, r3
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <pbuf_realloc+0xb8>
 800908e:	4b25      	ldr	r3, [pc, #148]	; (8009124 <pbuf_realloc+0x140>)
 8009090:	f240 220f 	movw	r2, #527	; 0x20f
 8009094:	4928      	ldr	r1, [pc, #160]	; (8009138 <pbuf_realloc+0x154>)
 8009096:	4825      	ldr	r0, [pc, #148]	; (800912c <pbuf_realloc+0x148>)
 8009098:	f00a fc12 	bl	80138c0 <iprintf>
  while (rem_len > q->len) {
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	895b      	ldrh	r3, [r3, #10]
 80090a0:	8a7a      	ldrh	r2, [r7, #18]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8d4      	bhi.n	8009050 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	7b1b      	ldrb	r3, [r3, #12]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d121      	bne.n	80090f2 <pbuf_realloc+0x10e>
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	895b      	ldrh	r3, [r3, #10]
 80090b2:	8a7a      	ldrh	r2, [r7, #18]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d01c      	beq.n	80090f2 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	7b5b      	ldrb	r3, [r3, #13]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d116      	bne.n	80090f2 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	8a7b      	ldrh	r3, [r7, #18]
 80090d0:	4413      	add	r3, r2
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	4619      	mov	r1, r3
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7ff f936 	bl	8008348 <mem_trim>
 80090dc:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <pbuf_realloc+0x10e>
 80090e4:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <pbuf_realloc+0x140>)
 80090e6:	f240 221d 	movw	r2, #541	; 0x21d
 80090ea:	4914      	ldr	r1, [pc, #80]	; (800913c <pbuf_realloc+0x158>)
 80090ec:	480f      	ldr	r0, [pc, #60]	; (800912c <pbuf_realloc+0x148>)
 80090ee:	f00a fbe7 	bl	80138c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	8a7a      	ldrh	r2, [r7, #18]
 80090f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	895a      	ldrh	r2, [r3, #10]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f8dd 	bl	80092cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e000      	b.n	800911c <pbuf_realloc+0x138>
    return;
 800911a:	bf00      	nop

}
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	08014c88 	.word	0x08014c88
 8009128:	08014e44 	.word	0x08014e44
 800912c:	08014cd4 	.word	0x08014cd4
 8009130:	08014e5c 	.word	0x08014e5c
 8009134:	08014e78 	.word	0x08014e78
 8009138:	08014e8c 	.word	0x08014e8c
 800913c:	08014ea4 	.word	0x08014ea4

08009140 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	807b      	strh	r3, [r7, #2]
 800914c:	4613      	mov	r3, r2
 800914e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <pbuf_header_impl+0x24>
 8009156:	4b46      	ldr	r3, [pc, #280]	; (8009270 <pbuf_header_impl+0x130>)
 8009158:	f240 223f 	movw	r2, #575	; 0x23f
 800915c:	4945      	ldr	r1, [pc, #276]	; (8009274 <pbuf_header_impl+0x134>)
 800915e:	4846      	ldr	r0, [pc, #280]	; (8009278 <pbuf_header_impl+0x138>)
 8009160:	f00a fbae 	bl	80138c0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009164:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <pbuf_header_impl+0x32>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <pbuf_header_impl+0x36>
    return 0;
 8009172:	2300      	movs	r3, #0
 8009174:	e078      	b.n	8009268 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8009176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800917a:	2b00      	cmp	r3, #0
 800917c:	da10      	bge.n	80091a0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800917e:	887b      	ldrh	r3, [r7, #2]
 8009180:	425b      	negs	r3, r3
 8009182:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	895b      	ldrh	r3, [r3, #10]
 8009188:	89fa      	ldrh	r2, [r7, #14]
 800918a:	429a      	cmp	r2, r3
 800918c:	d90a      	bls.n	80091a4 <pbuf_header_impl+0x64>
 800918e:	4b38      	ldr	r3, [pc, #224]	; (8009270 <pbuf_header_impl+0x130>)
 8009190:	f240 2247 	movw	r2, #583	; 0x247
 8009194:	4939      	ldr	r1, [pc, #228]	; (800927c <pbuf_header_impl+0x13c>)
 8009196:	4838      	ldr	r0, [pc, #224]	; (8009278 <pbuf_header_impl+0x138>)
 8009198:	f00a fb92 	bl	80138c0 <iprintf>
 800919c:	2301      	movs	r3, #1
 800919e:	e063      	b.n	8009268 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80091a0:	887b      	ldrh	r3, [r7, #2]
 80091a2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	7b1b      	ldrb	r3, [r3, #12]
 80091a8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80091b0:	89bb      	ldrh	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <pbuf_header_impl+0x7c>
 80091b6:	89bb      	ldrh	r3, [r7, #12]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d112      	bne.n	80091e2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091c4:	425b      	negs	r3, r3
 80091c6:	441a      	add	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3310      	adds	r3, #16
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d238      	bcs.n	800924a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80091de:	2301      	movs	r3, #1
 80091e0:	e042      	b.n	8009268 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80091e2:	89bb      	ldrh	r3, [r7, #12]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d002      	beq.n	80091ee <pbuf_header_impl+0xae>
 80091e8:	89bb      	ldrh	r3, [r7, #12]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d124      	bne.n	8009238 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80091ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	da0d      	bge.n	8009212 <pbuf_header_impl+0xd2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	895b      	ldrh	r3, [r3, #10]
 80091fa:	89fa      	ldrh	r2, [r7, #14]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d808      	bhi.n	8009212 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009208:	425b      	negs	r3, r3
 800920a:	441a      	add	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	e011      	b.n	8009236 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8009212:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009216:	2b00      	cmp	r3, #0
 8009218:	dd0b      	ble.n	8009232 <pbuf_header_impl+0xf2>
 800921a:	787b      	ldrb	r3, [r7, #1]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d008      	beq.n	8009232 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009228:	425b      	negs	r3, r3
 800922a:	441a      	add	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	605a      	str	r2, [r3, #4]
 8009230:	e001      	b.n	8009236 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009232:	2301      	movs	r3, #1
 8009234:	e018      	b.n	8009268 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009236:	e008      	b.n	800924a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <pbuf_header_impl+0x130>)
 800923a:	f240 2277 	movw	r2, #631	; 0x277
 800923e:	4910      	ldr	r1, [pc, #64]	; (8009280 <pbuf_header_impl+0x140>)
 8009240:	480d      	ldr	r0, [pc, #52]	; (8009278 <pbuf_header_impl+0x138>)
 8009242:	f00a fb3d 	bl	80138c0 <iprintf>
    return 1;
 8009246:	2301      	movs	r3, #1
 8009248:	e00e      	b.n	8009268 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	895a      	ldrh	r2, [r3, #10]
 800924e:	887b      	ldrh	r3, [r7, #2]
 8009250:	4413      	add	r3, r2
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	891a      	ldrh	r2, [r3, #8]
 800925c:	887b      	ldrh	r3, [r7, #2]
 800925e:	4413      	add	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	08014c88 	.word	0x08014c88
 8009274:	08014ec0 	.word	0x08014ec0
 8009278:	08014cd4 	.word	0x08014cd4
 800927c:	08014ecc 	.word	0x08014ecc
 8009280:	08014eec 	.word	0x08014eec

08009284 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8009290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009294:	2200      	movs	r2, #0
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff ff51 	bl	8009140 <pbuf_header_impl>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80092b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b8:	2201      	movs	r2, #1
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff ff3f 	bl	8009140 <pbuf_header_impl>
 80092c2:	4603      	mov	r3, r0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <pbuf_free+0x22>
 80092e0:	4b3e      	ldr	r3, [pc, #248]	; (80093dc <pbuf_free+0x110>)
 80092e2:	f240 22d2 	movw	r2, #722	; 0x2d2
 80092e6:	493e      	ldr	r1, [pc, #248]	; (80093e0 <pbuf_free+0x114>)
 80092e8:	483e      	ldr	r0, [pc, #248]	; (80093e4 <pbuf_free+0x118>)
 80092ea:	f00a fae9 	bl	80138c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e070      	b.n	80093d4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7b1b      	ldrb	r3, [r3, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d012      	beq.n	8009320 <pbuf_free+0x54>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	7b1b      	ldrb	r3, [r3, #12]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d00e      	beq.n	8009320 <pbuf_free+0x54>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7b1b      	ldrb	r3, [r3, #12]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d00a      	beq.n	8009320 <pbuf_free+0x54>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7b1b      	ldrb	r3, [r3, #12]
 800930e:	2b03      	cmp	r3, #3
 8009310:	d006      	beq.n	8009320 <pbuf_free+0x54>
 8009312:	4b32      	ldr	r3, [pc, #200]	; (80093dc <pbuf_free+0x110>)
 8009314:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009318:	4933      	ldr	r1, [pc, #204]	; (80093e8 <pbuf_free+0x11c>)
 800931a:	4832      	ldr	r0, [pc, #200]	; (80093e4 <pbuf_free+0x118>)
 800931c:	f00a fad0 	bl	80138c0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009324:	e052      	b.n	80093cc <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	89db      	ldrh	r3, [r3, #14]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <pbuf_free+0x70>
 800932e:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <pbuf_free+0x110>)
 8009330:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009334:	492d      	ldr	r1, [pc, #180]	; (80093ec <pbuf_free+0x120>)
 8009336:	482b      	ldr	r0, [pc, #172]	; (80093e4 <pbuf_free+0x118>)
 8009338:	f00a fac2 	bl	80138c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	89db      	ldrh	r3, [r3, #14]
 8009340:	3b01      	subs	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	81da      	strh	r2, [r3, #14]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	89db      	ldrh	r3, [r3, #14]
 800934c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800934e:	8abb      	ldrh	r3, [r7, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d139      	bne.n	80093c8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7b1b      	ldrb	r3, [r3, #12]
 800935e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7b5b      	ldrb	r3, [r3, #13]
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d011      	beq.n	8009390 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <pbuf_free+0xba>
 8009378:	4b18      	ldr	r3, [pc, #96]	; (80093dc <pbuf_free+0x110>)
 800937a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800937e:	491c      	ldr	r1, [pc, #112]	; (80093f0 <pbuf_free+0x124>)
 8009380:	4818      	ldr	r0, [pc, #96]	; (80093e4 <pbuf_free+0x118>)
 8009382:	f00a fa9d 	bl	80138c0 <iprintf>
        pc->custom_free_function(p);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
 800938e:	e015      	b.n	80093bc <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	2b03      	cmp	r3, #3
 8009394:	d104      	bne.n	80093a0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	2008      	movs	r0, #8
 800939a:	f7ff fa59 	bl	8008850 <memp_free>
 800939e:	e00d      	b.n	80093bc <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80093a0:	89fb      	ldrh	r3, [r7, #14]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d002      	beq.n	80093ac <pbuf_free+0xe0>
 80093a6:	89fb      	ldrh	r3, [r7, #14]
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d104      	bne.n	80093b6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	2007      	movs	r0, #7
 80093b0:	f7ff fa4e 	bl	8008850 <memp_free>
 80093b4:	e002      	b.n	80093bc <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7fe ff64 	bl	8008284 <mem_free>
        }
      }
      count++;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	3301      	adds	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	e001      	b.n	80093cc <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1a9      	bne.n	8009326 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	08014c88 	.word	0x08014c88
 80093e0:	08014ec0 	.word	0x08014ec0
 80093e4:	08014cd4 	.word	0x08014cd4
 80093e8:	08014efc 	.word	0x08014efc
 80093ec:	08014f14 	.word	0x08014f14
 80093f0:	08014f2c 	.word	0x08014f2c

080093f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009400:	e005      	b.n	800940e <pbuf_clen+0x1a>
    ++len;
 8009402:	89fb      	ldrh	r3, [r7, #14]
 8009404:	3301      	adds	r3, #1
 8009406:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f6      	bne.n	8009402 <pbuf_clen+0xe>
  }
  return len;
 8009414:	89fb      	ldrh	r3, [r7, #14]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	bc80      	pop	{r7}
 800941e:	4770      	bx	lr

08009420 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d010      	beq.n	8009450 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	89db      	ldrh	r3, [r3, #14]
 8009432:	3301      	adds	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	89db      	ldrh	r3, [r3, #14]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <pbuf_ref+0x30>
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <pbuf_ref+0x38>)
 8009444:	f240 3239 	movw	r2, #825	; 0x339
 8009448:	4904      	ldr	r1, [pc, #16]	; (800945c <pbuf_ref+0x3c>)
 800944a:	4805      	ldr	r0, [pc, #20]	; (8009460 <pbuf_ref+0x40>)
 800944c:	f00a fa38 	bl	80138c0 <iprintf>
  }
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	08014c88 	.word	0x08014c88
 800945c:	08014f50 	.word	0x08014f50
 8009460:	08014cd4 	.word	0x08014cd4

08009464 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <pbuf_cat+0x16>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <pbuf_cat+0x26>
 800947a:	4b20      	ldr	r3, [pc, #128]	; (80094fc <pbuf_cat+0x98>)
 800947c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009480:	491f      	ldr	r1, [pc, #124]	; (8009500 <pbuf_cat+0x9c>)
 8009482:	4820      	ldr	r0, [pc, #128]	; (8009504 <pbuf_cat+0xa0>)
 8009484:	f00a fa1c 	bl	80138c0 <iprintf>
 8009488:	e034      	b.n	80094f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e00a      	b.n	80094a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	891a      	ldrh	r2, [r3, #8]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	891b      	ldrh	r3, [r3, #8]
 8009498:	4413      	add	r3, r2
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1f0      	bne.n	8009490 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	891a      	ldrh	r2, [r3, #8]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	895b      	ldrh	r3, [r3, #10]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d006      	beq.n	80094c8 <pbuf_cat+0x64>
 80094ba:	4b10      	ldr	r3, [pc, #64]	; (80094fc <pbuf_cat+0x98>)
 80094bc:	f240 3255 	movw	r2, #853	; 0x355
 80094c0:	4911      	ldr	r1, [pc, #68]	; (8009508 <pbuf_cat+0xa4>)
 80094c2:	4810      	ldr	r0, [pc, #64]	; (8009504 <pbuf_cat+0xa0>)
 80094c4:	f00a f9fc 	bl	80138c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d006      	beq.n	80094de <pbuf_cat+0x7a>
 80094d0:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <pbuf_cat+0x98>)
 80094d2:	f240 3256 	movw	r2, #854	; 0x356
 80094d6:	490d      	ldr	r1, [pc, #52]	; (800950c <pbuf_cat+0xa8>)
 80094d8:	480a      	ldr	r0, [pc, #40]	; (8009504 <pbuf_cat+0xa0>)
 80094da:	f00a f9f1 	bl	80138c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	891a      	ldrh	r2, [r3, #8]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	891b      	ldrh	r3, [r3, #8]
 80094e6:	4413      	add	r3, r2
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	08014c88 	.word	0x08014c88
 8009500:	08014f64 	.word	0x08014f64
 8009504:	08014cd4 	.word	0x08014cd4
 8009508:	08014f9c 	.word	0x08014f9c
 800950c:	08014fcc 	.word	0x08014fcc

08009510 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff ffa1 	bl	8009464 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009522:	6838      	ldr	r0, [r7, #0]
 8009524:	f7ff ff7c 	bl	8009420 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800953a:	2300      	movs	r3, #0
 800953c:	81fb      	strh	r3, [r7, #14]
 800953e:	2300      	movs	r3, #0
 8009540:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <pbuf_copy+0x2a>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <pbuf_copy+0x2a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	891a      	ldrh	r2, [r3, #8]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	891b      	ldrh	r3, [r3, #8]
 8009556:	429a      	cmp	r2, r3
 8009558:	d209      	bcs.n	800956e <pbuf_copy+0x3e>
 800955a:	4b54      	ldr	r3, [pc, #336]	; (80096ac <pbuf_copy+0x17c>)
 800955c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8009560:	4953      	ldr	r1, [pc, #332]	; (80096b0 <pbuf_copy+0x180>)
 8009562:	4854      	ldr	r0, [pc, #336]	; (80096b4 <pbuf_copy+0x184>)
 8009564:	f00a f9ac 	bl	80138c0 <iprintf>
 8009568:	f06f 030f 	mvn.w	r3, #15
 800956c:	e099      	b.n	80096a2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	895b      	ldrh	r3, [r3, #10]
 8009572:	461a      	mov	r2, r3
 8009574:	89fb      	ldrh	r3, [r7, #14]
 8009576:	1ad2      	subs	r2, r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	895b      	ldrh	r3, [r3, #10]
 800957c:	4619      	mov	r1, r3
 800957e:	89bb      	ldrh	r3, [r7, #12]
 8009580:	1acb      	subs	r3, r1, r3
 8009582:	429a      	cmp	r2, r3
 8009584:	db05      	blt.n	8009592 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	895a      	ldrh	r2, [r3, #10]
 800958a:	89bb      	ldrh	r3, [r7, #12]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	817b      	strh	r3, [r7, #10]
 8009590:	e004      	b.n	800959c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	895a      	ldrh	r2, [r3, #10]
 8009596:	89fb      	ldrh	r3, [r7, #14]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	18d0      	adds	r0, r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	89bb      	ldrh	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	897a      	ldrh	r2, [r7, #10]
 80095ae:	4619      	mov	r1, r3
 80095b0:	f00a f894 	bl	80136dc <memcpy>
    offset_to += len;
 80095b4:	89fa      	ldrh	r2, [r7, #14]
 80095b6:	897b      	ldrh	r3, [r7, #10]
 80095b8:	4413      	add	r3, r2
 80095ba:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80095bc:	89ba      	ldrh	r2, [r7, #12]
 80095be:	897b      	ldrh	r3, [r7, #10]
 80095c0:	4413      	add	r3, r2
 80095c2:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	895b      	ldrh	r3, [r3, #10]
 80095c8:	89fa      	ldrh	r2, [r7, #14]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d906      	bls.n	80095dc <pbuf_copy+0xac>
 80095ce:	4b37      	ldr	r3, [pc, #220]	; (80096ac <pbuf_copy+0x17c>)
 80095d0:	f240 32cd 	movw	r2, #973	; 0x3cd
 80095d4:	4938      	ldr	r1, [pc, #224]	; (80096b8 <pbuf_copy+0x188>)
 80095d6:	4837      	ldr	r0, [pc, #220]	; (80096b4 <pbuf_copy+0x184>)
 80095d8:	f00a f972 	bl	80138c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	89ba      	ldrh	r2, [r7, #12]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d906      	bls.n	80095f4 <pbuf_copy+0xc4>
 80095e6:	4b31      	ldr	r3, [pc, #196]	; (80096ac <pbuf_copy+0x17c>)
 80095e8:	f240 32ce 	movw	r2, #974	; 0x3ce
 80095ec:	4933      	ldr	r1, [pc, #204]	; (80096bc <pbuf_copy+0x18c>)
 80095ee:	4831      	ldr	r0, [pc, #196]	; (80096b4 <pbuf_copy+0x184>)
 80095f0:	f00a f966 	bl	80138c0 <iprintf>
    if (offset_from >= p_from->len) {
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	895b      	ldrh	r3, [r3, #10]
 80095f8:	89ba      	ldrh	r2, [r7, #12]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d304      	bcc.n	8009608 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	895b      	ldrh	r3, [r3, #10]
 800960c:	89fa      	ldrh	r2, [r7, #14]
 800960e:	429a      	cmp	r2, r3
 8009610:	d114      	bne.n	800963c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10c      	bne.n	800963c <pbuf_copy+0x10c>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d009      	beq.n	800963c <pbuf_copy+0x10c>
 8009628:	4b20      	ldr	r3, [pc, #128]	; (80096ac <pbuf_copy+0x17c>)
 800962a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800962e:	4924      	ldr	r1, [pc, #144]	; (80096c0 <pbuf_copy+0x190>)
 8009630:	4820      	ldr	r0, [pc, #128]	; (80096b4 <pbuf_copy+0x184>)
 8009632:	f00a f945 	bl	80138c0 <iprintf>
 8009636:	f06f 030f 	mvn.w	r3, #15
 800963a:	e032      	b.n	80096a2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d013      	beq.n	800966a <pbuf_copy+0x13a>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	895a      	ldrh	r2, [r3, #10]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	429a      	cmp	r2, r3
 800964c:	d10d      	bne.n	800966a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <pbuf_copy+0x13a>
 8009656:	4b15      	ldr	r3, [pc, #84]	; (80096ac <pbuf_copy+0x17c>)
 8009658:	f240 32dd 	movw	r2, #989	; 0x3dd
 800965c:	4919      	ldr	r1, [pc, #100]	; (80096c4 <pbuf_copy+0x194>)
 800965e:	4815      	ldr	r0, [pc, #84]	; (80096b4 <pbuf_copy+0x184>)
 8009660:	f00a f92e 	bl	80138c0 <iprintf>
 8009664:	f06f 0305 	mvn.w	r3, #5
 8009668:	e01b      	b.n	80096a2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d013      	beq.n	8009698 <pbuf_copy+0x168>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	895a      	ldrh	r2, [r3, #10]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	891b      	ldrh	r3, [r3, #8]
 8009678:	429a      	cmp	r2, r3
 800967a:	d10d      	bne.n	8009698 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <pbuf_copy+0x168>
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <pbuf_copy+0x17c>)
 8009686:	f240 32e2 	movw	r2, #994	; 0x3e2
 800968a:	490e      	ldr	r1, [pc, #56]	; (80096c4 <pbuf_copy+0x194>)
 800968c:	4809      	ldr	r0, [pc, #36]	; (80096b4 <pbuf_copy+0x184>)
 800968e:	f00a f917 	bl	80138c0 <iprintf>
 8009692:	f06f 0305 	mvn.w	r3, #5
 8009696:	e004      	b.n	80096a2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f47f af67 	bne.w	800956e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	08014c88 	.word	0x08014c88
 80096b0:	08015018 	.word	0x08015018
 80096b4:	08014cd4 	.word	0x08014cd4
 80096b8:	08015048 	.word	0x08015048
 80096bc:	08015060 	.word	0x08015060
 80096c0:	0801507c 	.word	0x0801507c
 80096c4:	0801508c 	.word	0x0801508c

080096c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4611      	mov	r1, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	460b      	mov	r3, r1
 80096d8:	80fb      	strh	r3, [r7, #6]
 80096da:	4613      	mov	r3, r2
 80096dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d108      	bne.n	80096fa <pbuf_copy_partial+0x32>
 80096e8:	4b30      	ldr	r3, [pc, #192]	; (80097ac <pbuf_copy_partial+0xe4>)
 80096ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80096ee:	4930      	ldr	r1, [pc, #192]	; (80097b0 <pbuf_copy_partial+0xe8>)
 80096f0:	4830      	ldr	r0, [pc, #192]	; (80097b4 <pbuf_copy_partial+0xec>)
 80096f2:	f00a f8e5 	bl	80138c0 <iprintf>
 80096f6:	2300      	movs	r3, #0
 80096f8:	e054      	b.n	80097a4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d108      	bne.n	8009712 <pbuf_copy_partial+0x4a>
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <pbuf_copy_partial+0xe4>)
 8009702:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009706:	492c      	ldr	r1, [pc, #176]	; (80097b8 <pbuf_copy_partial+0xf0>)
 8009708:	482a      	ldr	r0, [pc, #168]	; (80097b4 <pbuf_copy_partial+0xec>)
 800970a:	f00a f8d9 	bl	80138c0 <iprintf>
 800970e:	2300      	movs	r3, #0
 8009710:	e048      	b.n	80097a4 <pbuf_copy_partial+0xdc>

  left = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <pbuf_copy_partial+0x5a>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <pbuf_copy_partial+0x5e>
    return 0;
 8009722:	2300      	movs	r3, #0
 8009724:	e03e      	b.n	80097a4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	61fb      	str	r3, [r7, #28]
 800972a:	e034      	b.n	8009796 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800972c:	88bb      	ldrh	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <pbuf_copy_partial+0x80>
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	895b      	ldrh	r3, [r3, #10]
 8009736:	88ba      	ldrh	r2, [r7, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d305      	bcc.n	8009748 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	895b      	ldrh	r3, [r3, #10]
 8009740:	88ba      	ldrh	r2, [r7, #4]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	80bb      	strh	r3, [r7, #4]
 8009746:	e023      	b.n	8009790 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	895a      	ldrh	r2, [r3, #10]
 800974c:	88bb      	ldrh	r3, [r7, #4]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009752:	8b3a      	ldrh	r2, [r7, #24]
 8009754:	88fb      	ldrh	r3, [r7, #6]
 8009756:	429a      	cmp	r2, r3
 8009758:	d901      	bls.n	800975e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800975e:	8b7b      	ldrh	r3, [r7, #26]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	18d0      	adds	r0, r2, r3
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	88bb      	ldrh	r3, [r7, #4]
 800976a:	4413      	add	r3, r2
 800976c:	8b3a      	ldrh	r2, [r7, #24]
 800976e:	4619      	mov	r1, r3
 8009770:	f009 ffb4 	bl	80136dc <memcpy>
      copied_total += buf_copy_len;
 8009774:	8afa      	ldrh	r2, [r7, #22]
 8009776:	8b3b      	ldrh	r3, [r7, #24]
 8009778:	4413      	add	r3, r2
 800977a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800977c:	8b7a      	ldrh	r2, [r7, #26]
 800977e:	8b3b      	ldrh	r3, [r7, #24]
 8009780:	4413      	add	r3, r2
 8009782:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8009784:	88fa      	ldrh	r2, [r7, #6]
 8009786:	8b3b      	ldrh	r3, [r7, #24]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	88fb      	ldrh	r3, [r7, #6]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <pbuf_copy_partial+0xda>
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1c4      	bne.n	800972c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80097a2:	8afb      	ldrh	r3, [r7, #22]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	08014c88 	.word	0x08014c88
 80097b0:	080150b8 	.word	0x080150b8
 80097b4:	08014cd4 	.word	0x08014cd4
 80097b8:	080150d8 	.word	0x080150d8

080097bc <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	460b      	mov	r3, r1
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80097ca:	897b      	ldrh	r3, [r7, #10]
 80097cc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80097d2:	e007      	b.n	80097e4 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	895b      	ldrh	r3, [r3, #10]
 80097d8:	8afa      	ldrh	r2, [r7, #22]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <pbuf_skip_const+0x38>
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	895b      	ldrh	r3, [r3, #10]
 80097ee:	8afa      	ldrh	r2, [r7, #22]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d2ef      	bcs.n	80097d4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	8afa      	ldrh	r2, [r7, #22]
 80097fe:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8009800:	693b      	ldr	r3, [r7, #16]
}
 8009802:	4618      	mov	r0, r3
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	460b      	mov	r3, r1
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 800981a:	897b      	ldrh	r3, [r7, #10]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4619      	mov	r1, r3
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff ffcb 	bl	80097bc <pbuf_skip_const>
 8009826:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8009828:	697b      	ldr	r3, [r7, #20]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <pbuf_take+0x30>
 8009850:	4b3a      	ldr	r3, [pc, #232]	; (800993c <pbuf_take+0x108>)
 8009852:	f240 4284 	movw	r2, #1156	; 0x484
 8009856:	493a      	ldr	r1, [pc, #232]	; (8009940 <pbuf_take+0x10c>)
 8009858:	483a      	ldr	r0, [pc, #232]	; (8009944 <pbuf_take+0x110>)
 800985a:	f00a f831 	bl	80138c0 <iprintf>
 800985e:	f06f 030f 	mvn.w	r3, #15
 8009862:	e066      	b.n	8009932 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <pbuf_take+0x4a>
 800986a:	4b34      	ldr	r3, [pc, #208]	; (800993c <pbuf_take+0x108>)
 800986c:	f240 4285 	movw	r2, #1157	; 0x485
 8009870:	4935      	ldr	r1, [pc, #212]	; (8009948 <pbuf_take+0x114>)
 8009872:	4834      	ldr	r0, [pc, #208]	; (8009944 <pbuf_take+0x110>)
 8009874:	f00a f824 	bl	80138c0 <iprintf>
 8009878:	f06f 030f 	mvn.w	r3, #15
 800987c:	e059      	b.n	8009932 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	891b      	ldrh	r3, [r3, #8]
 8009882:	88fa      	ldrh	r2, [r7, #6]
 8009884:	429a      	cmp	r2, r3
 8009886:	d909      	bls.n	800989c <pbuf_take+0x68>
 8009888:	4b2c      	ldr	r3, [pc, #176]	; (800993c <pbuf_take+0x108>)
 800988a:	f240 4286 	movw	r2, #1158	; 0x486
 800988e:	492f      	ldr	r1, [pc, #188]	; (800994c <pbuf_take+0x118>)
 8009890:	482c      	ldr	r0, [pc, #176]	; (8009944 <pbuf_take+0x110>)
 8009892:	f00a f815 	bl	80138c0 <iprintf>
 8009896:	f04f 33ff 	mov.w	r3, #4294967295
 800989a:	e04a      	b.n	8009932 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <pbuf_take+0x7e>
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <pbuf_take+0x7e>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	891b      	ldrh	r3, [r3, #8]
 80098ac:	88fa      	ldrh	r2, [r7, #6]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d902      	bls.n	80098b8 <pbuf_take+0x84>
    return ERR_ARG;
 80098b2:	f06f 030f 	mvn.w	r3, #15
 80098b6:	e03c      	b.n	8009932 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	61fb      	str	r3, [r7, #28]
 80098bc:	e027      	b.n	800990e <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <pbuf_take+0x9e>
 80098c4:	4b1d      	ldr	r3, [pc, #116]	; (800993c <pbuf_take+0x108>)
 80098c6:	f240 428e 	movw	r2, #1166	; 0x48e
 80098ca:	4921      	ldr	r1, [pc, #132]	; (8009950 <pbuf_take+0x11c>)
 80098cc:	481d      	ldr	r0, [pc, #116]	; (8009944 <pbuf_take+0x110>)
 80098ce:	f009 fff7 	bl	80138c0 <iprintf>
    buf_copy_len = total_copy_len;
 80098d2:	8b3b      	ldrh	r3, [r7, #24]
 80098d4:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	895b      	ldrh	r3, [r3, #10]
 80098da:	8b7a      	ldrh	r2, [r7, #26]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d902      	bls.n	80098e6 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	895b      	ldrh	r3, [r3, #10]
 80098e4:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	6858      	ldr	r0, [r3, #4]
 80098ea:	8afb      	ldrh	r3, [r7, #22]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4413      	add	r3, r2
 80098f0:	8b7a      	ldrh	r2, [r7, #26]
 80098f2:	4619      	mov	r1, r3
 80098f4:	f009 fef2 	bl	80136dc <memcpy>
    total_copy_len -= buf_copy_len;
 80098f8:	8b3a      	ldrh	r2, [r7, #24]
 80098fa:	8b7b      	ldrh	r3, [r7, #26]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8009900:	8afa      	ldrh	r2, [r7, #22]
 8009902:	8b7b      	ldrh	r3, [r7, #26]
 8009904:	4413      	add	r3, r2
 8009906:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	61fb      	str	r3, [r7, #28]
 800990e:	8b3b      	ldrh	r3, [r7, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1d4      	bne.n	80098be <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8009914:	8b3b      	ldrh	r3, [r7, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d103      	bne.n	8009922 <pbuf_take+0xee>
 800991a:	8afa      	ldrh	r2, [r7, #22]
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	429a      	cmp	r2, r3
 8009920:	d006      	beq.n	8009930 <pbuf_take+0xfc>
 8009922:	4b06      	ldr	r3, [pc, #24]	; (800993c <pbuf_take+0x108>)
 8009924:	f240 4299 	movw	r2, #1177	; 0x499
 8009928:	490a      	ldr	r1, [pc, #40]	; (8009954 <pbuf_take+0x120>)
 800992a:	4806      	ldr	r0, [pc, #24]	; (8009944 <pbuf_take+0x110>)
 800992c:	f009 ffc8 	bl	80138c0 <iprintf>
  return ERR_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	08014c88 	.word	0x08014c88
 8009940:	080150fc 	.word	0x080150fc
 8009944:	08014cd4 	.word	0x08014cd4
 8009948:	08015114 	.word	0x08015114
 800994c:	08015130 	.word	0x08015130
 8009950:	08015150 	.word	0x08015150
 8009954:	08015168 	.word	0x08015168

08009958 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4611      	mov	r1, r2
 8009964:	461a      	mov	r2, r3
 8009966:	460b      	mov	r3, r1
 8009968:	80fb      	strh	r3, [r7, #6]
 800996a:	4613      	mov	r3, r2
 800996c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 800996e:	f107 0210 	add.w	r2, r7, #16
 8009972:	88bb      	ldrh	r3, [r7, #4]
 8009974:	4619      	mov	r1, r3
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7ff ff48 	bl	800980c <pbuf_skip>
 800997c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d035      	beq.n	80099f0 <pbuf_take_at+0x98>
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	891b      	ldrh	r3, [r3, #8]
 8009988:	461a      	mov	r2, r3
 800998a:	8a3b      	ldrh	r3, [r7, #16]
 800998c:	4619      	mov	r1, r3
 800998e:	88fb      	ldrh	r3, [r7, #6]
 8009990:	440b      	add	r3, r1
 8009992:	429a      	cmp	r2, r3
 8009994:	db2c      	blt.n	80099f0 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 800999e:	88fa      	ldrh	r2, [r7, #6]
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	895b      	ldrh	r3, [r3, #10]
 80099a4:	4619      	mov	r1, r3
 80099a6:	8a3b      	ldrh	r3, [r7, #16]
 80099a8:	1acb      	subs	r3, r1, r3
 80099aa:	4293      	cmp	r3, r2
 80099ac:	bfa8      	it	ge
 80099ae:	4613      	movge	r3, r2
 80099b0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	8a3a      	ldrh	r2, [r7, #16]
 80099b8:	4413      	add	r3, r2
 80099ba:	8a7a      	ldrh	r2, [r7, #18]
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	4618      	mov	r0, r3
 80099c0:	f009 fe8c 	bl	80136dc <memcpy>
    remaining_len -= first_copy_len;
 80099c4:	8b7a      	ldrh	r2, [r7, #26]
 80099c6:	8a7b      	ldrh	r3, [r7, #18]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80099cc:	8a7b      	ldrh	r3, [r7, #18]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4413      	add	r3, r2
 80099d2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80099d4:	8b7b      	ldrh	r3, [r7, #26]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d008      	beq.n	80099ec <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	8b7a      	ldrh	r2, [r7, #26]
 80099e0:	6979      	ldr	r1, [r7, #20]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff ff26 	bl	8009834 <pbuf_take>
 80099e8:	4603      	mov	r3, r0
 80099ea:	e003      	b.n	80099f4 <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	e001      	b.n	80099f4 <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 80099f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
 8009a0c:	f107 020a 	add.w	r2, r7, #10
 8009a10:	887b      	ldrh	r3, [r7, #2]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff fef9 	bl	800980c <pbuf_skip>
 8009a1a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <pbuf_put_at+0x3c>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	895a      	ldrh	r2, [r3, #10]
 8009a26:	897b      	ldrh	r3, [r7, #10]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d905      	bls.n	8009a38 <pbuf_put_at+0x3c>
    ((u8_t*)q->payload)[q_idx] = data;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	897a      	ldrh	r2, [r7, #10]
 8009a32:	4413      	add	r3, r2
 8009a34:	787a      	ldrb	r2, [r7, #1]
 8009a36:	701a      	strb	r2, [r3, #0]
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009a44:	bf00      	nop
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bc80      	pop	{r7}
 8009a4a:	4770      	bx	lr

08009a4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009a50:	f000 ff8a 	bl	800a968 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009a54:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <tcp_tmr+0x28>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <tcp_tmr+0x28>)
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <tcp_tmr+0x28>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009a6c:	f000 fcba 	bl	800a3e4 <tcp_slowtmr>
  }
}
 8009a70:	bf00      	nop
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20008dcd 	.word	0x20008dcd

08009a78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	e00a      	b.n	8009a9e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d102      	bne.n	8009a98 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f1      	bne.n	8009a88 <tcp_remove_listener+0x10>
      }
   }
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc80      	pop	{r7}
 8009aae:	4770      	bx	lr

08009ab0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d105      	bne.n	8009aca <tcp_listen_closed+0x1a>
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <tcp_listen_closed+0x5c>)
 8009ac0:	22c0      	movs	r2, #192	; 0xc0
 8009ac2:	4913      	ldr	r1, [pc, #76]	; (8009b10 <tcp_listen_closed+0x60>)
 8009ac4:	4813      	ldr	r0, [pc, #76]	; (8009b14 <tcp_listen_closed+0x64>)
 8009ac6:	f009 fefb 	bl	80138c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	7d1b      	ldrb	r3, [r3, #20]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d005      	beq.n	8009ade <tcp_listen_closed+0x2e>
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <tcp_listen_closed+0x5c>)
 8009ad4:	22c1      	movs	r2, #193	; 0xc1
 8009ad6:	4910      	ldr	r1, [pc, #64]	; (8009b18 <tcp_listen_closed+0x68>)
 8009ad8:	480e      	ldr	r0, [pc, #56]	; (8009b14 <tcp_listen_closed+0x64>)
 8009ada:	f009 fef1 	bl	80138c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009ade:	2301      	movs	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e00b      	b.n	8009afc <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8009ae4:	4a0d      	ldr	r2, [pc, #52]	; (8009b1c <tcp_listen_closed+0x6c>)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff ffc1 	bl	8009a78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d9f0      	bls.n	8009ae4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	0801520c 	.word	0x0801520c
 8009b10:	0801523c 	.word	0x0801523c
 8009b14:	08015248 	.word	0x08015248
 8009b18:	08015270 	.word	0x08015270
 8009b1c:	08016690 	.word	0x08016690

08009b20 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009b20:	b5b0      	push	{r4, r5, r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d075      	beq.n	8009c1e <tcp_close_shutdown+0xfe>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7d1b      	ldrb	r3, [r3, #20]
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	d003      	beq.n	8009b42 <tcp_close_shutdown+0x22>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	7d1b      	ldrb	r3, [r3, #20]
 8009b3e:	2b07      	cmp	r3, #7
 8009b40:	d16d      	bne.n	8009c1e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d104      	bne.n	8009b54 <tcp_close_shutdown+0x34>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009b52:	d064      	beq.n	8009c1e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	7e9b      	ldrb	r3, [r3, #26]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d106      	bne.n	8009b6e <tcp_close_shutdown+0x4e>
 8009b60:	4b5b      	ldr	r3, [pc, #364]	; (8009cd0 <tcp_close_shutdown+0x1b0>)
 8009b62:	f240 120f 	movw	r2, #271	; 0x10f
 8009b66:	495b      	ldr	r1, [pc, #364]	; (8009cd4 <tcp_close_shutdown+0x1b4>)
 8009b68:	485b      	ldr	r0, [pc, #364]	; (8009cd8 <tcp_close_shutdown+0x1b8>)
 8009b6a:	f009 fea9 	bl	80138c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b76:	687c      	ldr	r4, [r7, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1d1d      	adds	r5, r3, #4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8adb      	ldrh	r3, [r3, #22]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	8b12      	ldrh	r2, [r2, #24]
 8009b84:	9201      	str	r2, [sp, #4]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	462b      	mov	r3, r5
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	f004 fee6 	bl	800e95c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 fa23 	bl	800afdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009b96:	4b51      	ldr	r3, [pc, #324]	; (8009cdc <tcp_close_shutdown+0x1bc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d105      	bne.n	8009bac <tcp_close_shutdown+0x8c>
 8009ba0:	4b4e      	ldr	r3, [pc, #312]	; (8009cdc <tcp_close_shutdown+0x1bc>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	4a4d      	ldr	r2, [pc, #308]	; (8009cdc <tcp_close_shutdown+0x1bc>)
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	e013      	b.n	8009bd4 <tcp_close_shutdown+0xb4>
 8009bac:	4b4b      	ldr	r3, [pc, #300]	; (8009cdc <tcp_close_shutdown+0x1bc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	e00c      	b.n	8009bce <tcp_close_shutdown+0xae>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d104      	bne.n	8009bc8 <tcp_close_shutdown+0xa8>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	60da      	str	r2, [r3, #12]
 8009bc6:	e005      	b.n	8009bd4 <tcp_close_shutdown+0xb4>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1ef      	bne.n	8009bb4 <tcp_close_shutdown+0x94>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	4b41      	ldr	r3, [pc, #260]	; (8009ce0 <tcp_close_shutdown+0x1c0>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7d1b      	ldrb	r3, [r3, #20]
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d10c      	bne.n	8009c02 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	220a      	movs	r2, #10
 8009bec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009bee:	4b3d      	ldr	r3, [pc, #244]	; (8009ce4 <tcp_close_shutdown+0x1c4>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	4a3b      	ldr	r2, [pc, #236]	; (8009ce4 <tcp_close_shutdown+0x1c4>)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	f005 f8f6 	bl	800edec <tcp_timer_needed>
 8009c00:	e00b      	b.n	8009c1a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8009c02:	4b39      	ldr	r3, [pc, #228]	; (8009ce8 <tcp_close_shutdown+0x1c8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d102      	bne.n	8009c12 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8009c0c:	f003 fd46 	bl	800d69c <tcp_trigger_input_pcb_close>
 8009c10:	e003      	b.n	8009c1a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	2001      	movs	r0, #1
 8009c16:	f7fe fe1b 	bl	8008850 <memp_free>
        }
      }
      return ERR_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e053      	b.n	8009cc6 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	7d1b      	ldrb	r3, [r3, #20]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d03d      	beq.n	8009ca2 <tcp_close_shutdown+0x182>
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	dc47      	bgt.n	8009cba <tcp_close_shutdown+0x19a>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <tcp_close_shutdown+0x114>
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d02b      	beq.n	8009c8a <tcp_close_shutdown+0x16a>
 8009c32:	e042      	b.n	8009cba <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	8adb      	ldrh	r3, [r3, #22]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d021      	beq.n	8009c80 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c3c:	4b2b      	ldr	r3, [pc, #172]	; (8009cec <tcp_close_shutdown+0x1cc>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d105      	bne.n	8009c52 <tcp_close_shutdown+0x132>
 8009c46:	4b29      	ldr	r3, [pc, #164]	; (8009cec <tcp_close_shutdown+0x1cc>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	4a27      	ldr	r2, [pc, #156]	; (8009cec <tcp_close_shutdown+0x1cc>)
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	e013      	b.n	8009c7a <tcp_close_shutdown+0x15a>
 8009c52:	4b26      	ldr	r3, [pc, #152]	; (8009cec <tcp_close_shutdown+0x1cc>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60bb      	str	r3, [r7, #8]
 8009c58:	e00c      	b.n	8009c74 <tcp_close_shutdown+0x154>
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d104      	bne.n	8009c6e <tcp_close_shutdown+0x14e>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	e005      	b.n	8009c7a <tcp_close_shutdown+0x15a>
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	60bb      	str	r3, [r7, #8]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1ef      	bne.n	8009c5a <tcp_close_shutdown+0x13a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	2001      	movs	r0, #1
 8009c84:	f7fe fde4 	bl	8008850 <memp_free>
    break;
 8009c88:	e01c      	b.n	8009cc4 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff ff10 	bl	8009ab0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	4817      	ldr	r0, [pc, #92]	; (8009cf0 <tcp_close_shutdown+0x1d0>)
 8009c94:	f001 f9e4 	bl	800b060 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	2002      	movs	r0, #2
 8009c9c:	f7fe fdd8 	bl	8008850 <memp_free>
    break;
 8009ca0:	e010      	b.n	8009cc4 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	480d      	ldr	r0, [pc, #52]	; (8009cdc <tcp_close_shutdown+0x1bc>)
 8009ca6:	f001 f9db 	bl	800b060 <tcp_pcb_remove>
 8009caa:	4b0d      	ldr	r3, [pc, #52]	; (8009ce0 <tcp_close_shutdown+0x1c0>)
 8009cac:	2201      	movs	r2, #1
 8009cae:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009cb0:	6879      	ldr	r1, [r7, #4]
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	f7fe fdcc 	bl	8008850 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8009cb8:	e004      	b.n	8009cc4 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f81a 	bl	8009cf4 <tcp_close_shutdown_fin>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	e000      	b.n	8009cc6 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	0801520c 	.word	0x0801520c
 8009cd4:	08015288 	.word	0x08015288
 8009cd8:	08015248 	.word	0x08015248
 8009cdc:	20008dc4 	.word	0x20008dc4
 8009ce0:	20008dcc 	.word	0x20008dcc
 8009ce4:	20008dc8 	.word	0x20008dc8
 8009ce8:	20008e04 	.word	0x20008e04
 8009cec:	20008dbc 	.word	0x20008dbc
 8009cf0:	20008dc0 	.word	0x20008dc0

08009cf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <tcp_close_shutdown_fin+0x1c>
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <tcp_close_shutdown_fin+0xc8>)
 8009d04:	f240 124d 	movw	r2, #333	; 0x14d
 8009d08:	492d      	ldr	r1, [pc, #180]	; (8009dc0 <tcp_close_shutdown_fin+0xcc>)
 8009d0a:	482e      	ldr	r0, [pc, #184]	; (8009dc4 <tcp_close_shutdown_fin+0xd0>)
 8009d0c:	f009 fdd8 	bl	80138c0 <iprintf>

  switch (pcb->state) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7d1b      	ldrb	r3, [r3, #20]
 8009d14:	2b07      	cmp	r3, #7
 8009d16:	d020      	beq.n	8009d5a <tcp_close_shutdown_fin+0x66>
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	dc2b      	bgt.n	8009d74 <tcp_close_shutdown_fin+0x80>
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d002      	beq.n	8009d26 <tcp_close_shutdown_fin+0x32>
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d00d      	beq.n	8009d40 <tcp_close_shutdown_fin+0x4c>
 8009d24:	e026      	b.n	8009d74 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f003 fd42 	bl	800d7b0 <tcp_send_fin>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d11f      	bne.n	8009d78 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2205      	movs	r2, #5
 8009d3c:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009d3e:	e01b      	b.n	8009d78 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f003 fd35 	bl	800d7b0 <tcp_send_fin>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d114      	bne.n	8009d7c <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2205      	movs	r2, #5
 8009d56:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009d58:	e010      	b.n	8009d7c <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f003 fd28 	bl	800d7b0 <tcp_send_fin>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d109      	bne.n	8009d80 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2209      	movs	r2, #9
 8009d70:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009d72:	e005      	b.n	8009d80 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e01c      	b.n	8009db2 <tcp_close_shutdown_fin+0xbe>
    break;
 8009d78:	bf00      	nop
 8009d7a:	e002      	b.n	8009d82 <tcp_close_shutdown_fin+0x8e>
    break;
 8009d7c:	bf00      	nop
 8009d7e:	e000      	b.n	8009d82 <tcp_close_shutdown_fin+0x8e>
    break;
 8009d80:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d103      	bne.n	8009d92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f004 fb62 	bl	800e454 <tcp_output>
 8009d90:	e00d      	b.n	8009dae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9a:	d108      	bne.n	8009dae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7e9b      	ldrb	r3, [r3, #26]
 8009da0:	f043 0308 	orr.w	r3, r3, #8
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e001      	b.n	8009db2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	0801520c 	.word	0x0801520c
 8009dc0:	0801523c 	.word	0x0801523c
 8009dc4:	08015248 	.word	0x08015248

08009dc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	7d1b      	ldrb	r3, [r3, #20]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d006      	beq.n	8009de6 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	7e9b      	ldrb	r3, [r3, #26]
 8009ddc:	f043 0310 	orr.w	r3, r3, #16
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009de6:	2101      	movs	r1, #1
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fe99 	bl	8009b20 <tcp_close_shutdown>
 8009dee:	4603      	mov	r3, r0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	; 0x30
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7d1b      	ldrb	r3, [r3, #20]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d106      	bne.n	8009e18 <tcp_abandon+0x20>
 8009e0a:	4b4d      	ldr	r3, [pc, #308]	; (8009f40 <tcp_abandon+0x148>)
 8009e0c:	f240 12df 	movw	r2, #479	; 0x1df
 8009e10:	494c      	ldr	r1, [pc, #304]	; (8009f44 <tcp_abandon+0x14c>)
 8009e12:	484d      	ldr	r0, [pc, #308]	; (8009f48 <tcp_abandon+0x150>)
 8009e14:	f009 fd54 	bl	80138c0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	7d1b      	ldrb	r3, [r3, #20]
 8009e1c:	2b0a      	cmp	r3, #10
 8009e1e:	d108      	bne.n	8009e32 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	484a      	ldr	r0, [pc, #296]	; (8009f4c <tcp_abandon+0x154>)
 8009e24:	f001 f91c 	bl	800b060 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	f7fe fd10 	bl	8008850 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8009e30:	e081      	b.n	8009f36 <tcp_abandon+0x13e>
    int send_rst = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e4c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7d1b      	ldrb	r3, [r3, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d126      	bne.n	8009eaa <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	8adb      	ldrh	r3, [r3, #22]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d02e      	beq.n	8009ec2 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e64:	4b3a      	ldr	r3, [pc, #232]	; (8009f50 <tcp_abandon+0x158>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d105      	bne.n	8009e7a <tcp_abandon+0x82>
 8009e6e:	4b38      	ldr	r3, [pc, #224]	; (8009f50 <tcp_abandon+0x158>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	4a36      	ldr	r2, [pc, #216]	; (8009f50 <tcp_abandon+0x158>)
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	e013      	b.n	8009ea2 <tcp_abandon+0xaa>
 8009e7a:	4b35      	ldr	r3, [pc, #212]	; (8009f50 <tcp_abandon+0x158>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	e00c      	b.n	8009e9c <tcp_abandon+0xa4>
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d104      	bne.n	8009e96 <tcp_abandon+0x9e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68da      	ldr	r2, [r3, #12]
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	60da      	str	r2, [r3, #12]
 8009e94:	e005      	b.n	8009ea2 <tcp_abandon+0xaa>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1ef      	bne.n	8009e82 <tcp_abandon+0x8a>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	60da      	str	r2, [r3, #12]
 8009ea8:	e00b      	b.n	8009ec2 <tcp_abandon+0xca>
      send_rst = reset;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	8adb      	ldrh	r3, [r3, #22]
 8009eb2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	4827      	ldr	r0, [pc, #156]	; (8009f54 <tcp_abandon+0x15c>)
 8009eb8:	f001 f8d2 	bl	800b060 <tcp_pcb_remove>
 8009ebc:	4b26      	ldr	r3, [pc, #152]	; (8009f58 <tcp_abandon+0x160>)
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d004      	beq.n	8009ed4 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fe17 	bl	800ab02 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fe0e 	bl	800ab02 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d004      	beq.n	8009ef8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fe05 	bl	800ab02 <tcp_segs_free>
    if (send_rst) {
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00c      	beq.n	8009f18 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	1d19      	adds	r1, r3, #4
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8b1b      	ldrh	r3, [r3, #24]
 8009f08:	9301      	str	r3, [sp, #4]
 8009f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	6979      	ldr	r1, [r7, #20]
 8009f12:	69b8      	ldr	r0, [r7, #24]
 8009f14:	f004 fd22 	bl	800e95c <tcp_rst>
    last_state = pcb->state;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7d1b      	ldrb	r3, [r3, #20]
 8009f1c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	2001      	movs	r0, #1
 8009f22:	f7fe fc95 	bl	8008850 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <tcp_abandon+0x13e>
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	f06f 010c 	mvn.w	r1, #12
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	4798      	blx	r3
}
 8009f36:	bf00      	nop
 8009f38:	3728      	adds	r7, #40	; 0x28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	0801520c 	.word	0x0801520c
 8009f44:	080152a4 	.word	0x080152a4
 8009f48:	08015248 	.word	0x08015248
 8009f4c:	20008dc8 	.word	0x20008dc8
 8009f50:	20008dbc 	.word	0x20008dbc
 8009f54:	20008dc4 	.word	0x20008dc4
 8009f58:	20008dcc 	.word	0x20008dcc

08009f5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009f64:	2101      	movs	r1, #1
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff ff46 	bl	8009df8 <tcp_abandon>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009f82:	2304      	movs	r3, #4
 8009f84:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009f8c:	4b3c      	ldr	r3, [pc, #240]	; (800a080 <tcp_bind+0x10c>)
 8009f8e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <tcp_bind+0x28>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <tcp_bind+0x2e>
    return ERR_VAL;
 8009f9c:	f06f 0305 	mvn.w	r3, #5
 8009fa0:	e06a      	b.n	800a078 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	7d1b      	ldrb	r3, [r3, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <tcp_bind+0x4a>
 8009faa:	4b36      	ldr	r3, [pc, #216]	; (800a084 <tcp_bind+0x110>)
 8009fac:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009fb0:	4935      	ldr	r1, [pc, #212]	; (800a088 <tcp_bind+0x114>)
 8009fb2:	4836      	ldr	r0, [pc, #216]	; (800a08c <tcp_bind+0x118>)
 8009fb4:	f009 fc84 	bl	80138c0 <iprintf>
 8009fb8:	f06f 0305 	mvn.w	r3, #5
 8009fbc:	e05c      	b.n	800a078 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8009fbe:	88fb      	ldrh	r3, [r7, #6]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <tcp_bind+0x64>
    port = tcp_new_port();
 8009fc4:	f000 f9ca 	bl	800a35c <tcp_new_port>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d135      	bne.n	800a03e <tcp_bind+0xca>
      return ERR_BUF;
 8009fd2:	f06f 0301 	mvn.w	r3, #1
 8009fd6:	e04f      	b.n	800a078 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61fb      	str	r3, [r7, #28]
 8009fdc:	e02b      	b.n	800a036 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009fde:	4a2c      	ldr	r2, [pc, #176]	; (800a090 <tcp_bind+0x11c>)
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	e01e      	b.n	800a02a <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	8adb      	ldrh	r3, [r3, #22]
 8009ff0:	88fa      	ldrh	r2, [r7, #6]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d116      	bne.n	800a024 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009ff6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d010      	beq.n	800a01e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00c      	beq.n	800a01e <tcp_bind+0xaa>
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d102      	bne.n	800a024 <tcp_bind+0xb0>
              return ERR_USE;
 800a01e:	f06f 0307 	mvn.w	r3, #7
 800a022:	e029      	b.n	800a078 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1dd      	bne.n	8009fec <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	3301      	adds	r3, #1
 800a034:	61fb      	str	r3, [r7, #28]
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	dbcf      	blt.n	8009fde <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00c      	beq.n	800a05e <tcp_bind+0xea>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d008      	beq.n	800a05e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <tcp_bind+0xe4>
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	e000      	b.n	800a05a <tcp_bind+0xe6>
 800a058:	2300      	movs	r3, #0
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	88fa      	ldrh	r2, [r7, #6]
 800a062:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a064:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <tcp_bind+0x120>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	60da      	str	r2, [r3, #12]
 800a06c:	4a09      	ldr	r2, [pc, #36]	; (800a094 <tcp_bind+0x120>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	f004 febb 	bl	800edec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	080166c0 	.word	0x080166c0
 800a084:	0801520c 	.word	0x0801520c
 800a088:	080152d8 	.word	0x080152d8
 800a08c:	08015248 	.word	0x08015248
 800a090:	08016690 	.word	0x08016690
 800a094:	20008dbc 	.word	0x20008dbc

0800a098 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800a0a6:	68b8      	ldr	r0, [r7, #8]
 800a0a8:	f7ff ff58 	bl	8009f5c <tcp_abort>

  return ERR_ABRT;
 800a0ac:	f06f 030c 	mvn.w	r3, #12
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f806 	bl	800a0dc <tcp_listen_with_backlog_and_err>
 800a0d0:	4603      	mov	r3, r0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	7d1b      	ldrb	r3, [r3, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <tcp_listen_with_backlog_and_err+0x2e>
 800a0f6:	4b3f      	ldr	r3, [pc, #252]	; (800a1f4 <tcp_listen_with_backlog_and_err+0x118>)
 800a0f8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800a0fc:	493e      	ldr	r1, [pc, #248]	; (800a1f8 <tcp_listen_with_backlog_and_err+0x11c>)
 800a0fe:	483f      	ldr	r0, [pc, #252]	; (800a1fc <tcp_listen_with_backlog_and_err+0x120>)
 800a100:	f009 fbde 	bl	80138c0 <iprintf>
 800a104:	23f1      	movs	r3, #241	; 0xf1
 800a106:	76fb      	strb	r3, [r7, #27]
 800a108:	e069      	b.n	800a1de <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	7d1b      	ldrb	r3, [r3, #20]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d104      	bne.n	800a11c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a116:	23f7      	movs	r3, #247	; 0xf7
 800a118:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a11a:	e060      	b.n	800a1de <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a11c:	2002      	movs	r0, #2
 800a11e:	f7fe fb4b 	bl	80087b8 <memp_malloc>
 800a122:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800a12a:	23ff      	movs	r3, #255	; 0xff
 800a12c:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a12e:	e056      	b.n	800a1de <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	691a      	ldr	r2, [r3, #16]
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8ada      	ldrh	r2, [r3, #22]
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	2201      	movs	r2, #1
 800a144:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	7d5a      	ldrb	r2, [r3, #21]
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	7a1a      	ldrb	r2, [r3, #8]
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	7a9a      	ldrb	r2, [r3, #10]
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	7a5a      	ldrb	r2, [r3, #9]
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8adb      	ldrh	r3, [r3, #22]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d021      	beq.n	800a1ba <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a176:	4b22      	ldr	r3, [pc, #136]	; (800a200 <tcp_listen_with_backlog_and_err+0x124>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d105      	bne.n	800a18c <tcp_listen_with_backlog_and_err+0xb0>
 800a180:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <tcp_listen_with_backlog_and_err+0x124>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4a1e      	ldr	r2, [pc, #120]	; (800a200 <tcp_listen_with_backlog_and_err+0x124>)
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	e013      	b.n	800a1b4 <tcp_listen_with_backlog_and_err+0xd8>
 800a18c:	4b1c      	ldr	r3, [pc, #112]	; (800a200 <tcp_listen_with_backlog_and_err+0x124>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	e00c      	b.n	800a1ae <tcp_listen_with_backlog_and_err+0xd2>
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d104      	bne.n	800a1a8 <tcp_listen_with_backlog_and_err+0xcc>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	68da      	ldr	r2, [r3, #12]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	60da      	str	r2, [r3, #12]
 800a1a6:	e005      	b.n	800a1b4 <tcp_listen_with_backlog_and_err+0xd8>
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	617b      	str	r3, [r7, #20]
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1ef      	bne.n	800a194 <tcp_listen_with_backlog_and_err+0xb8>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800a1ba:	68f9      	ldr	r1, [r7, #12]
 800a1bc:	2001      	movs	r0, #1
 800a1be:	f7fe fb47 	bl	8008850 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	4a0f      	ldr	r2, [pc, #60]	; (800a204 <tcp_listen_with_backlog_and_err+0x128>)
 800a1c6:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <tcp_listen_with_backlog_and_err+0x12c>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	60da      	str	r2, [r3, #12]
 800a1d0:	4a0d      	ldr	r2, [pc, #52]	; (800a208 <tcp_listen_with_backlog_and_err+0x12c>)
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	f004 fe09 	bl	800edec <tcp_timer_needed>
  res = ERR_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	7efa      	ldrb	r2, [r7, #27]
 800a1e8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3720      	adds	r7, #32
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	0801520c 	.word	0x0801520c
 800a1f8:	08015300 	.word	0x08015300
 800a1fc:	08015248 	.word	0x08015248
 800a200:	20008dbc 	.word	0x20008dbc
 800a204:	0800a099 	.word	0x0800a099
 800a208:	20008dc0 	.word	0x20008dc0

0800a20c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a21c:	4413      	add	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a228:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a22c:	bf28      	it	cs
 800a22e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a232:	b292      	uxth	r2, r2
 800a234:	4413      	add	r3, r2
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	db08      	blt.n	800a250 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	e020      	b.n	800a292 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	dd03      	ble.n	800a266 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a264:	e014      	b.n	800a290 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a278:	d306      	bcc.n	800a288 <tcp_update_rcv_ann_wnd+0x7c>
 800a27a:	4b08      	ldr	r3, [pc, #32]	; (800a29c <tcp_update_rcv_ann_wnd+0x90>)
 800a27c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800a280:	4907      	ldr	r1, [pc, #28]	; (800a2a0 <tcp_update_rcv_ann_wnd+0x94>)
 800a282:	4808      	ldr	r0, [pc, #32]	; (800a2a4 <tcp_update_rcv_ann_wnd+0x98>)
 800a284:	f009 fb1c 	bl	80138c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a290:	2300      	movs	r3, #0
  }
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	0801520c 	.word	0x0801520c
 800a2a0:	08015324 	.word	0x08015324
 800a2a4:	08015248 	.word	0x08015248

0800a2a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7d1b      	ldrb	r3, [r3, #20]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d106      	bne.n	800a2ca <tcp_recved+0x22>
 800a2bc:	4b23      	ldr	r3, [pc, #140]	; (800a34c <tcp_recved+0xa4>)
 800a2be:	f240 321f 	movw	r2, #799	; 0x31f
 800a2c2:	4923      	ldr	r1, [pc, #140]	; (800a350 <tcp_recved+0xa8>)
 800a2c4:	4823      	ldr	r0, [pc, #140]	; (800a354 <tcp_recved+0xac>)
 800a2c6:	f009 fafb 	bl	80138c0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2ce:	887b      	ldrh	r3, [r7, #2]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a2e0:	d904      	bls.n	800a2ec <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a2e8:	851a      	strh	r2, [r3, #40]	; 0x28
 800a2ea:	e017      	b.n	800a31c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d113      	bne.n	800a31c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7d1b      	ldrb	r3, [r3, #20]
 800a2f8:	2b07      	cmp	r3, #7
 800a2fa:	d003      	beq.n	800a304 <tcp_recved+0x5c>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7d1b      	ldrb	r3, [r3, #20]
 800a300:	2b09      	cmp	r3, #9
 800a302:	d104      	bne.n	800a30e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a30a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a30c:	e006      	b.n	800a31c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <tcp_recved+0xa4>)
 800a310:	f240 322d 	movw	r2, #813	; 0x32d
 800a314:	4910      	ldr	r1, [pc, #64]	; (800a358 <tcp_recved+0xb0>)
 800a316:	480f      	ldr	r0, [pc, #60]	; (800a354 <tcp_recved+0xac>)
 800a318:	f009 fad2 	bl	80138c0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff ff75 	bl	800a20c <tcp_update_rcv_ann_wnd>
 800a322:	4603      	mov	r3, r0
 800a324:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a32c:	db09      	blt.n	800a342 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	7e9b      	ldrb	r3, [r3, #26]
 800a332:	f043 0302 	orr.w	r3, r3, #2
 800a336:	b2da      	uxtb	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f004 f889 	bl	800e454 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	0801520c 	.word	0x0801520c
 800a350:	08015340 	.word	0x08015340
 800a354:	08015248 	.word	0x08015248
 800a358:	08015368 	.word	0x08015368

0800a35c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a366:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <tcp_new_port+0x80>)
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	b291      	uxth	r1, r2
 800a36e:	4a1b      	ldr	r2, [pc, #108]	; (800a3dc <tcp_new_port+0x80>)
 800a370:	8011      	strh	r1, [r2, #0]
 800a372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a376:	4293      	cmp	r3, r2
 800a378:	d103      	bne.n	800a382 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a37a:	4b18      	ldr	r3, [pc, #96]	; (800a3dc <tcp_new_port+0x80>)
 800a37c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a380:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a382:	2300      	movs	r3, #0
 800a384:	71fb      	strb	r3, [r7, #7]
 800a386:	e01e      	b.n	800a3c6 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <tcp_new_port+0x84>)
 800a38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	e011      	b.n	800a3ba <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	8ada      	ldrh	r2, [r3, #22]
 800a39a:	4b10      	ldr	r3, [pc, #64]	; (800a3dc <tcp_new_port+0x80>)
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d108      	bne.n	800a3b4 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a3a2:	88bb      	ldrh	r3, [r7, #4]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	80bb      	strh	r3, [r7, #4]
 800a3a8:	88bb      	ldrh	r3, [r7, #4]
 800a3aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ae:	d3da      	bcc.n	800a366 <tcp_new_port+0xa>
          return 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	e00d      	b.n	800a3d0 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	603b      	str	r3, [r7, #0]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1ea      	bne.n	800a396 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	71fb      	strb	r3, [r7, #7]
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d9dd      	bls.n	800a388 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a3cc:	4b03      	ldr	r3, [pc, #12]	; (800a3dc <tcp_new_port+0x80>)
 800a3ce:	881b      	ldrh	r3, [r3, #0]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	2000001e 	.word	0x2000001e
 800a3e0:	08016690 	.word	0x08016690

0800a3e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a3e4:	b5b0      	push	{r4, r5, r7, lr}
 800a3e6:	b08c      	sub	sp, #48	; 0x30
 800a3e8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800a3ee:	4b97      	ldr	r3, [pc, #604]	; (800a64c <tcp_slowtmr+0x268>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	4a95      	ldr	r2, [pc, #596]	; (800a64c <tcp_slowtmr+0x268>)
 800a3f6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a3f8:	4b95      	ldr	r3, [pc, #596]	; (800a650 <tcp_slowtmr+0x26c>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	4b93      	ldr	r3, [pc, #588]	; (800a650 <tcp_slowtmr+0x26c>)
 800a402:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800a408:	4b92      	ldr	r3, [pc, #584]	; (800a654 <tcp_slowtmr+0x270>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a40e:	e227      	b.n	800a860 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	7d1b      	ldrb	r3, [r3, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <tcp_slowtmr+0x42>
 800a418:	4b8f      	ldr	r3, [pc, #572]	; (800a658 <tcp_slowtmr+0x274>)
 800a41a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a41e:	498f      	ldr	r1, [pc, #572]	; (800a65c <tcp_slowtmr+0x278>)
 800a420:	488f      	ldr	r0, [pc, #572]	; (800a660 <tcp_slowtmr+0x27c>)
 800a422:	f009 fa4d 	bl	80138c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	7d1b      	ldrb	r3, [r3, #20]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d106      	bne.n	800a43c <tcp_slowtmr+0x58>
 800a42e:	4b8a      	ldr	r3, [pc, #552]	; (800a658 <tcp_slowtmr+0x274>)
 800a430:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a434:	498b      	ldr	r1, [pc, #556]	; (800a664 <tcp_slowtmr+0x280>)
 800a436:	488a      	ldr	r0, [pc, #552]	; (800a660 <tcp_slowtmr+0x27c>)
 800a438:	f009 fa42 	bl	80138c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	7d1b      	ldrb	r3, [r3, #20]
 800a440:	2b0a      	cmp	r3, #10
 800a442:	d106      	bne.n	800a452 <tcp_slowtmr+0x6e>
 800a444:	4b84      	ldr	r3, [pc, #528]	; (800a658 <tcp_slowtmr+0x274>)
 800a446:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800a44a:	4987      	ldr	r1, [pc, #540]	; (800a668 <tcp_slowtmr+0x284>)
 800a44c:	4884      	ldr	r0, [pc, #528]	; (800a660 <tcp_slowtmr+0x27c>)
 800a44e:	f009 fa37 	bl	80138c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	7f5a      	ldrb	r2, [r3, #29]
 800a456:	4b7e      	ldr	r3, [pc, #504]	; (800a650 <tcp_slowtmr+0x26c>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d103      	bne.n	800a466 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800a464:	e1fc      	b.n	800a860 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a466:	4b7a      	ldr	r3, [pc, #488]	; (800a650 <tcp_slowtmr+0x26c>)
 800a468:	781a      	ldrb	r2, [r3, #0]
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	7d1b      	ldrb	r3, [r3, #20]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d108      	bne.n	800a490 <tcp_slowtmr+0xac>
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a484:	2b05      	cmp	r3, #5
 800a486:	d903      	bls.n	800a490 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800a488:	7ffb      	ldrb	r3, [r7, #31]
 800a48a:	3301      	adds	r3, #1
 800a48c:	77fb      	strb	r3, [r7, #31]
 800a48e:	e0a2      	b.n	800a5d6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a496:	2b0b      	cmp	r3, #11
 800a498:	d903      	bls.n	800a4a2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a49a:	7ffb      	ldrb	r3, [r7, #31]
 800a49c:	3301      	adds	r3, #1
 800a49e:	77fb      	strb	r3, [r7, #31]
 800a4a0:	e099      	b.n	800a5d6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d032      	beq.n	800a512 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	4a6d      	ldr	r2, [pc, #436]	; (800a66c <tcp_slowtmr+0x288>)
 800a4b6:	5cd3      	ldrb	r3, [r2, r3]
 800a4b8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a4c0:	7cfa      	ldrb	r2, [r7, #19]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d907      	bls.n	800a4d6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a4dc:	7cfa      	ldrb	r2, [r7, #19]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d879      	bhi.n	800a5d6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800a4e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4e4:	f004 fbc1 	bl	800ec6a <tcp_zero_window_probe>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d173      	bne.n	800a5d6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a4fc:	2b06      	cmp	r3, #6
 800a4fe:	d86a      	bhi.n	800a5d6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a506:	3301      	adds	r3, #1
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a510:	e061      	b.n	800a5d6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db08      	blt.n	800a52e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a522:	b29b      	uxth	r3, r3
 800a524:	3301      	adds	r3, #1
 800a526:	b29b      	uxth	r3, r3
 800a528:	b21a      	sxth	r2, r3
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d04f      	beq.n	800a5d6 <tcp_slowtmr+0x1f2>
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a542:	429a      	cmp	r2, r3
 800a544:	db47      	blt.n	800a5d6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	7d1b      	ldrb	r3, [r3, #20]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d018      	beq.n	800a580 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a554:	2b0c      	cmp	r3, #12
 800a556:	bf28      	it	cs
 800a558:	230c      	movcs	r3, #12
 800a55a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a562:	10db      	asrs	r3, r3, #3
 800a564:	b21b      	sxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a56e:	4413      	add	r3, r2
 800a570:	7dfa      	ldrb	r2, [r7, #23]
 800a572:	493f      	ldr	r1, [pc, #252]	; (800a670 <tcp_slowtmr+0x28c>)
 800a574:	5c8a      	ldrb	r2, [r1, r2]
 800a576:	4093      	lsls	r3, r2
 800a578:	b21a      	sxth	r2, r3
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	2200      	movs	r2, #0
 800a584:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a592:	4293      	cmp	r3, r2
 800a594:	bf28      	it	cs
 800a596:	4613      	movcs	r3, r2
 800a598:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800a59a:	8abb      	ldrh	r3, [r7, #20]
 800a59c:	085b      	lsrs	r3, r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d206      	bcs.n	800a5c6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800a5d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5d2:	f004 fa39 	bl	800ea48 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	7d1b      	ldrb	r3, [r3, #20]
 800a5da:	2b06      	cmp	r3, #6
 800a5dc:	d10f      	bne.n	800a5fe <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	7e9b      	ldrb	r3, [r3, #26]
 800a5e2:	f003 0310 	and.w	r3, r3, #16
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5ea:	4b18      	ldr	r3, [pc, #96]	; (800a64c <tcp_slowtmr+0x268>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	2b28      	cmp	r3, #40	; 0x28
 800a5f6:	d902      	bls.n	800a5fe <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a5f8:	7ffb      	ldrb	r3, [r7, #31]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	7a1b      	ldrb	r3, [r3, #8]
 800a602:	f003 0308 	and.w	r3, r3, #8
 800a606:	2b00      	cmp	r3, #0
 800a608:	d05d      	beq.n	800a6c6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d003      	beq.n	800a61a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800a616:	2b07      	cmp	r3, #7
 800a618:	d155      	bne.n	800a6c6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a61a:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <tcp_slowtmr+0x268>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a62e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a632:	4910      	ldr	r1, [pc, #64]	; (800a674 <tcp_slowtmr+0x290>)
 800a634:	fba1 1303 	umull	r1, r3, r1, r3
 800a638:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d91c      	bls.n	800a678 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	3301      	adds	r3, #1
 800a642:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800a644:	7fbb      	ldrb	r3, [r7, #30]
 800a646:	3301      	adds	r3, #1
 800a648:	77bb      	strb	r3, [r7, #30]
 800a64a:	e03c      	b.n	800a6c6 <tcp_slowtmr+0x2e2>
 800a64c:	20008db8 	.word	0x20008db8
 800a650:	20008dce 	.word	0x20008dce
 800a654:	20008dc4 	.word	0x20008dc4
 800a658:	0801520c 	.word	0x0801520c
 800a65c:	080153bc 	.word	0x080153bc
 800a660:	08015248 	.word	0x08015248
 800a664:	080153e8 	.word	0x080153e8
 800a668:	08015414 	.word	0x08015414
 800a66c:	08016688 	.word	0x08016688
 800a670:	08016678 	.word	0x08016678
 800a674:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a678:	4b97      	ldr	r3, [pc, #604]	; (800a8d8 <tcp_slowtmr+0x4f4>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a68e:	4618      	mov	r0, r3
 800a690:	4b92      	ldr	r3, [pc, #584]	; (800a8dc <tcp_slowtmr+0x4f8>)
 800a692:	fb00 f303 	mul.w	r3, r0, r3
 800a696:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800a698:	4991      	ldr	r1, [pc, #580]	; (800a8e0 <tcp_slowtmr+0x4fc>)
 800a69a:	fba1 1303 	umull	r1, r3, r1, r3
 800a69e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d910      	bls.n	800a6c6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800a6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6a6:	f004 faa3 	bl	800ebf0 <tcp_keepalive>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800a6ae:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d107      	bne.n	800a6c6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a6bc:	3301      	adds	r3, #1
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d016      	beq.n	800a6fc <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a6ce:	4b82      	ldr	r3, [pc, #520]	; (800a8d8 <tcp_slowtmr+0x4f4>)
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	1ad2      	subs	r2, r2, r3
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a6de:	4619      	mov	r1, r3
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	440b      	add	r3, r1
 800a6e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d307      	bcc.n	800a6fc <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fa06 	bl	800ab02 <tcp_segs_free>
      pcb->ooseq = NULL;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	7d1b      	ldrb	r3, [r3, #20]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d109      	bne.n	800a718 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a704:	4b74      	ldr	r3, [pc, #464]	; (800a8d8 <tcp_slowtmr+0x4f4>)
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b28      	cmp	r3, #40	; 0x28
 800a710:	d902      	bls.n	800a718 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a712:	7ffb      	ldrb	r3, [r7, #31]
 800a714:	3301      	adds	r3, #1
 800a716:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	7d1b      	ldrb	r3, [r3, #20]
 800a71c:	2b09      	cmp	r3, #9
 800a71e:	d109      	bne.n	800a734 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a720:	4b6d      	ldr	r3, [pc, #436]	; (800a8d8 <tcp_slowtmr+0x4f4>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	2bf0      	cmp	r3, #240	; 0xf0
 800a72c:	d902      	bls.n	800a734 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800a72e:	7ffb      	ldrb	r3, [r7, #31]
 800a730:	3301      	adds	r3, #1
 800a732:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a734:	7ffb      	ldrb	r3, [r7, #31]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d05d      	beq.n	800a7f6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a740:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a744:	f000 fc4a 	bl	800afdc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d010      	beq.n	800a770 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a74e:	4b65      	ldr	r3, [pc, #404]	; (800a8e4 <tcp_slowtmr+0x500>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a754:	429a      	cmp	r2, r3
 800a756:	d106      	bne.n	800a766 <tcp_slowtmr+0x382>
 800a758:	4b63      	ldr	r3, [pc, #396]	; (800a8e8 <tcp_slowtmr+0x504>)
 800a75a:	f240 4289 	movw	r2, #1161	; 0x489
 800a75e:	4963      	ldr	r1, [pc, #396]	; (800a8ec <tcp_slowtmr+0x508>)
 800a760:	4863      	ldr	r0, [pc, #396]	; (800a8f0 <tcp_slowtmr+0x50c>)
 800a762:	f009 f8ad 	bl	80138c0 <iprintf>
        prev->next = pcb->next;
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	68da      	ldr	r2, [r3, #12]
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	60da      	str	r2, [r3, #12]
 800a76e:	e00f      	b.n	800a790 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a770:	4b5c      	ldr	r3, [pc, #368]	; (800a8e4 <tcp_slowtmr+0x500>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a776:	429a      	cmp	r2, r3
 800a778:	d006      	beq.n	800a788 <tcp_slowtmr+0x3a4>
 800a77a:	4b5b      	ldr	r3, [pc, #364]	; (800a8e8 <tcp_slowtmr+0x504>)
 800a77c:	f240 428d 	movw	r2, #1165	; 0x48d
 800a780:	495c      	ldr	r1, [pc, #368]	; (800a8f4 <tcp_slowtmr+0x510>)
 800a782:	485b      	ldr	r0, [pc, #364]	; (800a8f0 <tcp_slowtmr+0x50c>)
 800a784:	f009 f89c 	bl	80138c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	4a55      	ldr	r2, [pc, #340]	; (800a8e4 <tcp_slowtmr+0x500>)
 800a78e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a790:	7fbb      	ldrb	r3, [r7, #30]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d010      	beq.n	800a7b8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a79e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	1d1d      	adds	r5, r3, #4
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	8adb      	ldrh	r3, [r3, #22]
 800a7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7aa:	8b12      	ldrh	r2, [r2, #24]
 800a7ac:	9201      	str	r2, [sp, #4]
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	f004 f8d2 	bl	800e95c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	7d1b      	ldrb	r3, [r3, #20]
 800a7c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f7fe f83d 	bl	8008850 <memp_free>

      tcp_active_pcbs_changed = 0;
 800a7d6:	4b48      	ldr	r3, [pc, #288]	; (800a8f8 <tcp_slowtmr+0x514>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <tcp_slowtmr+0x408>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f06f 010c 	mvn.w	r1, #12
 800a7e8:	68b8      	ldr	r0, [r7, #8]
 800a7ea:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a7ec:	4b42      	ldr	r3, [pc, #264]	; (800a8f8 <tcp_slowtmr+0x514>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d035      	beq.n	800a860 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800a7f4:	e606      	b.n	800a404 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	7edb      	ldrb	r3, [r3, #27]
 800a804:	3301      	adds	r3, #1
 800a806:	b2da      	uxtb	r2, r3
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	7eda      	ldrb	r2, [r3, #27]
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	7f1b      	ldrb	r3, [r3, #28]
 800a814:	429a      	cmp	r2, r3
 800a816:	d323      	bcc.n	800a860 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	2200      	movs	r2, #0
 800a81c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a81e:	4b36      	ldr	r3, [pc, #216]	; (800a8f8 <tcp_slowtmr+0x514>)
 800a820:	2200      	movs	r2, #0
 800a822:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <tcp_slowtmr+0x460>
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a834:	6a3a      	ldr	r2, [r7, #32]
 800a836:	6912      	ldr	r2, [r2, #16]
 800a838:	6a39      	ldr	r1, [r7, #32]
 800a83a:	4610      	mov	r0, r2
 800a83c:	4798      	blx	r3
 800a83e:	4603      	mov	r3, r0
 800a840:	777b      	strb	r3, [r7, #29]
 800a842:	e001      	b.n	800a848 <tcp_slowtmr+0x464>
 800a844:	2300      	movs	r3, #0
 800a846:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800a848:	4b2b      	ldr	r3, [pc, #172]	; (800a8f8 <tcp_slowtmr+0x514>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d000      	beq.n	800a852 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800a850:	e5d8      	b.n	800a404 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a852:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800a85a:	6a38      	ldr	r0, [r7, #32]
 800a85c:	f003 fdfa 	bl	800e454 <tcp_output>
  while (pcb != NULL) {
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	2b00      	cmp	r3, #0
 800a864:	f47f add4 	bne.w	800a410 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800a86c:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <tcp_slowtmr+0x518>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a872:	e068      	b.n	800a946 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	7d1b      	ldrb	r3, [r3, #20]
 800a878:	2b0a      	cmp	r3, #10
 800a87a:	d006      	beq.n	800a88a <tcp_slowtmr+0x4a6>
 800a87c:	4b1a      	ldr	r3, [pc, #104]	; (800a8e8 <tcp_slowtmr+0x504>)
 800a87e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a882:	491f      	ldr	r1, [pc, #124]	; (800a900 <tcp_slowtmr+0x51c>)
 800a884:	481a      	ldr	r0, [pc, #104]	; (800a8f0 <tcp_slowtmr+0x50c>)
 800a886:	f009 f81b 	bl	80138c0 <iprintf>
    pcb_remove = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a88e:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <tcp_slowtmr+0x4f4>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	2bf0      	cmp	r3, #240	; 0xf0
 800a89a:	d902      	bls.n	800a8a2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800a89c:	7ffb      	ldrb	r3, [r7, #31]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a8a2:	7ffb      	ldrb	r3, [r7, #31]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d049      	beq.n	800a93c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a8a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8aa:	f000 fb97 	bl	800afdc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d029      	beq.n	800a908 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a8b4:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <tcp_slowtmr+0x518>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d106      	bne.n	800a8cc <tcp_slowtmr+0x4e8>
 800a8be:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <tcp_slowtmr+0x504>)
 800a8c0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a8c4:	490f      	ldr	r1, [pc, #60]	; (800a904 <tcp_slowtmr+0x520>)
 800a8c6:	480a      	ldr	r0, [pc, #40]	; (800a8f0 <tcp_slowtmr+0x50c>)
 800a8c8:	f008 fffa 	bl	80138c0 <iprintf>
        prev->next = pcb->next;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	60da      	str	r2, [r3, #12]
 800a8d4:	e028      	b.n	800a928 <tcp_slowtmr+0x544>
 800a8d6:	bf00      	nop
 800a8d8:	20008db8 	.word	0x20008db8
 800a8dc:	000124f8 	.word	0x000124f8
 800a8e0:	10624dd3 	.word	0x10624dd3
 800a8e4:	20008dc4 	.word	0x20008dc4
 800a8e8:	0801520c 	.word	0x0801520c
 800a8ec:	08015444 	.word	0x08015444
 800a8f0:	08015248 	.word	0x08015248
 800a8f4:	08015470 	.word	0x08015470
 800a8f8:	20008dcc 	.word	0x20008dcc
 800a8fc:	20008dc8 	.word	0x20008dc8
 800a900:	0801549c 	.word	0x0801549c
 800a904:	080154cc 	.word	0x080154cc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a908:	4b13      	ldr	r3, [pc, #76]	; (800a958 <tcp_slowtmr+0x574>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90e:	429a      	cmp	r2, r3
 800a910:	d006      	beq.n	800a920 <tcp_slowtmr+0x53c>
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <tcp_slowtmr+0x578>)
 800a914:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800a918:	4911      	ldr	r1, [pc, #68]	; (800a960 <tcp_slowtmr+0x57c>)
 800a91a:	4812      	ldr	r0, [pc, #72]	; (800a964 <tcp_slowtmr+0x580>)
 800a91c:	f008 ffd0 	bl	80138c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	4a0c      	ldr	r2, [pc, #48]	; (800a958 <tcp_slowtmr+0x574>)
 800a926:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a932:	69b9      	ldr	r1, [r7, #24]
 800a934:	2001      	movs	r0, #1
 800a936:	f7fd ff8b 	bl	8008850 <memp_free>
 800a93a:	e004      	b.n	800a946 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d193      	bne.n	800a874 <tcp_slowtmr+0x490>
    }
  }
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	3728      	adds	r7, #40	; 0x28
 800a952:	46bd      	mov	sp, r7
 800a954:	bdb0      	pop	{r4, r5, r7, pc}
 800a956:	bf00      	nop
 800a958:	20008dc8 	.word	0x20008dc8
 800a95c:	0801520c 	.word	0x0801520c
 800a960:	080154f4 	.word	0x080154f4
 800a964:	08015248 	.word	0x08015248

0800a968 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a96e:	4b2d      	ldr	r3, [pc, #180]	; (800aa24 <tcp_fasttmr+0xbc>)
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	b2da      	uxtb	r2, r3
 800a976:	4b2b      	ldr	r3, [pc, #172]	; (800aa24 <tcp_fasttmr+0xbc>)
 800a978:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a97a:	4b2b      	ldr	r3, [pc, #172]	; (800aa28 <tcp_fasttmr+0xc0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a980:	e048      	b.n	800aa14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7f5a      	ldrb	r2, [r3, #29]
 800a986:	4b27      	ldr	r3, [pc, #156]	; (800aa24 <tcp_fasttmr+0xbc>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d03f      	beq.n	800aa0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a98e:	4b25      	ldr	r3, [pc, #148]	; (800aa24 <tcp_fasttmr+0xbc>)
 800a990:	781a      	ldrb	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7e9b      	ldrb	r3, [r3, #26]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d010      	beq.n	800a9c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	7e9b      	ldrb	r3, [r3, #26]
 800a9a6:	f043 0302 	orr.w	r3, r3, #2
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f003 fd4f 	bl	800e454 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7e9b      	ldrb	r3, [r3, #26]
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	7e9b      	ldrb	r3, [r3, #26]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d009      	beq.n	800a9e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7e9b      	ldrb	r3, [r3, #26]
 800a9d4:	f023 0308 	bic.w	r3, r3, #8
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff f988 	bl	8009cf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a9f2:	4b0e      	ldr	r3, [pc, #56]	; (800aa2c <tcp_fasttmr+0xc4>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f819 	bl	800aa30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a9fe:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <tcp_fasttmr+0xc4>)
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d000      	beq.n	800aa08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800aa06:	e7b8      	b.n	800a97a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	e002      	b.n	800aa14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1b3      	bne.n	800a982 <tcp_fasttmr+0x1a>
    }
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20008dce 	.word	0x20008dce
 800aa28:	20008dc4 	.word	0x20008dc4
 800aa2c:	20008dcc 	.word	0x20008dcc

0800aa30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800aa30:	b590      	push	{r4, r7, lr}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa3c:	7b5b      	ldrb	r3, [r3, #13]
 800aa3e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa44:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00b      	beq.n	800aa6e <tcp_process_refused_data+0x3e>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6918      	ldr	r0, [r3, #16]
 800aa60:	2300      	movs	r3, #0
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	47a0      	blx	r4
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]
 800aa6c:	e007      	b.n	800aa7e <tcp_process_refused_data+0x4e>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	2000      	movs	r0, #0
 800aa76:	f000 f89b 	bl	800abb0 <tcp_recv_null>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800aa7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d12a      	bne.n	800aadc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	f003 0320 	and.w	r3, r3, #32
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d033      	beq.n	800aaf8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa98:	d005      	beq.n	800aaa6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <tcp_process_refused_data+0x98>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6918      	ldr	r0, [r3, #16]
 800aaba:	2300      	movs	r3, #0
 800aabc:	2200      	movs	r2, #0
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	47a0      	blx	r4
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]
 800aac6:	e001      	b.n	800aacc <tcp_process_refused_data+0x9c>
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800aacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aad0:	f113 0f0d 	cmn.w	r3, #13
 800aad4:	d110      	bne.n	800aaf8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800aad6:	f06f 030c 	mvn.w	r3, #12
 800aada:	e00e      	b.n	800aafa <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800aadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae0:	f113 0f0d 	cmn.w	r3, #13
 800aae4:	d102      	bne.n	800aaec <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aae6:	f06f 030c 	mvn.w	r3, #12
 800aaea:	e006      	b.n	800aafa <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800aaf2:	f06f 0304 	mvn.w	r3, #4
 800aaf6:	e000      	b.n	800aafa <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd90      	pop	{r4, r7, pc}

0800ab02 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ab0a:	e007      	b.n	800ab1c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f80a 	bl	800ab2c <tcp_seg_free>
    seg = next;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1f4      	bne.n	800ab0c <tcp_segs_free+0xa>
  }
}
 800ab22:	bf00      	nop
 800ab24:	bf00      	nop
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00c      	beq.n	800ab54 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fbc0 	bl	80092cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ab4c:	6879      	ldr	r1, [r7, #4]
 800ab4e:	2003      	movs	r0, #3
 800ab50:	f7fd fe7e 	bl	8008850 <memp_free>
  }
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	78fa      	ldrb	r2, [r7, #3]
 800ab6c:	755a      	strb	r2, [r3, #21]
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bc80      	pop	{r7}
 800ab76:	4770      	bx	lr

0800ab78 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ab80:	2003      	movs	r0, #3
 800ab82:	f7fd fe19 	bl	80087b8 <memp_malloc>
 800ab86:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <tcp_seg_copy+0x1a>
    return NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e00a      	b.n	800aba8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ab92:	2210      	movs	r2, #16
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f008 fda0 	bl	80136dc <memcpy>
  pbuf_ref(cseg->p);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe fc3d 	bl	8009420 <pbuf_ref>
  return cseg;
 800aba6:	68fb      	ldr	r3, [r7, #12]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d009      	beq.n	800abd8 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	891b      	ldrh	r3, [r3, #8]
 800abc8:	4619      	mov	r1, r3
 800abca:	68b8      	ldr	r0, [r7, #8]
 800abcc:	f7ff fb6c 	bl	800a2a8 <tcp_recved>
    pbuf_free(p);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7fe fb7b 	bl	80092cc <pbuf_free>
 800abd6:	e008      	b.n	800abea <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800abd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800abe0:	68b8      	ldr	r0, [r7, #8]
 800abe2:	f7ff f8f1 	bl	8009dc8 <tcp_close>
 800abe6:	4603      	mov	r3, r0
 800abe8:	e000      	b.n	800abec <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800abfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	db01      	blt.n	800ac0a <tcp_kill_prio+0x16>
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	e000      	b.n	800ac0c <tcp_kill_prio+0x18>
 800ac0a:	237f      	movs	r3, #127	; 0x7f
 800ac0c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac16:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <tcp_kill_prio+0x7c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	e01a      	b.n	800ac54 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	7d5b      	ldrb	r3, [r3, #21]
 800ac22:	7afa      	ldrb	r2, [r7, #11]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d312      	bcc.n	800ac4e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ac28:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <tcp_kill_prio+0x80>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d80a      	bhi.n	800ac4e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800ac38:	4b0e      	ldr	r3, [pc, #56]	; (800ac74 <tcp_kill_prio+0x80>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	6a1b      	ldr	r3, [r3, #32]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	7d5b      	ldrb	r3, [r3, #21]
 800ac4c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e1      	bne.n	800ac1e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ac60:	6938      	ldr	r0, [r7, #16]
 800ac62:	f7ff f97b 	bl	8009f5c <tcp_abort>
  }
}
 800ac66:	bf00      	nop
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20008dc4 	.word	0x20008dc4
 800ac74:	20008db8 	.word	0x20008db8

0800ac78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d009      	beq.n	800ac9c <tcp_kill_state+0x24>
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	2b09      	cmp	r3, #9
 800ac8c:	d006      	beq.n	800ac9c <tcp_kill_state+0x24>
 800ac8e:	4b1a      	ldr	r3, [pc, #104]	; (800acf8 <tcp_kill_state+0x80>)
 800ac90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ac94:	4919      	ldr	r1, [pc, #100]	; (800acfc <tcp_kill_state+0x84>)
 800ac96:	481a      	ldr	r0, [pc, #104]	; (800ad00 <tcp_kill_state+0x88>)
 800ac98:	f008 fe12 	bl	80138c0 <iprintf>

  inactivity = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aca4:	4b17      	ldr	r3, [pc, #92]	; (800ad04 <tcp_kill_state+0x8c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	617b      	str	r3, [r7, #20]
 800acaa:	e017      	b.n	800acdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	7d1b      	ldrb	r3, [r3, #20]
 800acb0:	79fa      	ldrb	r2, [r7, #7]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d10f      	bne.n	800acd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800acb6:	4b14      	ldr	r3, [pc, #80]	; (800ad08 <tcp_kill_state+0x90>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d807      	bhi.n	800acd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800acc6:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <tcp_kill_state+0x90>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e4      	bne.n	800acac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ace8:	2100      	movs	r1, #0
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f7ff f884 	bl	8009df8 <tcp_abandon>
  }
}
 800acf0:	bf00      	nop
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	0801520c 	.word	0x0801520c
 800acfc:	0801551c 	.word	0x0801551c
 800ad00:	08015248 	.word	0x08015248
 800ad04:	20008dc4 	.word	0x20008dc4
 800ad08:	20008db8 	.word	0x20008db8

0800ad0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad1a:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <tcp_kill_timewait+0x58>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	e012      	b.n	800ad48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad22:	4b11      	ldr	r3, [pc, #68]	; (800ad68 <tcp_kill_timewait+0x5c>)
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d807      	bhi.n	800ad42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ad32:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <tcp_kill_timewait+0x5c>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e9      	bne.n	800ad22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ad54:	68b8      	ldr	r0, [r7, #8]
 800ad56:	f7ff f901 	bl	8009f5c <tcp_abort>
  }
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20008dc8 	.word	0x20008dc8
 800ad68:	20008db8 	.word	0x20008db8

0800ad6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad76:	2001      	movs	r0, #1
 800ad78:	f7fd fd1e 	bl	80087b8 <memp_malloc>
 800ad7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d124      	bne.n	800adce <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ad84:	f7ff ffc2 	bl	800ad0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad88:	2001      	movs	r0, #1
 800ad8a:	f7fd fd15 	bl	80087b8 <memp_malloc>
 800ad8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d11b      	bne.n	800adce <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ad96:	2009      	movs	r0, #9
 800ad98:	f7ff ff6e 	bl	800ac78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	f7fd fd0b 	bl	80087b8 <memp_malloc>
 800ada2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d111      	bne.n	800adce <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800adaa:	2008      	movs	r0, #8
 800adac:	f7ff ff64 	bl	800ac78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800adb0:	2001      	movs	r0, #1
 800adb2:	f7fd fd01 	bl	80087b8 <memp_malloc>
 800adb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d107      	bne.n	800adce <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff ff17 	bl	800abf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800adc6:	2001      	movs	r0, #1
 800adc8:	f7fd fcf6 	bl	80087b8 <memp_malloc>
 800adcc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03f      	beq.n	800ae54 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800add4:	2298      	movs	r2, #152	; 0x98
 800add6:	2100      	movs	r1, #0
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f008 fc8d 	bl	80136f8 <memset>
    pcb->prio = prio;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	79fa      	ldrb	r2, [r7, #7]
 800ade2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800adea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800adf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	22ff      	movs	r2, #255	; 0xff
 800ae02:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ae0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2206      	movs	r2, #6
 800ae10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2206      	movs	r2, #6
 800ae18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <tcp_alloc+0xf4>)
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ae32:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <tcp_alloc+0xf8>)
 800ae34:	781a      	ldrb	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800ae40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4a08      	ldr	r2, [pc, #32]	; (800ae68 <tcp_alloc+0xfc>)
 800ae48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a07      	ldr	r2, [pc, #28]	; (800ae6c <tcp_alloc+0x100>)
 800ae50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ae54:	68fb      	ldr	r3, [r7, #12]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20008db8 	.word	0x20008db8
 800ae64:	20008dce 	.word	0x20008dce
 800ae68:	0800abb1 	.word	0x0800abb1
 800ae6c:	006ddd00 	.word	0x006ddd00

0800ae70 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ae74:	2040      	movs	r0, #64	; 0x40
 800ae76:	f7ff ff79 	bl	800ad6c <tcp_alloc>
 800ae7a:	4603      	mov	r3, r0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	611a      	str	r2, [r3, #16]
  }
}
 800ae96:	bf00      	nop
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bc80      	pop	{r7}
 800ae9e:	4770      	bx	lr

0800aea0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00e      	beq.n	800aece <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7d1b      	ldrb	r3, [r3, #20]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d106      	bne.n	800aec6 <tcp_recv+0x26>
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <tcp_recv+0x38>)
 800aeba:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800aebe:	4907      	ldr	r1, [pc, #28]	; (800aedc <tcp_recv+0x3c>)
 800aec0:	4807      	ldr	r0, [pc, #28]	; (800aee0 <tcp_recv+0x40>)
 800aec2:	f008 fcfd 	bl	80138c0 <iprintf>
    pcb->recv = recv;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	0801520c 	.word	0x0801520c
 800aedc:	0801552c 	.word	0x0801552c
 800aee0:	08015248 	.word	0x08015248

0800aee4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00d      	beq.n	800af10 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7d1b      	ldrb	r3, [r3, #20]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d106      	bne.n	800af0a <tcp_sent+0x26>
 800aefc:	4b06      	ldr	r3, [pc, #24]	; (800af18 <tcp_sent+0x34>)
 800aefe:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800af02:	4906      	ldr	r1, [pc, #24]	; (800af1c <tcp_sent+0x38>)
 800af04:	4806      	ldr	r0, [pc, #24]	; (800af20 <tcp_sent+0x3c>)
 800af06:	f008 fcdb 	bl	80138c0 <iprintf>
    pcb->sent = sent;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	0801520c 	.word	0x0801520c
 800af1c:	08015554 	.word	0x08015554
 800af20:	08015248 	.word	0x08015248

0800af24 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00e      	beq.n	800af52 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	7d1b      	ldrb	r3, [r3, #20]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d106      	bne.n	800af4a <tcp_err+0x26>
 800af3c:	4b07      	ldr	r3, [pc, #28]	; (800af5c <tcp_err+0x38>)
 800af3e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800af42:	4907      	ldr	r1, [pc, #28]	; (800af60 <tcp_err+0x3c>)
 800af44:	4807      	ldr	r0, [pc, #28]	; (800af64 <tcp_err+0x40>)
 800af46:	f008 fcbb 	bl	80138c0 <iprintf>
    pcb->errf = err;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	0801520c 	.word	0x0801520c
 800af60:	0801557c 	.word	0x0801557c
 800af64:	08015248 	.word	0x08015248

0800af68 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <tcp_accept+0x22>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7d1b      	ldrb	r3, [r3, #20]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d104      	bne.n	800af8a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	619a      	str	r2, [r3, #24]
  }
}
 800af8a:	bf00      	nop
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	bc80      	pop	{r7}
 800af92:	4770      	bx	lr

0800af94 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	4613      	mov	r3, r2
 800afa0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	7d1b      	ldrb	r3, [r3, #20]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d106      	bne.n	800afb8 <tcp_poll+0x24>
 800afaa:	4b09      	ldr	r3, [pc, #36]	; (800afd0 <tcp_poll+0x3c>)
 800afac:	f240 7203 	movw	r2, #1795	; 0x703
 800afb0:	4908      	ldr	r1, [pc, #32]	; (800afd4 <tcp_poll+0x40>)
 800afb2:	4809      	ldr	r0, [pc, #36]	; (800afd8 <tcp_poll+0x44>)
 800afb4:	f008 fc84 	bl	80138c0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	79fa      	ldrb	r2, [r7, #7]
 800afc4:	771a      	strb	r2, [r3, #28]
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	0801520c 	.word	0x0801520c
 800afd4:	080155a4 	.word	0x080155a4
 800afd8:	08015248 	.word	0x08015248

0800afdc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7d1b      	ldrb	r3, [r3, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d034      	beq.n	800b056 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800aff0:	2b0a      	cmp	r3, #10
 800aff2:	d030      	beq.n	800b056 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d02c      	beq.n	800b056 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe f95f 	bl	80092cc <pbuf_free>
      pcb->refused_data = NULL;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff fd72 	bl	800ab02 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b02a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fd66 	bl	800ab02 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fd61 	bl	800ab02 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	669a      	str	r2, [r3, #104]	; 0x68
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d105      	bne.n	800b080 <tcp_pcb_remove+0x20>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e013      	b.n	800b0a8 <tcp_pcb_remove+0x48>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	e00c      	b.n	800b0a2 <tcp_pcb_remove+0x42>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d104      	bne.n	800b09c <tcp_pcb_remove+0x3c>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	60da      	str	r2, [r3, #12]
 800b09a:	e005      	b.n	800b0a8 <tcp_pcb_remove+0x48>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1ef      	bne.n	800b088 <tcp_pcb_remove+0x28>
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b0ae:	6838      	ldr	r0, [r7, #0]
 800b0b0:	f7ff ff94 	bl	800afdc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b0a      	cmp	r3, #10
 800b0ba:	d013      	beq.n	800b0e4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d00f      	beq.n	800b0e4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	7e9b      	ldrb	r3, [r3, #26]
 800b0c8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	7e9b      	ldrb	r3, [r3, #26]
 800b0d4:	f043 0302 	orr.w	r3, r3, #2
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b0de:	6838      	ldr	r0, [r7, #0]
 800b0e0:	f003 f9b8 	bl	800e454 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	7d1b      	ldrb	r3, [r3, #20]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d020      	beq.n	800b12e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d006      	beq.n	800b102 <tcp_pcb_remove+0xa2>
 800b0f4:	4b13      	ldr	r3, [pc, #76]	; (800b144 <tcp_pcb_remove+0xe4>)
 800b0f6:	f240 7253 	movw	r2, #1875	; 0x753
 800b0fa:	4913      	ldr	r1, [pc, #76]	; (800b148 <tcp_pcb_remove+0xe8>)
 800b0fc:	4813      	ldr	r0, [pc, #76]	; (800b14c <tcp_pcb_remove+0xec>)
 800b0fe:	f008 fbdf 	bl	80138c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d006      	beq.n	800b118 <tcp_pcb_remove+0xb8>
 800b10a:	4b0e      	ldr	r3, [pc, #56]	; (800b144 <tcp_pcb_remove+0xe4>)
 800b10c:	f240 7254 	movw	r2, #1876	; 0x754
 800b110:	490f      	ldr	r1, [pc, #60]	; (800b150 <tcp_pcb_remove+0xf0>)
 800b112:	480e      	ldr	r0, [pc, #56]	; (800b14c <tcp_pcb_remove+0xec>)
 800b114:	f008 fbd4 	bl	80138c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d006      	beq.n	800b12e <tcp_pcb_remove+0xce>
 800b120:	4b08      	ldr	r3, [pc, #32]	; (800b144 <tcp_pcb_remove+0xe4>)
 800b122:	f240 7256 	movw	r2, #1878	; 0x756
 800b126:	490b      	ldr	r1, [pc, #44]	; (800b154 <tcp_pcb_remove+0xf4>)
 800b128:	4808      	ldr	r0, [pc, #32]	; (800b14c <tcp_pcb_remove+0xec>)
 800b12a:	f008 fbc9 	bl	80138c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2200      	movs	r2, #0
 800b132:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2200      	movs	r2, #0
 800b138:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b13a:	bf00      	nop
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	0801520c 	.word	0x0801520c
 800b148:	080155c4 	.word	0x080155c4
 800b14c:	08015248 	.word	0x08015248
 800b150:	080155dc 	.word	0x080155dc
 800b154:	080155f8 	.word	0x080155f8

0800b158 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b160:	4b06      	ldr	r3, [pc, #24]	; (800b17c <tcp_next_iss+0x24>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	4b06      	ldr	r3, [pc, #24]	; (800b180 <tcp_next_iss+0x28>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4413      	add	r3, r2
 800b16a:	4a04      	ldr	r2, [pc, #16]	; (800b17c <tcp_next_iss+0x24>)
 800b16c:	6013      	str	r3, [r2, #0]
  return iss;
 800b16e:	4b03      	ldr	r3, [pc, #12]	; (800b17c <tcp_next_iss+0x24>)
 800b170:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	bc80      	pop	{r7}
 800b17a:	4770      	bx	lr
 800b17c:	20000020 	.word	0x20000020
 800b180:	20008db8 	.word	0x20008db8

0800b184 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	6039      	str	r1, [r7, #0]
 800b18e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800b190:	6838      	ldr	r0, [r7, #0]
 800b192:	f005 fb53 	bl	801083c <ip4_route>
 800b196:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	e010      	b.n	800b1c4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1a6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b1a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d008      	beq.n	800b1c2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800b1b0:	897b      	ldrh	r3, [r7, #10]
 800b1b2:	3b28      	subs	r3, #40	; 0x28
 800b1b4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b1b6:	893a      	ldrh	r2, [r7, #8]
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bf28      	it	cs
 800b1be:	4613      	movcs	r3, r2
 800b1c0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b1da:	e011      	b.n	800b200 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d108      	bne.n	800b1fa <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7fe feb4 	bl	8009f5c <tcp_abort>
      pcb = next;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	e002      	b.n	800b200 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1ea      	bne.n	800b1dc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800b206:	bf00      	nop
 800b208:	bf00      	nop
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d02c      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x6a>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d028      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b228:	4b16      	ldr	r3, [pc, #88]	; (800b284 <tcp_netif_ip_addr_changed+0x74>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff ffcc 	bl	800b1cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b234:	4b14      	ldr	r3, [pc, #80]	; (800b288 <tcp_netif_ip_addr_changed+0x78>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff ffc6 	bl	800b1cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d019      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x6a>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d015      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <tcp_netif_ip_addr_changed+0x7c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e00e      	b.n	800b274 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d103      	bne.n	800b270 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1ed      	bne.n	800b256 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b27a:	bf00      	nop
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20008dc4 	.word	0x20008dc4
 800b288:	20008dbc 	.word	0x20008dbc
 800b28c:	20008dc0 	.word	0x20008dc0

0800b290 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b08b      	sub	sp, #44	; 0x2c
 800b294:	af02      	add	r7, sp, #8
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4a82      	ldr	r2, [pc, #520]	; (800b4a8 <tcp_input+0x218>)
 800b2a0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	895b      	ldrh	r3, [r3, #10]
 800b2a6:	2b13      	cmp	r3, #19
 800b2a8:	f240 8398 	bls.w	800b9dc <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2ac:	4b7f      	ldr	r3, [pc, #508]	; (800b4ac <tcp_input+0x21c>)
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	4a7e      	ldr	r2, [pc, #504]	; (800b4ac <tcp_input+0x21c>)
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f005 fd3c 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f040 838e 	bne.w	800b9e0 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b2c4:	4b79      	ldr	r3, [pc, #484]	; (800b4ac <tcp_input+0x21c>)
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2cc:	2be0      	cmp	r3, #224	; 0xe0
 800b2ce:	f000 8387 	beq.w	800b9e0 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800b2d2:	4b75      	ldr	r3, [pc, #468]	; (800b4a8 <tcp_input+0x218>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	899b      	ldrh	r3, [r3, #12]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fc fc23 	bl	8007b26 <lwip_htons>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	0b1b      	lsrs	r3, r3, #12
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b2ec:	7cbb      	ldrb	r3, [r7, #18]
 800b2ee:	2b13      	cmp	r3, #19
 800b2f0:	f240 8378 	bls.w	800b9e4 <tcp_input+0x754>
 800b2f4:	7cbb      	ldrb	r3, [r7, #18]
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	891b      	ldrh	r3, [r3, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	f200 8371 	bhi.w	800b9e4 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b302:	7cbb      	ldrb	r3, [r7, #18]
 800b304:	b29b      	uxth	r3, r3
 800b306:	3b14      	subs	r3, #20
 800b308:	b29a      	uxth	r2, r3
 800b30a:	4b69      	ldr	r3, [pc, #420]	; (800b4b0 <tcp_input+0x220>)
 800b30c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b30e:	4b69      	ldr	r3, [pc, #420]	; (800b4b4 <tcp_input+0x224>)
 800b310:	2200      	movs	r2, #0
 800b312:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	895a      	ldrh	r2, [r3, #10]
 800b318:	7cbb      	ldrb	r3, [r7, #18]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d30d      	bcc.n	800b33c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b320:	4b63      	ldr	r3, [pc, #396]	; (800b4b0 <tcp_input+0x220>)
 800b322:	881a      	ldrh	r2, [r3, #0]
 800b324:	4b64      	ldr	r3, [pc, #400]	; (800b4b8 <tcp_input+0x228>)
 800b326:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b328:	7cbb      	ldrb	r3, [r7, #18]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	425b      	negs	r3, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	b21b      	sxth	r3, r3
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7fd ffa5 	bl	8009284 <pbuf_header>
 800b33a:	e055      	b.n	800b3e8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d105      	bne.n	800b350 <tcp_input+0xc0>
 800b344:	4b5d      	ldr	r3, [pc, #372]	; (800b4bc <tcp_input+0x22c>)
 800b346:	22b2      	movs	r2, #178	; 0xb2
 800b348:	495d      	ldr	r1, [pc, #372]	; (800b4c0 <tcp_input+0x230>)
 800b34a:	485e      	ldr	r0, [pc, #376]	; (800b4c4 <tcp_input+0x234>)
 800b34c:	f008 fab8 	bl	80138c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800b350:	f06f 0113 	mvn.w	r1, #19
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7fd ff95 	bl	8009284 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	895a      	ldrh	r2, [r3, #10]
 800b35e:	4b56      	ldr	r3, [pc, #344]	; (800b4b8 <tcp_input+0x228>)
 800b360:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b362:	4b53      	ldr	r3, [pc, #332]	; (800b4b0 <tcp_input+0x220>)
 800b364:	881a      	ldrh	r2, [r3, #0]
 800b366:	4b54      	ldr	r3, [pc, #336]	; (800b4b8 <tcp_input+0x228>)
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b36e:	4b52      	ldr	r3, [pc, #328]	; (800b4b8 <tcp_input+0x228>)
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	425b      	negs	r3, r3
 800b374:	b29b      	uxth	r3, r3
 800b376:	b21b      	sxth	r3, r3
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fd ff82 	bl	8009284 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	895b      	ldrh	r3, [r3, #10]
 800b386:	8a3a      	ldrh	r2, [r7, #16]
 800b388:	429a      	cmp	r2, r3
 800b38a:	f200 832d 	bhi.w	800b9e8 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	4a47      	ldr	r2, [pc, #284]	; (800b4b4 <tcp_input+0x224>)
 800b396:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	8a3b      	ldrh	r3, [r7, #16]
 800b39e:	425b      	negs	r3, r3
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	b21b      	sxth	r3, r3
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f7fd ff6c 	bl	8009284 <pbuf_header>
    p->tot_len -= opt2len;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	891a      	ldrh	r2, [r3, #8]
 800b3b0:	8a3b      	ldrh	r3, [r7, #16]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	895b      	ldrh	r3, [r3, #10]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d005      	beq.n	800b3ce <tcp_input+0x13e>
 800b3c2:	4b3e      	ldr	r3, [pc, #248]	; (800b4bc <tcp_input+0x22c>)
 800b3c4:	22cf      	movs	r2, #207	; 0xcf
 800b3c6:	4940      	ldr	r1, [pc, #256]	; (800b4c8 <tcp_input+0x238>)
 800b3c8:	483e      	ldr	r0, [pc, #248]	; (800b4c4 <tcp_input+0x234>)
 800b3ca:	f008 fa79 	bl	80138c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	891a      	ldrh	r2, [r3, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	891b      	ldrh	r3, [r3, #8]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d005      	beq.n	800b3e8 <tcp_input+0x158>
 800b3dc:	4b37      	ldr	r3, [pc, #220]	; (800b4bc <tcp_input+0x22c>)
 800b3de:	22d0      	movs	r2, #208	; 0xd0
 800b3e0:	493a      	ldr	r1, [pc, #232]	; (800b4cc <tcp_input+0x23c>)
 800b3e2:	4838      	ldr	r0, [pc, #224]	; (800b4c4 <tcp_input+0x234>)
 800b3e4:	f008 fa6c 	bl	80138c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b3e8:	4b2f      	ldr	r3, [pc, #188]	; (800b4a8 <tcp_input+0x218>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	4a2d      	ldr	r2, [pc, #180]	; (800b4a8 <tcp_input+0x218>)
 800b3f2:	6814      	ldr	r4, [r2, #0]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fc fb96 	bl	8007b26 <lwip_htons>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b3fe:	4b2a      	ldr	r3, [pc, #168]	; (800b4a8 <tcp_input+0x218>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	885b      	ldrh	r3, [r3, #2]
 800b404:	b29b      	uxth	r3, r3
 800b406:	4a28      	ldr	r2, [pc, #160]	; (800b4a8 <tcp_input+0x218>)
 800b408:	6814      	ldr	r4, [r2, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fc fb8b 	bl	8007b26 <lwip_htons>
 800b410:	4603      	mov	r3, r0
 800b412:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b414:	4b24      	ldr	r3, [pc, #144]	; (800b4a8 <tcp_input+0x218>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	4a23      	ldr	r2, [pc, #140]	; (800b4a8 <tcp_input+0x218>)
 800b41c:	6814      	ldr	r4, [r2, #0]
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fc fb8e 	bl	8007b40 <lwip_htonl>
 800b424:	4603      	mov	r3, r0
 800b426:	6063      	str	r3, [r4, #4]
 800b428:	6863      	ldr	r3, [r4, #4]
 800b42a:	4a29      	ldr	r2, [pc, #164]	; (800b4d0 <tcp_input+0x240>)
 800b42c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b42e:	4b1e      	ldr	r3, [pc, #120]	; (800b4a8 <tcp_input+0x218>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	4a1c      	ldr	r2, [pc, #112]	; (800b4a8 <tcp_input+0x218>)
 800b436:	6814      	ldr	r4, [r2, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fc fb81 	bl	8007b40 <lwip_htonl>
 800b43e:	4603      	mov	r3, r0
 800b440:	60a3      	str	r3, [r4, #8]
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	4a23      	ldr	r2, [pc, #140]	; (800b4d4 <tcp_input+0x244>)
 800b446:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b448:	4b17      	ldr	r3, [pc, #92]	; (800b4a8 <tcp_input+0x218>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	89db      	ldrh	r3, [r3, #14]
 800b44e:	b29b      	uxth	r3, r3
 800b450:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <tcp_input+0x218>)
 800b452:	6814      	ldr	r4, [r2, #0]
 800b454:	4618      	mov	r0, r3
 800b456:	f7fc fb66 	bl	8007b26 <lwip_htons>
 800b45a:	4603      	mov	r3, r0
 800b45c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <tcp_input+0x218>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	899b      	ldrh	r3, [r3, #12]
 800b464:	b29b      	uxth	r3, r3
 800b466:	4618      	mov	r0, r3
 800b468:	f7fc fb5d 	bl	8007b26 <lwip_htons>
 800b46c:	4603      	mov	r3, r0
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b474:	b2da      	uxtb	r2, r3
 800b476:	4b18      	ldr	r3, [pc, #96]	; (800b4d8 <tcp_input+0x248>)
 800b478:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	891a      	ldrh	r2, [r3, #8]
 800b47e:	4b16      	ldr	r3, [pc, #88]	; (800b4d8 <tcp_input+0x248>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b00      	cmp	r3, #0
 800b488:	bf14      	ite	ne
 800b48a:	2301      	movne	r3, #1
 800b48c:	2300      	moveq	r3, #0
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	b29b      	uxth	r3, r3
 800b492:	4413      	add	r3, r2
 800b494:	b29a      	uxth	r2, r3
 800b496:	4b11      	ldr	r3, [pc, #68]	; (800b4dc <tcp_input+0x24c>)
 800b498:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b49e:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <tcp_input+0x250>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	61fb      	str	r3, [r7, #28]
 800b4a4:	e082      	b.n	800b5ac <tcp_input+0x31c>
 800b4a6:	bf00      	nop
 800b4a8:	20008de0 	.word	0x20008de0
 800b4ac:	200057cc 	.word	0x200057cc
 800b4b0:	20008de4 	.word	0x20008de4
 800b4b4:	20008de8 	.word	0x20008de8
 800b4b8:	20008de6 	.word	0x20008de6
 800b4bc:	08015610 	.word	0x08015610
 800b4c0:	08015644 	.word	0x08015644
 800b4c4:	08015654 	.word	0x08015654
 800b4c8:	0801567c 	.word	0x0801567c
 800b4cc:	08015688 	.word	0x08015688
 800b4d0:	20008df0 	.word	0x20008df0
 800b4d4:	20008df4 	.word	0x20008df4
 800b4d8:	20008dfc 	.word	0x20008dfc
 800b4dc:	20008dfa 	.word	0x20008dfa
 800b4e0:	20008dc4 	.word	0x20008dc4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	7d1b      	ldrb	r3, [r3, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d105      	bne.n	800b4f8 <tcp_input+0x268>
 800b4ec:	4b6e      	ldr	r3, [pc, #440]	; (800b6a8 <tcp_input+0x418>)
 800b4ee:	22e2      	movs	r2, #226	; 0xe2
 800b4f0:	496e      	ldr	r1, [pc, #440]	; (800b6ac <tcp_input+0x41c>)
 800b4f2:	486f      	ldr	r0, [pc, #444]	; (800b6b0 <tcp_input+0x420>)
 800b4f4:	f008 f9e4 	bl	80138c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	7d1b      	ldrb	r3, [r3, #20]
 800b4fc:	2b0a      	cmp	r3, #10
 800b4fe:	d105      	bne.n	800b50c <tcp_input+0x27c>
 800b500:	4b69      	ldr	r3, [pc, #420]	; (800b6a8 <tcp_input+0x418>)
 800b502:	22e3      	movs	r2, #227	; 0xe3
 800b504:	496b      	ldr	r1, [pc, #428]	; (800b6b4 <tcp_input+0x424>)
 800b506:	486a      	ldr	r0, [pc, #424]	; (800b6b0 <tcp_input+0x420>)
 800b508:	f008 f9da 	bl	80138c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	7d1b      	ldrb	r3, [r3, #20]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d105      	bne.n	800b520 <tcp_input+0x290>
 800b514:	4b64      	ldr	r3, [pc, #400]	; (800b6a8 <tcp_input+0x418>)
 800b516:	22e4      	movs	r2, #228	; 0xe4
 800b518:	4967      	ldr	r1, [pc, #412]	; (800b6b8 <tcp_input+0x428>)
 800b51a:	4865      	ldr	r0, [pc, #404]	; (800b6b0 <tcp_input+0x420>)
 800b51c:	f008 f9d0 	bl	80138c0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	8b1a      	ldrh	r2, [r3, #24]
 800b524:	4b65      	ldr	r3, [pc, #404]	; (800b6bc <tcp_input+0x42c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d138      	bne.n	800b5a2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	8ada      	ldrh	r2, [r3, #22]
 800b534:	4b61      	ldr	r3, [pc, #388]	; (800b6bc <tcp_input+0x42c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	885b      	ldrh	r3, [r3, #2]
 800b53a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d130      	bne.n	800b5a2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	4b5e      	ldr	r3, [pc, #376]	; (800b6c0 <tcp_input+0x430>)
 800b546:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b548:	429a      	cmp	r2, r3
 800b54a:	d12a      	bne.n	800b5a2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	4b5b      	ldr	r3, [pc, #364]	; (800b6c0 <tcp_input+0x430>)
 800b552:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b554:	429a      	cmp	r2, r3
 800b556:	d124      	bne.n	800b5a2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d105      	bne.n	800b56e <tcp_input+0x2de>
 800b562:	4b51      	ldr	r3, [pc, #324]	; (800b6a8 <tcp_input+0x418>)
 800b564:	22ec      	movs	r2, #236	; 0xec
 800b566:	4957      	ldr	r1, [pc, #348]	; (800b6c4 <tcp_input+0x434>)
 800b568:	4851      	ldr	r0, [pc, #324]	; (800b6b0 <tcp_input+0x420>)
 800b56a:	f008 f9a9 	bl	80138c0 <iprintf>
      if (prev != NULL) {
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00a      	beq.n	800b58a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	68da      	ldr	r2, [r3, #12]
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b57c:	4b52      	ldr	r3, [pc, #328]	; (800b6c8 <tcp_input+0x438>)
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b584:	4a50      	ldr	r2, [pc, #320]	; (800b6c8 <tcp_input+0x438>)
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	69fa      	ldr	r2, [r7, #28]
 800b590:	429a      	cmp	r2, r3
 800b592:	d10f      	bne.n	800b5b4 <tcp_input+0x324>
 800b594:	4b44      	ldr	r3, [pc, #272]	; (800b6a8 <tcp_input+0x418>)
 800b596:	22f4      	movs	r2, #244	; 0xf4
 800b598:	494c      	ldr	r1, [pc, #304]	; (800b6cc <tcp_input+0x43c>)
 800b59a:	4845      	ldr	r0, [pc, #276]	; (800b6b0 <tcp_input+0x420>)
 800b59c:	f008 f990 	bl	80138c0 <iprintf>
      break;
 800b5a0:	e008      	b.n	800b5b4 <tcp_input+0x324>
    }
    prev = pcb;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	61fb      	str	r3, [r7, #28]
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d198      	bne.n	800b4e4 <tcp_input+0x254>
 800b5b2:	e000      	b.n	800b5b6 <tcp_input+0x326>
      break;
 800b5b4:	bf00      	nop
  }

  if (pcb == NULL) {
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f040 808f 	bne.w	800b6dc <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5be:	4b44      	ldr	r3, [pc, #272]	; (800b6d0 <tcp_input+0x440>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	61fb      	str	r3, [r7, #28]
 800b5c4:	e02f      	b.n	800b626 <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ca:	2b0a      	cmp	r3, #10
 800b5cc:	d005      	beq.n	800b5da <tcp_input+0x34a>
 800b5ce:	4b36      	ldr	r3, [pc, #216]	; (800b6a8 <tcp_input+0x418>)
 800b5d0:	22fe      	movs	r2, #254	; 0xfe
 800b5d2:	4940      	ldr	r1, [pc, #256]	; (800b6d4 <tcp_input+0x444>)
 800b5d4:	4836      	ldr	r0, [pc, #216]	; (800b6b0 <tcp_input+0x420>)
 800b5d6:	f008 f973 	bl	80138c0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	8b1a      	ldrh	r2, [r3, #24]
 800b5de:	4b37      	ldr	r3, [pc, #220]	; (800b6bc <tcp_input+0x42c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d11a      	bne.n	800b620 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	8ada      	ldrh	r2, [r3, #22]
 800b5ee:	4b33      	ldr	r3, [pc, #204]	; (800b6bc <tcp_input+0x42c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	885b      	ldrh	r3, [r3, #2]
 800b5f4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d112      	bne.n	800b620 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	4b30      	ldr	r3, [pc, #192]	; (800b6c0 <tcp_input+0x430>)
 800b600:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b602:	429a      	cmp	r2, r3
 800b604:	d10c      	bne.n	800b620 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b2d      	ldr	r3, [pc, #180]	; (800b6c0 <tcp_input+0x430>)
 800b60c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b60e:	429a      	cmp	r2, r3
 800b610:	d106      	bne.n	800b620 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800b612:	69f8      	ldr	r0, [r7, #28]
 800b614:	f000 fb16 	bl	800bc44 <tcp_timewait_input>
        pbuf_free(p);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7fd fe57 	bl	80092cc <pbuf_free>
        return;
 800b61e:	e1e9      	b.n	800b9f4 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	61fb      	str	r3, [r7, #28]
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1cc      	bne.n	800b5c6 <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b62c:	2300      	movs	r3, #0
 800b62e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b630:	4b29      	ldr	r3, [pc, #164]	; (800b6d8 <tcp_input+0x448>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	617b      	str	r3, [r7, #20]
 800b636:	e019      	b.n	800b66c <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	8ada      	ldrh	r2, [r3, #22]
 800b63c:	4b1f      	ldr	r3, [pc, #124]	; (800b6bc <tcp_input+0x42c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	885b      	ldrh	r3, [r3, #2]
 800b642:	b29b      	uxth	r3, r3
 800b644:	429a      	cmp	r2, r3
 800b646:	d10c      	bne.n	800b662 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	4b1c      	ldr	r3, [pc, #112]	; (800b6c0 <tcp_input+0x430>)
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	429a      	cmp	r2, r3
 800b652:	d00f      	beq.n	800b674 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00d      	beq.n	800b676 <tcp_input+0x3e6>
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d009      	beq.n	800b676 <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e2      	bne.n	800b638 <tcp_input+0x3a8>
 800b672:	e000      	b.n	800b676 <tcp_input+0x3e6>
            break;
 800b674:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d02f      	beq.n	800b6dc <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	68da      	ldr	r2, [r3, #12]
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b68a:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <tcp_input+0x448>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b692:	4a11      	ldr	r2, [pc, #68]	; (800b6d8 <tcp_input+0x448>)
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800b698:	6978      	ldr	r0, [r7, #20]
 800b69a:	f000 f9f3 	bl	800ba84 <tcp_listen_input>
      pbuf_free(p);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7fd fe14 	bl	80092cc <pbuf_free>
      return;
 800b6a4:	e1a6      	b.n	800b9f4 <tcp_input+0x764>
 800b6a6:	bf00      	nop
 800b6a8:	08015610 	.word	0x08015610
 800b6ac:	080156a8 	.word	0x080156a8
 800b6b0:	08015654 	.word	0x08015654
 800b6b4:	080156d0 	.word	0x080156d0
 800b6b8:	080156fc 	.word	0x080156fc
 800b6bc:	20008de0 	.word	0x20008de0
 800b6c0:	200057cc 	.word	0x200057cc
 800b6c4:	08015724 	.word	0x08015724
 800b6c8:	20008dc4 	.word	0x20008dc4
 800b6cc:	08015750 	.word	0x08015750
 800b6d0:	20008dc8 	.word	0x20008dc8
 800b6d4:	0801577c 	.word	0x0801577c
 800b6d8:	20008dc0 	.word	0x20008dc0
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 8156 	beq.w	800b990 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b6e4:	4b94      	ldr	r3, [pc, #592]	; (800b938 <tcp_input+0x6a8>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	891a      	ldrh	r2, [r3, #8]
 800b6ee:	4b92      	ldr	r3, [pc, #584]	; (800b938 <tcp_input+0x6a8>)
 800b6f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b6f2:	4a91      	ldr	r2, [pc, #580]	; (800b938 <tcp_input+0x6a8>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b6f8:	4b90      	ldr	r3, [pc, #576]	; (800b93c <tcp_input+0x6ac>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a8e      	ldr	r2, [pc, #568]	; (800b938 <tcp_input+0x6a8>)
 800b6fe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b700:	4b8f      	ldr	r3, [pc, #572]	; (800b940 <tcp_input+0x6b0>)
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b706:	4b8f      	ldr	r3, [pc, #572]	; (800b944 <tcp_input+0x6b4>)
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b70c:	4b8e      	ldr	r3, [pc, #568]	; (800b948 <tcp_input+0x6b8>)
 800b70e:	2200      	movs	r2, #0
 800b710:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b712:	4b8e      	ldr	r3, [pc, #568]	; (800b94c <tcp_input+0x6bc>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f003 0308 	and.w	r3, r3, #8
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d006      	beq.n	800b72c <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	7b5b      	ldrb	r3, [r3, #13]
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	b2da      	uxtb	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b730:	2b00      	cmp	r3, #0
 800b732:	d017      	beq.n	800b764 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b734:	69f8      	ldr	r0, [r7, #28]
 800b736:	f7ff f97b 	bl	800aa30 <tcp_process_refused_data>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f113 0f0d 	cmn.w	r3, #13
 800b740:	d007      	beq.n	800b752 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00c      	beq.n	800b764 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b74a:	4b81      	ldr	r3, [pc, #516]	; (800b950 <tcp_input+0x6c0>)
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b756:	2b00      	cmp	r3, #0
 800b758:	f040 80e2 	bne.w	800b920 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b75c:	69f8      	ldr	r0, [r7, #28]
 800b75e:	f002 fe1d 	bl	800e39c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b762:	e0dd      	b.n	800b920 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 800b764:	4a7b      	ldr	r2, [pc, #492]	; (800b954 <tcp_input+0x6c4>)
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b76a:	69f8      	ldr	r0, [r7, #28]
 800b76c:	f000 fad2 	bl	800bd14 <tcp_process>
 800b770:	4603      	mov	r3, r0
 800b772:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b778:	f113 0f0d 	cmn.w	r3, #13
 800b77c:	f000 80d2 	beq.w	800b924 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 800b780:	4b70      	ldr	r3, [pc, #448]	; (800b944 <tcp_input+0x6b4>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	f003 0308 	and.w	r3, r3, #8
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d016      	beq.n	800b7ba <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d008      	beq.n	800b7a8 <tcp_input+0x518>
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b79c:	69fa      	ldr	r2, [r7, #28]
 800b79e:	6912      	ldr	r2, [r2, #16]
 800b7a0:	f06f 010d 	mvn.w	r1, #13
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b7a8:	69f9      	ldr	r1, [r7, #28]
 800b7aa:	486b      	ldr	r0, [pc, #428]	; (800b958 <tcp_input+0x6c8>)
 800b7ac:	f7ff fc58 	bl	800b060 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b7b0:	69f9      	ldr	r1, [r7, #28]
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	f7fd f84c 	bl	8008850 <memp_free>
 800b7b8:	e0d7      	b.n	800b96a <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b7be:	4b62      	ldr	r3, [pc, #392]	; (800b948 <tcp_input+0x6b8>)
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d01b      	beq.n	800b7fe <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b7c6:	4b60      	ldr	r3, [pc, #384]	; (800b948 <tcp_input+0x6b8>)
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <tcp_input+0x558>
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7d8:	69fa      	ldr	r2, [r7, #28]
 800b7da:	6910      	ldr	r0, [r2, #16]
 800b7dc:	89fa      	ldrh	r2, [r7, #14]
 800b7de:	69f9      	ldr	r1, [r7, #28]
 800b7e0:	4798      	blx	r3
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	74fb      	strb	r3, [r7, #19]
 800b7e6:	e001      	b.n	800b7ec <tcp_input+0x55c>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b7ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7f0:	f113 0f0d 	cmn.w	r3, #13
 800b7f4:	f000 8098 	beq.w	800b928 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b7f8:	4b53      	ldr	r3, [pc, #332]	; (800b948 <tcp_input+0x6b8>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b7fe:	69f8      	ldr	r0, [r7, #28]
 800b800:	f000 f90e 	bl	800ba20 <tcp_input_delayed_close>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 8090 	bne.w	800b92c <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b80c:	4b4c      	ldr	r3, [pc, #304]	; (800b940 <tcp_input+0x6b0>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d041      	beq.n	800b898 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d006      	beq.n	800b82a <tcp_input+0x59a>
 800b81c:	4b4f      	ldr	r3, [pc, #316]	; (800b95c <tcp_input+0x6cc>)
 800b81e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b822:	494f      	ldr	r1, [pc, #316]	; (800b960 <tcp_input+0x6d0>)
 800b824:	484f      	ldr	r0, [pc, #316]	; (800b964 <tcp_input+0x6d4>)
 800b826:	f008 f84b 	bl	80138c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	7e9b      	ldrb	r3, [r3, #26]
 800b82e:	f003 0310 	and.w	r3, r3, #16
 800b832:	2b00      	cmp	r3, #0
 800b834:	d008      	beq.n	800b848 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b836:	4b42      	ldr	r3, [pc, #264]	; (800b940 <tcp_input+0x6b0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fd fd46 	bl	80092cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b840:	69f8      	ldr	r0, [r7, #28]
 800b842:	f7fe fb8b 	bl	8009f5c <tcp_abort>
            goto aborted;
 800b846:	e090      	b.n	800b96a <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00c      	beq.n	800b86c <tcp_input+0x5dc>
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	6918      	ldr	r0, [r3, #16]
 800b85c:	4b38      	ldr	r3, [pc, #224]	; (800b940 <tcp_input+0x6b0>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	2300      	movs	r3, #0
 800b862:	69f9      	ldr	r1, [r7, #28]
 800b864:	47a0      	blx	r4
 800b866:	4603      	mov	r3, r0
 800b868:	74fb      	strb	r3, [r7, #19]
 800b86a:	e008      	b.n	800b87e <tcp_input+0x5ee>
 800b86c:	4b34      	ldr	r3, [pc, #208]	; (800b940 <tcp_input+0x6b0>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	2300      	movs	r3, #0
 800b872:	69f9      	ldr	r1, [r7, #28]
 800b874:	2000      	movs	r0, #0
 800b876:	f7ff f99b 	bl	800abb0 <tcp_recv_null>
 800b87a:	4603      	mov	r3, r0
 800b87c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b87e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b882:	f113 0f0d 	cmn.w	r3, #13
 800b886:	d053      	beq.n	800b930 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b888:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b890:	4b2b      	ldr	r3, [pc, #172]	; (800b940 <tcp_input+0x6b0>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b898:	4b2a      	ldr	r3, [pc, #168]	; (800b944 <tcp_input+0x6b4>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0320 	and.w	r3, r3, #32
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d030      	beq.n	800b906 <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d009      	beq.n	800b8c0 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b0:	7b5a      	ldrb	r2, [r3, #13]
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b6:	f042 0220 	orr.w	r2, r2, #32
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	735a      	strb	r2, [r3, #13]
 800b8be:	e022      	b.n	800b906 <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b8c8:	d005      	beq.n	800b8d6 <tcp_input+0x646>
              pcb->rcv_wnd++;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00b      	beq.n	800b8f8 <tcp_input+0x668>
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	6918      	ldr	r0, [r3, #16]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	69f9      	ldr	r1, [r7, #28]
 800b8f0:	47a0      	blx	r4
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	74fb      	strb	r3, [r7, #19]
 800b8f6:	e001      	b.n	800b8fc <tcp_input+0x66c>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b8fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b900:	f113 0f0d 	cmn.w	r3, #13
 800b904:	d016      	beq.n	800b934 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b906:	4b13      	ldr	r3, [pc, #76]	; (800b954 <tcp_input+0x6c4>)
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b90c:	69f8      	ldr	r0, [r7, #28]
 800b90e:	f000 f887 	bl	800ba20 <tcp_input_delayed_close>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d127      	bne.n	800b968 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b918:	69f8      	ldr	r0, [r7, #28]
 800b91a:	f002 fd9b 	bl	800e454 <tcp_output>
 800b91e:	e024      	b.n	800b96a <tcp_input+0x6da>
        goto aborted;
 800b920:	bf00      	nop
 800b922:	e022      	b.n	800b96a <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b924:	bf00      	nop
 800b926:	e020      	b.n	800b96a <tcp_input+0x6da>
              goto aborted;
 800b928:	bf00      	nop
 800b92a:	e01e      	b.n	800b96a <tcp_input+0x6da>
          goto aborted;
 800b92c:	bf00      	nop
 800b92e:	e01c      	b.n	800b96a <tcp_input+0x6da>
            goto aborted;
 800b930:	bf00      	nop
 800b932:	e01a      	b.n	800b96a <tcp_input+0x6da>
              goto aborted;
 800b934:	bf00      	nop
 800b936:	e018      	b.n	800b96a <tcp_input+0x6da>
 800b938:	20008dd0 	.word	0x20008dd0
 800b93c:	20008de0 	.word	0x20008de0
 800b940:	20008e00 	.word	0x20008e00
 800b944:	20008dfd 	.word	0x20008dfd
 800b948:	20008df8 	.word	0x20008df8
 800b94c:	20008dfc 	.word	0x20008dfc
 800b950:	20008dfa 	.word	0x20008dfa
 800b954:	20008e04 	.word	0x20008e04
 800b958:	20008dc4 	.word	0x20008dc4
 800b95c:	08015610 	.word	0x08015610
 800b960:	080157ac 	.word	0x080157ac
 800b964:	08015654 	.word	0x08015654
          goto aborted;
 800b968:	bf00      	nop
    tcp_input_pcb = NULL;
 800b96a:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <tcp_input+0x76c>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b970:	4b23      	ldr	r3, [pc, #140]	; (800ba00 <tcp_input+0x770>)
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800b976:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <tcp_input+0x774>)
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d039      	beq.n	800b9f2 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 800b97e:	4b21      	ldr	r3, [pc, #132]	; (800ba04 <tcp_input+0x774>)
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	4618      	mov	r0, r3
 800b984:	f7fd fca2 	bl	80092cc <pbuf_free>
      inseg.p = NULL;
 800b988:	4b1e      	ldr	r3, [pc, #120]	; (800ba04 <tcp_input+0x774>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b98e:	e030      	b.n	800b9f2 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b990:	4b1d      	ldr	r3, [pc, #116]	; (800ba08 <tcp_input+0x778>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	899b      	ldrh	r3, [r3, #12]
 800b996:	b29b      	uxth	r3, r3
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fc f8c4 	bl	8007b26 <lwip_htons>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f003 0304 	and.w	r3, r3, #4
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d115      	bne.n	800b9d4 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9a8:	4b18      	ldr	r3, [pc, #96]	; (800ba0c <tcp_input+0x77c>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <tcp_input+0x780>)
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <tcp_input+0x784>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9b8:	4b13      	ldr	r3, [pc, #76]	; (800ba08 <tcp_input+0x778>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9bc:	885b      	ldrh	r3, [r3, #2]
 800b9be:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9c0:	4a11      	ldr	r2, [pc, #68]	; (800ba08 <tcp_input+0x778>)
 800b9c2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9c4:	8812      	ldrh	r2, [r2, #0]
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	9201      	str	r2, [sp, #4]
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	4b12      	ldr	r3, [pc, #72]	; (800ba18 <tcp_input+0x788>)
 800b9ce:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <tcp_input+0x78c>)
 800b9d0:	f002 ffc4 	bl	800e95c <tcp_rst>
    pbuf_free(p);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7fd fc79 	bl	80092cc <pbuf_free>
  return;
 800b9da:	e00a      	b.n	800b9f2 <tcp_input+0x762>
    goto dropped;
 800b9dc:	bf00      	nop
 800b9de:	e004      	b.n	800b9ea <tcp_input+0x75a>
    goto dropped;
 800b9e0:	bf00      	nop
 800b9e2:	e002      	b.n	800b9ea <tcp_input+0x75a>
    goto dropped;
 800b9e4:	bf00      	nop
 800b9e6:	e000      	b.n	800b9ea <tcp_input+0x75a>
      goto dropped;
 800b9e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7fd fc6e 	bl	80092cc <pbuf_free>
 800b9f0:	e000      	b.n	800b9f4 <tcp_input+0x764>
  return;
 800b9f2:	bf00      	nop
}
 800b9f4:	3724      	adds	r7, #36	; 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd90      	pop	{r4, r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20008e04 	.word	0x20008e04
 800ba00:	20008e00 	.word	0x20008e00
 800ba04:	20008dd0 	.word	0x20008dd0
 800ba08:	20008de0 	.word	0x20008de0
 800ba0c:	20008df4 	.word	0x20008df4
 800ba10:	20008dfa 	.word	0x20008dfa
 800ba14:	20008df0 	.word	0x20008df0
 800ba18:	200057dc 	.word	0x200057dc
 800ba1c:	200057e0 	.word	0x200057e0

0800ba20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ba28:	4b14      	ldr	r3, [pc, #80]	; (800ba7c <tcp_input_delayed_close+0x5c>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 0310 	and.w	r3, r3, #16
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d01d      	beq.n	800ba70 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7e9b      	ldrb	r3, [r3, #26]
 800ba38:	f003 0310 	and.w	r3, r3, #16
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10d      	bne.n	800ba5c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d008      	beq.n	800ba5c <tcp_input_delayed_close+0x3c>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	6912      	ldr	r2, [r2, #16]
 800ba54:	f06f 010e 	mvn.w	r1, #14
 800ba58:	4610      	mov	r0, r2
 800ba5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	4808      	ldr	r0, [pc, #32]	; (800ba80 <tcp_input_delayed_close+0x60>)
 800ba60:	f7ff fafe 	bl	800b060 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ba64:	6879      	ldr	r1, [r7, #4]
 800ba66:	2001      	movs	r0, #1
 800ba68:	f7fc fef2 	bl	8008850 <memp_free>
    return 1;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e000      	b.n	800ba72 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20008dfd 	.word	0x20008dfd
 800ba80:	20008dc4 	.word	0x20008dc4

0800ba84 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ba8c:	4b63      	ldr	r3, [pc, #396]	; (800bc1c <tcp_listen_input+0x198>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f040 80bb 	bne.w	800bc10 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ba9a:	4b60      	ldr	r3, [pc, #384]	; (800bc1c <tcp_listen_input+0x198>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	f003 0310 	and.w	r3, r3, #16
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d016      	beq.n	800bad4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800baa6:	4b5e      	ldr	r3, [pc, #376]	; (800bc20 <tcp_listen_input+0x19c>)
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	4b5e      	ldr	r3, [pc, #376]	; (800bc24 <tcp_listen_input+0x1a0>)
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	4b5d      	ldr	r3, [pc, #372]	; (800bc28 <tcp_listen_input+0x1a4>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bab6:	4b5d      	ldr	r3, [pc, #372]	; (800bc2c <tcp_listen_input+0x1a8>)
 800bab8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800baba:	885b      	ldrh	r3, [r3, #2]
 800babc:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800babe:	4a5b      	ldr	r2, [pc, #364]	; (800bc2c <tcp_listen_input+0x1a8>)
 800bac0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bac2:	8812      	ldrh	r2, [r2, #0]
 800bac4:	b292      	uxth	r2, r2
 800bac6:	9201      	str	r2, [sp, #4]
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	4b59      	ldr	r3, [pc, #356]	; (800bc30 <tcp_listen_input+0x1ac>)
 800bacc:	4a59      	ldr	r2, [pc, #356]	; (800bc34 <tcp_listen_input+0x1b0>)
 800bace:	f002 ff45 	bl	800e95c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bad2:	e09f      	b.n	800bc14 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800bad4:	4b51      	ldr	r3, [pc, #324]	; (800bc1c <tcp_listen_input+0x198>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 8099 	beq.w	800bc14 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	7d5b      	ldrb	r3, [r3, #21]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff f940 	bl	800ad6c <tcp_alloc>
 800baec:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d111      	bne.n	800bb18 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <tcp_listen_input+0x8e>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	6910      	ldr	r0, [r2, #16]
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4798      	blx	r3
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73bb      	strb	r3, [r7, #14]
      return;
 800bb10:	e081      	b.n	800bc16 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bb12:	23f0      	movs	r3, #240	; 0xf0
 800bb14:	73bb      	strb	r3, [r7, #14]
      return;
 800bb16:	e07e      	b.n	800bc16 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bb18:	4b47      	ldr	r3, [pc, #284]	; (800bc38 <tcp_listen_input+0x1b4>)
 800bb1a:	695a      	ldr	r2, [r3, #20]
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bb20:	4b45      	ldr	r3, [pc, #276]	; (800bc38 <tcp_listen_input+0x1b4>)
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	8ada      	ldrh	r2, [r3, #22]
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bb30:	4b3e      	ldr	r3, [pc, #248]	; (800bc2c <tcp_listen_input+0x1a8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2203      	movs	r2, #3
 800bb40:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bb42:	4b39      	ldr	r3, [pc, #228]	; (800bc28 <tcp_listen_input+0x1a4>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bb54:	6978      	ldr	r0, [r7, #20]
 800bb56:	f7ff faff 	bl	800b158 <tcp_next_iss>
 800bb5a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bb74:	4b2c      	ldr	r3, [pc, #176]	; (800bc28 <tcp_listen_input+0x1a4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	1e5a      	subs	r2, r3, #1
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691a      	ldr	r2, [r3, #16]
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7a1b      	ldrb	r3, [r3, #8]
 800bb90:	f003 030c 	and.w	r3, r3, #12
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bb9a:	4b28      	ldr	r3, [pc, #160]	; (800bc3c <tcp_listen_input+0x1b8>)
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	60da      	str	r2, [r3, #12]
 800bba2:	4a26      	ldr	r2, [pc, #152]	; (800bc3c <tcp_listen_input+0x1b8>)
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	f003 f920 	bl	800edec <tcp_timer_needed>
 800bbac:	4b24      	ldr	r3, [pc, #144]	; (800bc40 <tcp_listen_input+0x1bc>)
 800bbae:	2201      	movs	r2, #1
 800bbb0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bbb2:	6978      	ldr	r0, [r7, #20]
 800bbb4:	f001 fd0c 	bl	800d5d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bbb8:	4b1c      	ldr	r3, [pc, #112]	; (800bc2c <tcp_listen_input+0x1a8>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	89db      	ldrh	r3, [r3, #14]
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4610      	mov	r0, r2
 800bbde:	f7ff fad1 	bl	800b184 <tcp_eff_send_mss_impl>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bbea:	2112      	movs	r1, #18
 800bbec:	6978      	ldr	r0, [r7, #20]
 800bbee:	f002 fad9 	bl	800e1a4 <tcp_enqueue_flags>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d004      	beq.n	800bc08 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800bbfe:	2100      	movs	r1, #0
 800bc00:	6978      	ldr	r0, [r7, #20]
 800bc02:	f7fe f8f9 	bl	8009df8 <tcp_abandon>
      return;
 800bc06:	e006      	b.n	800bc16 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800bc08:	6978      	ldr	r0, [r7, #20]
 800bc0a:	f002 fc23 	bl	800e454 <tcp_output>
  return;
 800bc0e:	e001      	b.n	800bc14 <tcp_listen_input+0x190>
    return;
 800bc10:	bf00      	nop
 800bc12:	e000      	b.n	800bc16 <tcp_listen_input+0x192>
  return;
 800bc14:	bf00      	nop
}
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20008dfc 	.word	0x20008dfc
 800bc20:	20008df4 	.word	0x20008df4
 800bc24:	20008dfa 	.word	0x20008dfa
 800bc28:	20008df0 	.word	0x20008df0
 800bc2c:	20008de0 	.word	0x20008de0
 800bc30:	200057dc 	.word	0x200057dc
 800bc34:	200057e0 	.word	0x200057e0
 800bc38:	200057cc 	.word	0x200057cc
 800bc3c:	20008dc4 	.word	0x20008dc4
 800bc40:	20008dcc 	.word	0x20008dcc

0800bc44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bc4c:	4b29      	ldr	r3, [pc, #164]	; (800bcf4 <tcp_timewait_input+0xb0>)
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d146      	bne.n	800bce6 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bc58:	4b26      	ldr	r3, [pc, #152]	; (800bcf4 <tcp_timewait_input+0xb0>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	f003 0302 	and.w	r3, r3, #2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d027      	beq.n	800bcb4 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bc64:	4b24      	ldr	r3, [pc, #144]	; (800bcf8 <tcp_timewait_input+0xb4>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	db2a      	blt.n	800bcc8 <tcp_timewait_input+0x84>
 800bc72:	4b21      	ldr	r3, [pc, #132]	; (800bcf8 <tcp_timewait_input+0xb4>)
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc7e:	440b      	add	r3, r1
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dc20      	bgt.n	800bcc8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc86:	4b1d      	ldr	r3, [pc, #116]	; (800bcfc <tcp_timewait_input+0xb8>)
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	4b1d      	ldr	r3, [pc, #116]	; (800bd00 <tcp_timewait_input+0xbc>)
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	4b19      	ldr	r3, [pc, #100]	; (800bcf8 <tcp_timewait_input+0xb4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc96:	4b1b      	ldr	r3, [pc, #108]	; (800bd04 <tcp_timewait_input+0xc0>)
 800bc98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc9a:	885b      	ldrh	r3, [r3, #2]
 800bc9c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc9e:	4a19      	ldr	r2, [pc, #100]	; (800bd04 <tcp_timewait_input+0xc0>)
 800bca0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bca2:	8812      	ldrh	r2, [r2, #0]
 800bca4:	b292      	uxth	r2, r2
 800bca6:	9201      	str	r2, [sp, #4]
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	4b17      	ldr	r3, [pc, #92]	; (800bd08 <tcp_timewait_input+0xc4>)
 800bcac:	4a17      	ldr	r2, [pc, #92]	; (800bd0c <tcp_timewait_input+0xc8>)
 800bcae:	f002 fe55 	bl	800e95c <tcp_rst>
      return;
 800bcb2:	e01b      	b.n	800bcec <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800bcb4:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <tcp_timewait_input+0xb0>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d003      	beq.n	800bcc8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bcc0:	4b13      	ldr	r3, [pc, #76]	; (800bd10 <tcp_timewait_input+0xcc>)
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <tcp_timewait_input+0xbc>)
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00c      	beq.n	800bcea <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7e9b      	ldrb	r3, [r3, #26]
 800bcd4:	f043 0302 	orr.w	r3, r3, #2
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f002 fbb8 	bl	800e454 <tcp_output>
  }
  return;
 800bce4:	e001      	b.n	800bcea <tcp_timewait_input+0xa6>
    return;
 800bce6:	bf00      	nop
 800bce8:	e000      	b.n	800bcec <tcp_timewait_input+0xa8>
  return;
 800bcea:	bf00      	nop
}
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20008dfc 	.word	0x20008dfc
 800bcf8:	20008df0 	.word	0x20008df0
 800bcfc:	20008df4 	.word	0x20008df4
 800bd00:	20008dfa 	.word	0x20008dfa
 800bd04:	20008de0 	.word	0x20008de0
 800bd08:	200057dc 	.word	0x200057dc
 800bd0c:	200057e0 	.word	0x200057e0
 800bd10:	20008db8 	.word	0x20008db8

0800bd14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08a      	sub	sp, #40	; 0x28
 800bd18:	af02      	add	r7, sp, #8
 800bd1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bd24:	4b93      	ldr	r3, [pc, #588]	; (800bf74 <tcp_process+0x260>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d04e      	beq.n	800bdce <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	7d1b      	ldrb	r3, [r3, #20]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d108      	bne.n	800bd4a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd3c:	4b8e      	ldr	r3, [pc, #568]	; (800bf78 <tcp_process+0x264>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d123      	bne.n	800bd8c <tcp_process+0x78>
        acceptable = 1;
 800bd44:	2301      	movs	r3, #1
 800bd46:	76fb      	strb	r3, [r7, #27]
 800bd48:	e020      	b.n	800bd8c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd4e:	4b8b      	ldr	r3, [pc, #556]	; (800bf7c <tcp_process+0x268>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d102      	bne.n	800bd5c <tcp_process+0x48>
        acceptable = 1;
 800bd56:	2301      	movs	r3, #1
 800bd58:	76fb      	strb	r3, [r7, #27]
 800bd5a:	e017      	b.n	800bd8c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd5c:	4b87      	ldr	r3, [pc, #540]	; (800bf7c <tcp_process+0x268>)
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	db10      	blt.n	800bd8c <tcp_process+0x78>
 800bd6a:	4b84      	ldr	r3, [pc, #528]	; (800bf7c <tcp_process+0x268>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd76:	440b      	add	r3, r1
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dc06      	bgt.n	800bd8c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7e9b      	ldrb	r3, [r3, #26]
 800bd82:	f043 0302 	orr.w	r3, r3, #2
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bd8c:	7efb      	ldrb	r3, [r7, #27]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d01b      	beq.n	800bdca <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7d1b      	ldrb	r3, [r3, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <tcp_process+0x94>
 800bd9a:	4b79      	ldr	r3, [pc, #484]	; (800bf80 <tcp_process+0x26c>)
 800bd9c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800bda0:	4978      	ldr	r1, [pc, #480]	; (800bf84 <tcp_process+0x270>)
 800bda2:	4879      	ldr	r0, [pc, #484]	; (800bf88 <tcp_process+0x274>)
 800bda4:	f007 fd8c 	bl	80138c0 <iprintf>
      recv_flags |= TF_RESET;
 800bda8:	4b78      	ldr	r3, [pc, #480]	; (800bf8c <tcp_process+0x278>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f043 0308 	orr.w	r3, r3, #8
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	4b76      	ldr	r3, [pc, #472]	; (800bf8c <tcp_process+0x278>)
 800bdb4:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	7e9b      	ldrb	r3, [r3, #26]
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800bdc4:	f06f 030d 	mvn.w	r3, #13
 800bdc8:	e348      	b.n	800c45c <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e346      	b.n	800c45c <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bdce:	4b69      	ldr	r3, [pc, #420]	; (800bf74 <tcp_process+0x260>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	f003 0302 	and.w	r3, r3, #2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d010      	beq.n	800bdfc <tcp_process+0xe8>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7d1b      	ldrb	r3, [r3, #20]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d00c      	beq.n	800bdfc <tcp_process+0xe8>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d008      	beq.n	800bdfc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7e9b      	ldrb	r3, [r3, #26]
 800bdee:	f043 0302 	orr.w	r3, r3, #2
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e32f      	b.n	800c45c <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7e9b      	ldrb	r3, [r3, #26]
 800be00:	f003 0310 	and.w	r3, r3, #16
 800be04:	2b00      	cmp	r3, #0
 800be06:	d103      	bne.n	800be10 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800be08:	4b61      	ldr	r3, [pc, #388]	; (800bf90 <tcp_process+0x27c>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f001 fbd9 	bl	800d5d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	7d1b      	ldrb	r3, [r3, #20]
 800be22:	3b02      	subs	r3, #2
 800be24:	2b07      	cmp	r3, #7
 800be26:	f200 8309 	bhi.w	800c43c <tcp_process+0x728>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <tcp_process+0x11c>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be51 	.word	0x0800be51
 800be34:	0800c047 	.word	0x0800c047
 800be38:	0800c19f 	.word	0x0800c19f
 800be3c:	0800c1c9 	.word	0x0800c1c9
 800be40:	0800c2eb 	.word	0x0800c2eb
 800be44:	0800c19f 	.word	0x0800c19f
 800be48:	0800c377 	.word	0x0800c377
 800be4c:	0800c407 	.word	0x0800c407
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800be50:	4b48      	ldr	r3, [pc, #288]	; (800bf74 <tcp_process+0x260>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	f003 0310 	and.w	r3, r3, #16
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 80ca 	beq.w	800bff2 <tcp_process+0x2de>
 800be5e:	4b45      	ldr	r3, [pc, #276]	; (800bf74 <tcp_process+0x260>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 0302 	and.w	r3, r3, #2
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 80c3 	beq.w	800bff2 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	4b41      	ldr	r3, [pc, #260]	; (800bf78 <tcp_process+0x264>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	429a      	cmp	r2, r3
 800be78:	f040 80bb 	bne.w	800bff2 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800be7c:	4b3f      	ldr	r3, [pc, #252]	; (800bf7c <tcp_process+0x268>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800be8e:	4b3a      	ldr	r3, [pc, #232]	; (800bf78 <tcp_process+0x264>)
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800be96:	4b3f      	ldr	r3, [pc, #252]	; (800bf94 <tcp_process+0x280>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	89db      	ldrh	r3, [r3, #14]
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800beb0:	4b32      	ldr	r3, [pc, #200]	; (800bf7c <tcp_process+0x268>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2204      	movs	r2, #4
 800bebe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f7ff f95a 	bl	800b184 <tcp_eff_send_mss_impl>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	f241 121c 	movw	r2, #4380	; 0x111c
 800bee2:	429a      	cmp	r2, r3
 800bee4:	bf38      	it	cc
 800bee6:	461a      	movcc	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4293      	cmp	r3, r2
 800bef0:	bf28      	it	cs
 800bef2:	4613      	movcs	r3, r2
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <tcp_process+0x200>
 800bf06:	4b1e      	ldr	r3, [pc, #120]	; (800bf80 <tcp_process+0x26c>)
 800bf08:	f240 321a 	movw	r2, #794	; 0x31a
 800bf0c:	4922      	ldr	r1, [pc, #136]	; (800bf98 <tcp_process+0x284>)
 800bf0e:	481e      	ldr	r0, [pc, #120]	; (800bf88 <tcp_process+0x274>)
 800bf10:	f007 fcd6 	bl	80138c0 <iprintf>
      --pcb->snd_queuelen;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf28:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d111      	bne.n	800bf54 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf34:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d106      	bne.n	800bf4a <tcp_process+0x236>
 800bf3c:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <tcp_process+0x26c>)
 800bf3e:	f240 3222 	movw	r2, #802	; 0x322
 800bf42:	4916      	ldr	r1, [pc, #88]	; (800bf9c <tcp_process+0x288>)
 800bf44:	4810      	ldr	r0, [pc, #64]	; (800bf88 <tcp_process+0x274>)
 800bf46:	f007 fcbb 	bl	80138c0 <iprintf>
        pcb->unsent = rseg->next;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	669a      	str	r2, [r3, #104]	; 0x68
 800bf52:	e003      	b.n	800bf5c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800bf5c:	69f8      	ldr	r0, [r7, #28]
 800bf5e:	f7fe fde5 	bl	800ab2c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d11a      	bne.n	800bfa0 <tcp_process+0x28c>
        pcb->rtime = -1;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf70:	861a      	strh	r2, [r3, #48]	; 0x30
 800bf72:	e01c      	b.n	800bfae <tcp_process+0x29a>
 800bf74:	20008dfc 	.word	0x20008dfc
 800bf78:	20008df4 	.word	0x20008df4
 800bf7c:	20008df0 	.word	0x20008df0
 800bf80:	08015610 	.word	0x08015610
 800bf84:	080157c8 	.word	0x080157c8
 800bf88:	08015654 	.word	0x08015654
 800bf8c:	20008dfd 	.word	0x20008dfd
 800bf90:	20008db8 	.word	0x20008db8
 800bf94:	20008de0 	.word	0x20008de0
 800bf98:	080157e8 	.word	0x080157e8
 800bf9c:	08015800 	.word	0x08015800
      } else {
        pcb->rtime = 0;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <tcp_process+0x2ba>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6910      	ldr	r0, [r2, #16]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4798      	blx	r3
 800bfc8:	4603      	mov	r3, r0
 800bfca:	76bb      	strb	r3, [r7, #26]
 800bfcc:	e001      	b.n	800bfd2 <tcp_process+0x2be>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800bfd2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfd6:	f113 0f0d 	cmn.w	r3, #13
 800bfda:	d102      	bne.n	800bfe2 <tcp_process+0x2ce>
        return ERR_ABRT;
 800bfdc:	f06f 030c 	mvn.w	r3, #12
 800bfe0:	e23c      	b.n	800c45c <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	7e9b      	ldrb	r3, [r3, #26]
 800bfe6:	f043 0302 	orr.w	r3, r3, #2
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800bff0:	e226      	b.n	800c440 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800bff2:	4b93      	ldr	r3, [pc, #588]	; (800c240 <tcp_process+0x52c>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	f003 0310 	and.w	r3, r3, #16
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8220 	beq.w	800c440 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c000:	4b90      	ldr	r3, [pc, #576]	; (800c244 <tcp_process+0x530>)
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	4b90      	ldr	r3, [pc, #576]	; (800c248 <tcp_process+0x534>)
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	461a      	mov	r2, r3
 800c00a:	4b90      	ldr	r3, [pc, #576]	; (800c24c <tcp_process+0x538>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c010:	4b8f      	ldr	r3, [pc, #572]	; (800c250 <tcp_process+0x53c>)
 800c012:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c014:	885b      	ldrh	r3, [r3, #2]
 800c016:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c018:	4a8d      	ldr	r2, [pc, #564]	; (800c250 <tcp_process+0x53c>)
 800c01a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c01c:	8812      	ldrh	r2, [r2, #0]
 800c01e:	b292      	uxth	r2, r2
 800c020:	9201      	str	r2, [sp, #4]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	4b8b      	ldr	r3, [pc, #556]	; (800c254 <tcp_process+0x540>)
 800c026:	4a8c      	ldr	r2, [pc, #560]	; (800c258 <tcp_process+0x544>)
 800c028:	f002 fc98 	bl	800e95c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c032:	2b05      	cmp	r3, #5
 800c034:	f200 8204 	bhi.w	800c440 <tcp_process+0x72c>
        pcb->rtime = 0;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f002 fd02 	bl	800ea48 <tcp_rexmit_rto>
    break;
 800c044:	e1fc      	b.n	800c440 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c046:	4b7e      	ldr	r3, [pc, #504]	; (800c240 <tcp_process+0x52c>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 0310 	and.w	r3, r3, #16
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 8091 	beq.w	800c176 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c054:	4b7b      	ldr	r3, [pc, #492]	; (800c244 <tcp_process+0x530>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	3b01      	subs	r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	db71      	blt.n	800c148 <tcp_process+0x434>
 800c064:	4b77      	ldr	r3, [pc, #476]	; (800c244 <tcp_process+0x530>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	dc6a      	bgt.n	800c148 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2204      	movs	r2, #4
 800c076:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00b      	beq.n	800c098 <tcp_process+0x384>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d106      	bne.n	800c098 <tcp_process+0x384>
 800c08a:	4b74      	ldr	r3, [pc, #464]	; (800c25c <tcp_process+0x548>)
 800c08c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c090:	4973      	ldr	r1, [pc, #460]	; (800c260 <tcp_process+0x54c>)
 800c092:	4874      	ldr	r0, [pc, #464]	; (800c264 <tcp_process+0x550>)
 800c094:	f007 fc14 	bl	80138c0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800c0a0:	23fa      	movs	r3, #250	; 0xfa
 800c0a2:	76bb      	strb	r3, [r7, #26]
 800c0a4:	e011      	b.n	800c0ca <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00a      	beq.n	800c0c6 <tcp_process+0x3b2>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	6910      	ldr	r0, [r2, #16]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	4798      	blx	r3
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	76bb      	strb	r3, [r7, #26]
 800c0c4:	e001      	b.n	800c0ca <tcp_process+0x3b6>
 800c0c6:	23f0      	movs	r3, #240	; 0xf0
 800c0c8:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800c0ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00a      	beq.n	800c0e8 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c0d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c0d6:	f113 0f0d 	cmn.w	r3, #13
 800c0da:	d002      	beq.n	800c0e2 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7fd ff3d 	bl	8009f5c <tcp_abort>
          }
          return ERR_ABRT;
 800c0e2:	f06f 030c 	mvn.w	r3, #12
 800c0e6:	e1b9      	b.n	800c45c <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fa3d 	bl	800c568 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800c0ee:	4b5e      	ldr	r3, [pc, #376]	; (800c268 <tcp_process+0x554>)
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d005      	beq.n	800c102 <tcp_process+0x3ee>
          recv_acked--;
 800c0f6:	4b5c      	ldr	r3, [pc, #368]	; (800c268 <tcp_process+0x554>)
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	4b5a      	ldr	r3, [pc, #360]	; (800c268 <tcp_process+0x554>)
 800c100:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	f241 121c 	movw	r2, #4380	; 0x111c
 800c10c:	429a      	cmp	r2, r3
 800c10e:	bf38      	it	cc
 800c110:	461a      	movcc	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4293      	cmp	r3, r2
 800c11a:	bf28      	it	cs
 800c11c:	4613      	movcs	r3, r2
 800c11e:	b29a      	uxth	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800c126:	4b51      	ldr	r3, [pc, #324]	; (800c26c <tcp_process+0x558>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d034      	beq.n	800c19c <tcp_process+0x488>
          tcp_ack_now(pcb);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	7e9b      	ldrb	r3, [r3, #26]
 800c136:	f043 0302 	orr.w	r3, r3, #2
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2207      	movs	r2, #7
 800c144:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800c146:	e029      	b.n	800c19c <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c148:	4b3e      	ldr	r3, [pc, #248]	; (800c244 <tcp_process+0x530>)
 800c14a:	6818      	ldr	r0, [r3, #0]
 800c14c:	4b3e      	ldr	r3, [pc, #248]	; (800c248 <tcp_process+0x534>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	4b3e      	ldr	r3, [pc, #248]	; (800c24c <tcp_process+0x538>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c158:	4b3d      	ldr	r3, [pc, #244]	; (800c250 <tcp_process+0x53c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c160:	4a3b      	ldr	r2, [pc, #236]	; (800c250 <tcp_process+0x53c>)
 800c162:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c164:	8812      	ldrh	r2, [r2, #0]
 800c166:	b292      	uxth	r2, r2
 800c168:	9201      	str	r2, [sp, #4]
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4b39      	ldr	r3, [pc, #228]	; (800c254 <tcp_process+0x540>)
 800c16e:	4a3a      	ldr	r2, [pc, #232]	; (800c258 <tcp_process+0x544>)
 800c170:	f002 fbf4 	bl	800e95c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800c174:	e166      	b.n	800c444 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c176:	4b32      	ldr	r3, [pc, #200]	; (800c240 <tcp_process+0x52c>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	f003 0302 	and.w	r3, r3, #2
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 8160 	beq.w	800c444 <tcp_process+0x730>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	1e5a      	subs	r2, r3, #1
 800c18a:	4b30      	ldr	r3, [pc, #192]	; (800c24c <tcp_process+0x538>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	f040 8158 	bne.w	800c444 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f002 fc8d 	bl	800eab4 <tcp_rexmit>
    break;
 800c19a:	e153      	b.n	800c444 <tcp_process+0x730>
 800c19c:	e152      	b.n	800c444 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f9e2 	bl	800c568 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c1a4:	4b31      	ldr	r3, [pc, #196]	; (800c26c <tcp_process+0x558>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	f003 0320 	and.w	r3, r3, #32
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 814b 	beq.w	800c448 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	7e9b      	ldrb	r3, [r3, #26]
 800c1b6:	f043 0302 	orr.w	r3, r3, #2
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2207      	movs	r2, #7
 800c1c4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c1c6:	e13f      	b.n	800c448 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f9cd 	bl	800c568 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c1ce:	4b27      	ldr	r3, [pc, #156]	; (800c26c <tcp_process+0x558>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d070      	beq.n	800c2bc <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1da:	4b19      	ldr	r3, [pc, #100]	; (800c240 <tcp_process+0x52c>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d05f      	beq.n	800c2a6 <tcp_process+0x592>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1ea:	4b16      	ldr	r3, [pc, #88]	; (800c244 <tcp_process+0x530>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d159      	bne.n	800c2a6 <tcp_process+0x592>
          pcb->unsent == NULL) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d155      	bne.n	800c2a6 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	7e9b      	ldrb	r3, [r3, #26]
 800c1fe:	f043 0302 	orr.w	r3, r3, #2
 800c202:	b2da      	uxtb	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7fe fee7 	bl	800afdc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c20e:	4b18      	ldr	r3, [pc, #96]	; (800c270 <tcp_process+0x55c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d105      	bne.n	800c224 <tcp_process+0x510>
 800c218:	4b15      	ldr	r3, [pc, #84]	; (800c270 <tcp_process+0x55c>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	4a14      	ldr	r2, [pc, #80]	; (800c270 <tcp_process+0x55c>)
 800c220:	6013      	str	r3, [r2, #0]
 800c222:	e02d      	b.n	800c280 <tcp_process+0x56c>
 800c224:	4b12      	ldr	r3, [pc, #72]	; (800c270 <tcp_process+0x55c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	617b      	str	r3, [r7, #20]
 800c22a:	e026      	b.n	800c27a <tcp_process+0x566>
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	429a      	cmp	r2, r3
 800c234:	d11e      	bne.n	800c274 <tcp_process+0x560>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68da      	ldr	r2, [r3, #12]
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	60da      	str	r2, [r3, #12]
 800c23e:	e01f      	b.n	800c280 <tcp_process+0x56c>
 800c240:	20008dfc 	.word	0x20008dfc
 800c244:	20008df4 	.word	0x20008df4
 800c248:	20008dfa 	.word	0x20008dfa
 800c24c:	20008df0 	.word	0x20008df0
 800c250:	20008de0 	.word	0x20008de0
 800c254:	200057dc 	.word	0x200057dc
 800c258:	200057e0 	.word	0x200057e0
 800c25c:	08015610 	.word	0x08015610
 800c260:	08015814 	.word	0x08015814
 800c264:	08015654 	.word	0x08015654
 800c268:	20008df8 	.word	0x20008df8
 800c26c:	20008dfd 	.word	0x20008dfd
 800c270:	20008dc4 	.word	0x20008dc4
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	617b      	str	r3, [r7, #20]
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1d5      	bne.n	800c22c <tcp_process+0x518>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	60da      	str	r2, [r3, #12]
 800c286:	4b77      	ldr	r3, [pc, #476]	; (800c464 <tcp_process+0x750>)
 800c288:	2201      	movs	r2, #1
 800c28a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	220a      	movs	r2, #10
 800c290:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c292:	4b75      	ldr	r3, [pc, #468]	; (800c468 <tcp_process+0x754>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	60da      	str	r2, [r3, #12]
 800c29a:	4a73      	ldr	r2, [pc, #460]	; (800c468 <tcp_process+0x754>)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6013      	str	r3, [r2, #0]
 800c2a0:	f002 fda4 	bl	800edec <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800c2a4:	e0d2      	b.n	800c44c <tcp_process+0x738>
        tcp_ack_now(pcb);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7e9b      	ldrb	r3, [r3, #26]
 800c2aa:	f043 0302 	orr.w	r3, r3, #2
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2208      	movs	r2, #8
 800c2b8:	751a      	strb	r2, [r3, #20]
    break;
 800c2ba:	e0c7      	b.n	800c44c <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c2bc:	4b6b      	ldr	r3, [pc, #428]	; (800c46c <tcp_process+0x758>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	f003 0310 	and.w	r3, r3, #16
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 80c1 	beq.w	800c44c <tcp_process+0x738>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2ce:	4b68      	ldr	r3, [pc, #416]	; (800c470 <tcp_process+0x75c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	f040 80ba 	bne.w	800c44c <tcp_process+0x738>
               pcb->unsent == NULL) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f040 80b5 	bne.w	800c44c <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2206      	movs	r2, #6
 800c2e6:	751a      	strb	r2, [r3, #20]
    break;
 800c2e8:	e0b0      	b.n	800c44c <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f93c 	bl	800c568 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c2f0:	4b60      	ldr	r3, [pc, #384]	; (800c474 <tcp_process+0x760>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	f003 0320 	and.w	r3, r3, #32
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 80a9 	beq.w	800c450 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	7e9b      	ldrb	r3, [r3, #26]
 800c302:	f043 0302 	orr.w	r3, r3, #2
 800c306:	b2da      	uxtb	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7fe fe65 	bl	800afdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c312:	4b59      	ldr	r3, [pc, #356]	; (800c478 <tcp_process+0x764>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d105      	bne.n	800c328 <tcp_process+0x614>
 800c31c:	4b56      	ldr	r3, [pc, #344]	; (800c478 <tcp_process+0x764>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	4a55      	ldr	r2, [pc, #340]	; (800c478 <tcp_process+0x764>)
 800c324:	6013      	str	r3, [r2, #0]
 800c326:	e013      	b.n	800c350 <tcp_process+0x63c>
 800c328:	4b53      	ldr	r3, [pc, #332]	; (800c478 <tcp_process+0x764>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	613b      	str	r3, [r7, #16]
 800c32e:	e00c      	b.n	800c34a <tcp_process+0x636>
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d104      	bne.n	800c344 <tcp_process+0x630>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	60da      	str	r2, [r3, #12]
 800c342:	e005      	b.n	800c350 <tcp_process+0x63c>
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	613b      	str	r3, [r7, #16]
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1ef      	bne.n	800c330 <tcp_process+0x61c>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	60da      	str	r2, [r3, #12]
 800c356:	4b43      	ldr	r3, [pc, #268]	; (800c464 <tcp_process+0x750>)
 800c358:	2201      	movs	r2, #1
 800c35a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	220a      	movs	r2, #10
 800c360:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c362:	4b41      	ldr	r3, [pc, #260]	; (800c468 <tcp_process+0x754>)
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60da      	str	r2, [r3, #12]
 800c36a:	4a3f      	ldr	r2, [pc, #252]	; (800c468 <tcp_process+0x754>)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	f002 fd3c 	bl	800edec <tcp_timer_needed>
    }
    break;
 800c374:	e06c      	b.n	800c450 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f8f6 	bl	800c568 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c37c:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <tcp_process+0x758>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b00      	cmp	r3, #0
 800c386:	d065      	beq.n	800c454 <tcp_process+0x740>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c38c:	4b38      	ldr	r3, [pc, #224]	; (800c470 <tcp_process+0x75c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d15f      	bne.n	800c454 <tcp_process+0x740>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d15b      	bne.n	800c454 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7fe fe1d 	bl	800afdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c3a2:	4b35      	ldr	r3, [pc, #212]	; (800c478 <tcp_process+0x764>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d105      	bne.n	800c3b8 <tcp_process+0x6a4>
 800c3ac:	4b32      	ldr	r3, [pc, #200]	; (800c478 <tcp_process+0x764>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	4a31      	ldr	r2, [pc, #196]	; (800c478 <tcp_process+0x764>)
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	e013      	b.n	800c3e0 <tcp_process+0x6cc>
 800c3b8:	4b2f      	ldr	r3, [pc, #188]	; (800c478 <tcp_process+0x764>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	e00c      	b.n	800c3da <tcp_process+0x6c6>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d104      	bne.n	800c3d4 <tcp_process+0x6c0>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	60da      	str	r2, [r3, #12]
 800c3d2:	e005      	b.n	800c3e0 <tcp_process+0x6cc>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1ef      	bne.n	800c3c0 <tcp_process+0x6ac>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	60da      	str	r2, [r3, #12]
 800c3e6:	4b1f      	ldr	r3, [pc, #124]	; (800c464 <tcp_process+0x750>)
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	220a      	movs	r2, #10
 800c3f0:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c3f2:	4b1d      	ldr	r3, [pc, #116]	; (800c468 <tcp_process+0x754>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	60da      	str	r2, [r3, #12]
 800c3fa:	4a1b      	ldr	r2, [pc, #108]	; (800c468 <tcp_process+0x754>)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	f002 fcf4 	bl	800edec <tcp_timer_needed>
    }
    break;
 800c404:	e026      	b.n	800c454 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f8ae 	bl	800c568 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c40c:	4b17      	ldr	r3, [pc, #92]	; (800c46c <tcp_process+0x758>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d01f      	beq.n	800c458 <tcp_process+0x744>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c41c:	4b14      	ldr	r3, [pc, #80]	; (800c470 <tcp_process+0x75c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d119      	bne.n	800c458 <tcp_process+0x744>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d115      	bne.n	800c458 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800c42c:	4b11      	ldr	r3, [pc, #68]	; (800c474 <tcp_process+0x760>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	f043 0310 	orr.w	r3, r3, #16
 800c434:	b2da      	uxtb	r2, r3
 800c436:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <tcp_process+0x760>)
 800c438:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c43a:	e00d      	b.n	800c458 <tcp_process+0x744>
  default:
    break;
 800c43c:	bf00      	nop
 800c43e:	e00c      	b.n	800c45a <tcp_process+0x746>
    break;
 800c440:	bf00      	nop
 800c442:	e00a      	b.n	800c45a <tcp_process+0x746>
    break;
 800c444:	bf00      	nop
 800c446:	e008      	b.n	800c45a <tcp_process+0x746>
    break;
 800c448:	bf00      	nop
 800c44a:	e006      	b.n	800c45a <tcp_process+0x746>
    break;
 800c44c:	bf00      	nop
 800c44e:	e004      	b.n	800c45a <tcp_process+0x746>
    break;
 800c450:	bf00      	nop
 800c452:	e002      	b.n	800c45a <tcp_process+0x746>
    break;
 800c454:	bf00      	nop
 800c456:	e000      	b.n	800c45a <tcp_process+0x746>
    break;
 800c458:	bf00      	nop
  }
  return ERR_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3720      	adds	r7, #32
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	20008dcc 	.word	0x20008dcc
 800c468:	20008dc8 	.word	0x20008dc8
 800c46c:	20008dfc 	.word	0x20008dfc
 800c470:	20008df4 	.word	0x20008df4
 800c474:	20008dfd 	.word	0x20008dfd
 800c478:	20008dc4 	.word	0x20008dc4

0800c47c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c47c:	b590      	push	{r4, r7, lr}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	899b      	ldrh	r3, [r3, #12]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fb fb49 	bl	8007b26 <lwip_htons>
 800c494:	4603      	mov	r3, r0
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d027      	beq.n	800c4ee <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c49e:	6838      	ldr	r0, [r7, #0]
 800c4a0:	f7fe fb2f 	bl	800ab02 <tcp_segs_free>
    next = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	e055      	b.n	800c556 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	899b      	ldrh	r3, [r3, #12]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fb fb37 	bl	8007b26 <lwip_htons>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00d      	beq.n	800c4de <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	899b      	ldrh	r3, [r3, #12]
 800c4c8:	b29c      	uxth	r4, r3
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	f7fb fb2b 	bl	8007b26 <lwip_htons>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	4322      	orrs	r2, r4
 800c4da:	b292      	uxth	r2, r2
 800c4dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7fe fb1f 	bl	800ab2c <tcp_seg_free>
    while (next &&
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00e      	beq.n	800c512 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	891b      	ldrh	r3, [r3, #8]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <tcp_oos_insert_segment+0xe8>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	441a      	add	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	8909      	ldrh	r1, [r1, #8]
 800c50a:	440b      	add	r3, r1
 800c50c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c50e:	2b00      	cmp	r3, #0
 800c510:	dacb      	bge.n	800c4aa <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d01e      	beq.n	800c556 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	891b      	ldrh	r3, [r3, #8]
 800c51c:	461a      	mov	r2, r3
 800c51e:	4b11      	ldr	r3, [pc, #68]	; (800c564 <tcp_oos_insert_segment+0xe8>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	441a      	add	r2, r3
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd12      	ble.n	800c556 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	b29a      	uxth	r2, r3
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <tcp_oos_insert_segment+0xe8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	b29a      	uxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	891b      	ldrh	r3, [r3, #8]
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7fc fd47 	bl	8008fe4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	601a      	str	r2, [r3, #0]
}
 800c55c:	bf00      	nop
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	bd90      	pop	{r4, r7, pc}
 800c564:	20008df0 	.word	0x20008df0

0800c568 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c56a:	b08d      	sub	sp, #52	; 0x34
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	7d1b      	ldrb	r3, [r3, #20]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d806      	bhi.n	800c58a <tcp_receive+0x22>
 800c57c:	4b98      	ldr	r3, [pc, #608]	; (800c7e0 <tcp_receive+0x278>)
 800c57e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c582:	4998      	ldr	r1, [pc, #608]	; (800c7e4 <tcp_receive+0x27c>)
 800c584:	4898      	ldr	r0, [pc, #608]	; (800c7e8 <tcp_receive+0x280>)
 800c586:	f007 f99b 	bl	80138c0 <iprintf>

  if (flags & TCP_ACK) {
 800c58a:	4b98      	ldr	r3, [pc, #608]	; (800c7ec <tcp_receive+0x284>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 0310 	and.w	r3, r3, #16
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 82c1 	beq.w	800cb1a <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c59e:	461a      	mov	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5a4:	4413      	add	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5ac:	4b90      	ldr	r3, [pc, #576]	; (800c7f0 <tcp_receive+0x288>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	db1b      	blt.n	800c5ee <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5ba:	4b8d      	ldr	r3, [pc, #564]	; (800c7f0 <tcp_receive+0x288>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d106      	bne.n	800c5d0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5c6:	4b8b      	ldr	r3, [pc, #556]	; (800c7f4 <tcp_receive+0x28c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	db0e      	blt.n	800c5ee <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5d4:	4b87      	ldr	r3, [pc, #540]	; (800c7f4 <tcp_receive+0x28c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d141      	bne.n	800c660 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5dc:	4b86      	ldr	r3, [pc, #536]	; (800c7f8 <tcp_receive+0x290>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	89db      	ldrh	r3, [r3, #14]
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d938      	bls.n	800c660 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5ee:	4b82      	ldr	r3, [pc, #520]	; (800c7f8 <tcp_receive+0x290>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	89db      	ldrh	r3, [r3, #14]
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c608:	429a      	cmp	r2, r3
 800c60a:	d205      	bcs.n	800c618 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800c618:	4b75      	ldr	r3, [pc, #468]	; (800c7f0 <tcp_receive+0x288>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800c620:	4b74      	ldr	r3, [pc, #464]	; (800c7f4 <tcp_receive+0x28c>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10d      	bne.n	800c64e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d111      	bne.n	800c660 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c64c:	e008      	b.n	800c660 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c660:	4b64      	ldr	r3, [pc, #400]	; (800c7f4 <tcp_receive+0x28c>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dc53      	bgt.n	800c716 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800c66e:	4b63      	ldr	r3, [pc, #396]	; (800c7fc <tcp_receive+0x294>)
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d146      	bne.n	800c704 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c680:	4413      	add	r3, r2
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	429a      	cmp	r2, r3
 800c686:	d13d      	bne.n	800c704 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c68e:	2b00      	cmp	r3, #0
 800c690:	db38      	blt.n	800c704 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c696:	4b57      	ldr	r3, [pc, #348]	; (800c7f4 <tcp_receive+0x28c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d132      	bne.n	800c704 <tcp_receive+0x19c>
              found_dupack = 1;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6a8:	2bff      	cmp	r3, #255	; 0xff
 800c6aa:	d007      	beq.n	800c6bc <tcp_receive+0x154>
                ++pcb->dupacks;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d916      	bls.n	800c6f4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d0:	4413      	add	r3, r2
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d912      	bls.n	800c704 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6e8:	4413      	add	r3, r2
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c6f2:	e007      	b.n	800c704 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d102      	bne.n	800c704 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f002 fa28 	bl	800eb54 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 816a 	bne.w	800c9e0 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c714:	e164      	b.n	800c9e0 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c716:	4b37      	ldr	r3, [pc, #220]	; (800c7f4 <tcp_receive+0x28c>)
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	3b01      	subs	r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	f2c0 8108 	blt.w	800c938 <tcp_receive+0x3d0>
 800c728:	4b32      	ldr	r3, [pc, #200]	; (800c7f4 <tcp_receive+0x28c>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	f300 8100 	bgt.w	800c938 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7e9b      	ldrb	r3, [r3, #26]
 800c73c:	f003 0304 	and.w	r3, r3, #4
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00c      	beq.n	800c75e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7e9b      	ldrb	r3, [r3, #26]
 800c748:	f023 0304 	bic.w	r3, r3, #4
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c76c:	10db      	asrs	r3, r3, #3
 800c76e:	b21b      	sxth	r3, r3
 800c770:	b29a      	uxth	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c778:	b29b      	uxth	r3, r3
 800c77a:	4413      	add	r3, r2
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	b21a      	sxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c78e:	4b19      	ldr	r3, [pc, #100]	; (800c7f4 <tcp_receive+0x28c>)
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	7d1b      	ldrb	r3, [r3, #20]
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	f240 8095 	bls.w	800c8ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d227      	bcs.n	800c800 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7ba:	4413      	add	r3, r2
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	f240 8080 	bls.w	800c8ca <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7d4:	4413      	add	r3, r2
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c7de:	e074      	b.n	800c8ca <tcp_receive+0x362>
 800c7e0:	08015610 	.word	0x08015610
 800c7e4:	08015834 	.word	0x08015834
 800c7e8:	08015654 	.word	0x08015654
 800c7ec:	20008dfc 	.word	0x20008dfc
 800c7f0:	20008df0 	.word	0x20008df0
 800c7f4:	20008df4 	.word	0x20008df4
 800c7f8:	20008de0 	.word	0x20008de0
 800c7fc:	20008dfa 	.word	0x20008dfa
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c80a:	4619      	mov	r1, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c810:	fb01 f303 	mul.w	r3, r1, r3
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800c81a:	fb93 f3f1 	sdiv	r3, r3, r1
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4413      	add	r3, r2
 800c822:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c82a:	8a7a      	ldrh	r2, [r7, #18]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d94c      	bls.n	800c8ca <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8a7a      	ldrh	r2, [r7, #18]
 800c834:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c838:	e047      	b.n	800c8ca <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4618      	mov	r0, r3
 800c856:	f7fc fdcd 	bl	80093f4 <pbuf_clen>
 800c85a:	4603      	mov	r3, r0
 800c85c:	429c      	cmp	r4, r3
 800c85e:	d206      	bcs.n	800c86e <tcp_receive+0x306>
 800c860:	4b70      	ldr	r3, [pc, #448]	; (800ca24 <tcp_receive+0x4bc>)
 800c862:	f240 429e 	movw	r2, #1182	; 0x49e
 800c866:	4970      	ldr	r1, [pc, #448]	; (800ca28 <tcp_receive+0x4c0>)
 800c868:	4870      	ldr	r0, [pc, #448]	; (800ca2c <tcp_receive+0x4c4>)
 800c86a:	f007 f829 	bl	80138c0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	4618      	mov	r0, r3
 800c874:	f7fc fdbe 	bl	80093f4 <pbuf_clen>
 800c878:	4603      	mov	r3, r0
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c882:	1a9b      	subs	r3, r3, r2
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	891a      	ldrh	r2, [r3, #8]
 800c890:	4b67      	ldr	r3, [pc, #412]	; (800ca30 <tcp_receive+0x4c8>)
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	4413      	add	r3, r2
 800c896:	b29a      	uxth	r2, r3
 800c898:	4b65      	ldr	r3, [pc, #404]	; (800ca30 <tcp_receive+0x4c8>)
 800c89a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800c89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c89e:	f7fe f945 	bl	800ab2c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00e      	beq.n	800c8ca <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <tcp_receive+0x362>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <tcp_receive+0x362>
 800c8bc:	4b59      	ldr	r3, [pc, #356]	; (800ca24 <tcp_receive+0x4bc>)
 800c8be:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800c8c2:	495c      	ldr	r1, [pc, #368]	; (800ca34 <tcp_receive+0x4cc>)
 800c8c4:	4859      	ldr	r0, [pc, #356]	; (800ca2c <tcp_receive+0x4c4>)
 800c8c6:	f006 fffb 	bl	80138c0 <iprintf>
      while (pcb->unacked != NULL &&
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d022      	beq.n	800c918 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fb f930 	bl	8007b40 <lwip_htonl>
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e6:	891b      	ldrh	r3, [r3, #8]
 800c8e8:	461d      	mov	r5, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	899b      	ldrh	r3, [r3, #12]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fb f916 	bl	8007b26 <lwip_htons>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f003 0303 	and.w	r3, r3, #3
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <tcp_receive+0x3a0>
 800c904:	2301      	movs	r3, #1
 800c906:	e000      	b.n	800c90a <tcp_receive+0x3a2>
 800c908:	2300      	movs	r3, #0
 800c90a:	442b      	add	r3, r5
 800c90c:	18e2      	adds	r2, r4, r3
 800c90e:	4b4a      	ldr	r3, [pc, #296]	; (800ca38 <tcp_receive+0x4d0>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800c914:	2b00      	cmp	r3, #0
 800c916:	dd90      	ble.n	800c83a <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d104      	bne.n	800c92a <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c926:	861a      	strh	r2, [r3, #48]	; 0x30
 800c928:	e002      	b.n	800c930 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	76da      	strb	r2, [r3, #27]
 800c936:	e002      	b.n	800c93e <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 fd2f 	bl	800e39c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c93e:	e04f      	b.n	800c9e0 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fc fd42 	bl	80093f4 <pbuf_clen>
 800c970:	4603      	mov	r3, r0
 800c972:	429c      	cmp	r4, r3
 800c974:	d206      	bcs.n	800c984 <tcp_receive+0x41c>
 800c976:	4b2b      	ldr	r3, [pc, #172]	; (800ca24 <tcp_receive+0x4bc>)
 800c978:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c97c:	492a      	ldr	r1, [pc, #168]	; (800ca28 <tcp_receive+0x4c0>)
 800c97e:	482b      	ldr	r0, [pc, #172]	; (800ca2c <tcp_receive+0x4c4>)
 800c980:	f006 ff9e 	bl	80138c0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fc fd33 	bl	80093f4 <pbuf_clen>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c998:	1a9b      	subs	r3, r3, r2
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a4:	891a      	ldrh	r2, [r3, #8]
 800c9a6:	4b22      	ldr	r3, [pc, #136]	; (800ca30 <tcp_receive+0x4c8>)
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	4b20      	ldr	r3, [pc, #128]	; (800ca30 <tcp_receive+0x4c8>)
 800c9b0:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800c9b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9b4:	f7fe f8ba 	bl	800ab2c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00e      	beq.n	800c9e0 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10a      	bne.n	800c9e0 <tcp_receive+0x478>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d106      	bne.n	800c9e0 <tcp_receive+0x478>
 800c9d2:	4b14      	ldr	r3, [pc, #80]	; (800ca24 <tcp_receive+0x4bc>)
 800c9d4:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800c9d8:	4916      	ldr	r1, [pc, #88]	; (800ca34 <tcp_receive+0x4cc>)
 800c9da:	4814      	ldr	r0, [pc, #80]	; (800ca2c <tcp_receive+0x4c4>)
 800c9dc:	f006 ff70 	bl	80138c0 <iprintf>
    while (pcb->unsent != NULL &&
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d037      	beq.n	800ca58 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c9e8:	4b13      	ldr	r3, [pc, #76]	; (800ca38 <tcp_receive+0x4d0>)
 800c9ea:	681c      	ldr	r4, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fb f8a3 	bl	8007b40 <lwip_htonl>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca00:	891b      	ldrh	r3, [r3, #8]
 800ca02:	461e      	mov	r6, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	899b      	ldrh	r3, [r3, #12]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fb f889 	bl	8007b26 <lwip_htons>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00e      	beq.n	800ca3c <tcp_receive+0x4d4>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e00d      	b.n	800ca3e <tcp_receive+0x4d6>
 800ca22:	bf00      	nop
 800ca24:	08015610 	.word	0x08015610
 800ca28:	08015850 	.word	0x08015850
 800ca2c:	08015654 	.word	0x08015654
 800ca30:	20008df8 	.word	0x20008df8
 800ca34:	08015878 	.word	0x08015878
 800ca38:	20008df4 	.word	0x20008df4
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4433      	add	r3, r6
 800ca40:	442b      	add	r3, r5
 800ca42:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	db07      	blt.n	800ca58 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800ca48:	4b8d      	ldr	r3, [pc, #564]	; (800cc80 <tcp_receive+0x718>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f77f af74 	ble.w	800c940 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca5e:	4b89      	ldr	r3, [pc, #548]	; (800cc84 <tcp_receive+0x71c>)
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	4413      	add	r3, r2
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d052      	beq.n	800cb1a <tcp_receive+0x5b2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca78:	4b81      	ldr	r3, [pc, #516]	; (800cc80 <tcp_receive+0x718>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	da4b      	bge.n	800cb1a <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ca82:	4b81      	ldr	r3, [pc, #516]	; (800cc88 <tcp_receive+0x720>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800ca94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca9c:	10db      	asrs	r3, r3, #3
 800ca9e:	b21b      	sxth	r3, r3
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800caae:	b29a      	uxth	r2, r3
 800cab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cab2:	4413      	add	r3, r2
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	b21a      	sxth	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cabc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	da03      	bge.n	800cacc <tcp_receive+0x564>
        m = -m;
 800cac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cac6:	425b      	negs	r3, r3
 800cac8:	b29b      	uxth	r3, r3
 800caca:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800cacc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cad4:	109b      	asrs	r3, r3, #2
 800cad6:	b21b      	sxth	r3, r3
 800cad8:	b29b      	uxth	r3, r3
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	b29b      	uxth	r3, r3
 800cade:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caea:	4413      	add	r3, r2
 800caec:	b29b      	uxth	r3, r3
 800caee:	b21a      	sxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cafa:	10db      	asrs	r3, r3, #3
 800cafc:	b21b      	sxth	r3, r3
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	4413      	add	r3, r2
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	b21a      	sxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cb1a:	4b5c      	ldr	r3, [pc, #368]	; (800cc8c <tcp_receive+0x724>)
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 84f1 	beq.w	800d506 <tcp_receive+0xf9e>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	7d1b      	ldrb	r3, [r3, #20]
 800cb28:	2b06      	cmp	r3, #6
 800cb2a:	f200 84ec 	bhi.w	800d506 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb32:	4b57      	ldr	r3, [pc, #348]	; (800cc90 <tcp_receive+0x728>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f2c0 80b8 	blt.w	800ccb0 <tcp_receive+0x748>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb44:	4b51      	ldr	r3, [pc, #324]	; (800cc8c <tcp_receive+0x724>)
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4b51      	ldr	r3, [pc, #324]	; (800cc90 <tcp_receive+0x728>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	440b      	add	r3, r1
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	3301      	adds	r3, #1
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f300 80ab 	bgt.w	800ccb0 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cb5a:	4b4e      	ldr	r3, [pc, #312]	; (800cc94 <tcp_receive+0x72c>)
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb64:	4b4a      	ldr	r3, [pc, #296]	; (800cc90 <tcp_receive+0x728>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cb6c:	4b49      	ldr	r3, [pc, #292]	; (800cc94 <tcp_receive+0x72c>)
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d106      	bne.n	800cb82 <tcp_receive+0x61a>
 800cb74:	4b48      	ldr	r3, [pc, #288]	; (800cc98 <tcp_receive+0x730>)
 800cb76:	f240 523c 	movw	r2, #1340	; 0x53c
 800cb7a:	4948      	ldr	r1, [pc, #288]	; (800cc9c <tcp_receive+0x734>)
 800cb7c:	4848      	ldr	r0, [pc, #288]	; (800cca0 <tcp_receive+0x738>)
 800cb7e:	f006 fe9f 	bl	80138c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	dd06      	ble.n	800cb9a <tcp_receive+0x632>
 800cb8c:	4b42      	ldr	r3, [pc, #264]	; (800cc98 <tcp_receive+0x730>)
 800cb8e:	f240 523d 	movw	r2, #1341	; 0x53d
 800cb92:	4944      	ldr	r1, [pc, #272]	; (800cca4 <tcp_receive+0x73c>)
 800cb94:	4842      	ldr	r0, [pc, #264]	; (800cca0 <tcp_receive+0x738>)
 800cb96:	f006 fe93 	bl	80138c0 <iprintf>
      if (inseg.p->len < off) {
 800cb9a:	4b3e      	ldr	r3, [pc, #248]	; (800cc94 <tcp_receive+0x72c>)
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	895b      	ldrh	r3, [r3, #10]
 800cba0:	461a      	mov	r2, r3
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	4293      	cmp	r3, r2
 800cba6:	dd3e      	ble.n	800cc26 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cba8:	4b3a      	ldr	r3, [pc, #232]	; (800cc94 <tcp_receive+0x72c>)
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	891b      	ldrh	r3, [r3, #8]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	dd06      	ble.n	800cbc4 <tcp_receive+0x65c>
 800cbb6:	4b38      	ldr	r3, [pc, #224]	; (800cc98 <tcp_receive+0x730>)
 800cbb8:	f240 523f 	movw	r2, #1343	; 0x53f
 800cbbc:	493a      	ldr	r1, [pc, #232]	; (800cca8 <tcp_receive+0x740>)
 800cbbe:	4838      	ldr	r0, [pc, #224]	; (800cca0 <tcp_receive+0x738>)
 800cbc0:	f006 fe7e 	bl	80138c0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cbc4:	4b33      	ldr	r3, [pc, #204]	; (800cc94 <tcp_receive+0x72c>)
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	891a      	ldrh	r2, [r3, #8]
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800cbd2:	e00e      	b.n	800cbf2 <tcp_receive+0x68a>
          off -= p->len;
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	895b      	ldrh	r3, [r3, #10]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	1a9b      	subs	r3, r3, r2
 800cbde:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	8a3a      	ldrh	r2, [r7, #16]
 800cbe4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	895b      	ldrh	r3, [r3, #10]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	dcea      	bgt.n	800cbd4 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	425b      	negs	r3, r3
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	b21b      	sxth	r3, r3
 800cc08:	4619      	mov	r1, r3
 800cc0a:	69b8      	ldr	r0, [r7, #24]
 800cc0c:	f7fc fb3a 	bl	8009284 <pbuf_header>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01c      	beq.n	800cc50 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800cc16:	4b20      	ldr	r3, [pc, #128]	; (800cc98 <tcp_receive+0x730>)
 800cc18:	f240 524c 	movw	r2, #1356	; 0x54c
 800cc1c:	4923      	ldr	r1, [pc, #140]	; (800ccac <tcp_receive+0x744>)
 800cc1e:	4820      	ldr	r0, [pc, #128]	; (800cca0 <tcp_receive+0x738>)
 800cc20:	f006 fe4e 	bl	80138c0 <iprintf>
 800cc24:	e014      	b.n	800cc50 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800cc26:	4b1b      	ldr	r3, [pc, #108]	; (800cc94 <tcp_receive+0x72c>)
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc2c:	b292      	uxth	r2, r2
 800cc2e:	4252      	negs	r2, r2
 800cc30:	b292      	uxth	r2, r2
 800cc32:	b212      	sxth	r2, r2
 800cc34:	4611      	mov	r1, r2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fc fb24 	bl	8009284 <pbuf_header>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d006      	beq.n	800cc50 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800cc42:	4b15      	ldr	r3, [pc, #84]	; (800cc98 <tcp_receive+0x730>)
 800cc44:	f240 5251 	movw	r2, #1361	; 0x551
 800cc48:	4918      	ldr	r1, [pc, #96]	; (800ccac <tcp_receive+0x744>)
 800cc4a:	4815      	ldr	r0, [pc, #84]	; (800cca0 <tcp_receive+0x738>)
 800cc4c:	f006 fe38 	bl	80138c0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800cc50:	4b10      	ldr	r3, [pc, #64]	; (800cc94 <tcp_receive+0x72c>)
 800cc52:	891a      	ldrh	r2, [r3, #8]
 800cc54:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <tcp_receive+0x728>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	b299      	uxth	r1, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	1acb      	subs	r3, r1, r3
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	4413      	add	r3, r2
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <tcp_receive+0x72c>)
 800cc6a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc70:	4a07      	ldr	r2, [pc, #28]	; (800cc90 <tcp_receive+0x728>)
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <tcp_receive+0x72c>)
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	4a05      	ldr	r2, [pc, #20]	; (800cc90 <tcp_receive+0x728>)
 800cc7a:	6812      	ldr	r2, [r2, #0]
 800cc7c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cc7e:	e025      	b.n	800cccc <tcp_receive+0x764>
 800cc80:	20008df4 	.word	0x20008df4
 800cc84:	20008df8 	.word	0x20008df8
 800cc88:	20008db8 	.word	0x20008db8
 800cc8c:	20008dfa 	.word	0x20008dfa
 800cc90:	20008df0 	.word	0x20008df0
 800cc94:	20008dd0 	.word	0x20008dd0
 800cc98:	08015610 	.word	0x08015610
 800cc9c:	08015898 	.word	0x08015898
 800cca0:	08015654 	.word	0x08015654
 800cca4:	080158a8 	.word	0x080158a8
 800cca8:	080158b8 	.word	0x080158b8
 800ccac:	080158c8 	.word	0x080158c8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ccb0:	4b87      	ldr	r3, [pc, #540]	; (800ced0 <tcp_receive+0x968>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	da06      	bge.n	800cccc <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	7e9b      	ldrb	r3, [r3, #26]
 800ccc2:	f043 0302 	orr.w	r3, r3, #2
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cccc:	4b80      	ldr	r3, [pc, #512]	; (800ced0 <tcp_receive+0x968>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f2c0 8410 	blt.w	800d4fc <tcp_receive+0xf94>
 800ccdc:	4b7c      	ldr	r3, [pc, #496]	; (800ced0 <tcp_receive+0x968>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cce8:	440b      	add	r3, r1
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	3301      	adds	r3, #1
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f300 8404 	bgt.w	800d4fc <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf8:	4b75      	ldr	r3, [pc, #468]	; (800ced0 <tcp_receive+0x968>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f040 8287 	bne.w	800d210 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cd02:	4b74      	ldr	r3, [pc, #464]	; (800ced4 <tcp_receive+0x96c>)
 800cd04:	891c      	ldrh	r4, [r3, #8]
 800cd06:	4b73      	ldr	r3, [pc, #460]	; (800ced4 <tcp_receive+0x96c>)
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	899b      	ldrh	r3, [r3, #12]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fa ff09 	bl	8007b26 <lwip_htons>
 800cd14:	4603      	mov	r3, r0
 800cd16:	f003 0303 	and.w	r3, r3, #3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <tcp_receive+0x7ba>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e000      	b.n	800cd24 <tcp_receive+0x7bc>
 800cd22:	2300      	movs	r3, #0
 800cd24:	4423      	add	r3, r4
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	4b6b      	ldr	r3, [pc, #428]	; (800ced8 <tcp_receive+0x970>)
 800cd2a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd30:	4b69      	ldr	r3, [pc, #420]	; (800ced8 <tcp_receive+0x970>)
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d26e      	bcs.n	800ce16 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd38:	4b66      	ldr	r3, [pc, #408]	; (800ced4 <tcp_receive+0x96c>)
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	899b      	ldrh	r3, [r3, #12]
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fa fef0 	bl	8007b26 <lwip_htons>
 800cd46:	4603      	mov	r3, r0
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01b      	beq.n	800cd88 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cd50:	4b60      	ldr	r3, [pc, #384]	; (800ced4 <tcp_receive+0x96c>)
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd5c:	b29c      	uxth	r4, r3
 800cd5e:	4b5d      	ldr	r3, [pc, #372]	; (800ced4 <tcp_receive+0x96c>)
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fa fedd 	bl	8007b26 <lwip_htons>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fa fed6 	bl	8007b26 <lwip_htons>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	4b55      	ldr	r3, [pc, #340]	; (800ced4 <tcp_receive+0x96c>)
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	4322      	orrs	r2, r4
 800cd84:	b292      	uxth	r2, r2
 800cd86:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd8c:	4b51      	ldr	r3, [pc, #324]	; (800ced4 <tcp_receive+0x96c>)
 800cd8e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cd90:	4b50      	ldr	r3, [pc, #320]	; (800ced4 <tcp_receive+0x96c>)
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	899b      	ldrh	r3, [r3, #12]
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fa fec4 	bl	8007b26 <lwip_htons>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f003 0302 	and.w	r3, r3, #2
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d005      	beq.n	800cdb4 <tcp_receive+0x84c>
            inseg.len -= 1;
 800cda8:	4b4a      	ldr	r3, [pc, #296]	; (800ced4 <tcp_receive+0x96c>)
 800cdaa:	891b      	ldrh	r3, [r3, #8]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	4b48      	ldr	r3, [pc, #288]	; (800ced4 <tcp_receive+0x96c>)
 800cdb2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cdb4:	4b47      	ldr	r3, [pc, #284]	; (800ced4 <tcp_receive+0x96c>)
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	4a46      	ldr	r2, [pc, #280]	; (800ced4 <tcp_receive+0x96c>)
 800cdba:	8912      	ldrh	r2, [r2, #8]
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fc f910 	bl	8008fe4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cdc4:	4b43      	ldr	r3, [pc, #268]	; (800ced4 <tcp_receive+0x96c>)
 800cdc6:	891c      	ldrh	r4, [r3, #8]
 800cdc8:	4b42      	ldr	r3, [pc, #264]	; (800ced4 <tcp_receive+0x96c>)
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	899b      	ldrh	r3, [r3, #12]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fa fea8 	bl	8007b26 <lwip_htons>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <tcp_receive+0x87c>
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <tcp_receive+0x87e>
 800cde4:	2300      	movs	r3, #0
 800cde6:	4423      	add	r3, r4
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	4b3b      	ldr	r3, [pc, #236]	; (800ced8 <tcp_receive+0x970>)
 800cdec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cdee:	4b3a      	ldr	r3, [pc, #232]	; (800ced8 <tcp_receive+0x970>)
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	4b36      	ldr	r3, [pc, #216]	; (800ced0 <tcp_receive+0x968>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	441a      	add	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce02:	440b      	add	r3, r1
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d006      	beq.n	800ce16 <tcp_receive+0x8ae>
 800ce08:	4b34      	ldr	r3, [pc, #208]	; (800cedc <tcp_receive+0x974>)
 800ce0a:	f240 527e 	movw	r2, #1406	; 0x57e
 800ce0e:	4934      	ldr	r1, [pc, #208]	; (800cee0 <tcp_receive+0x978>)
 800ce10:	4834      	ldr	r0, [pc, #208]	; (800cee4 <tcp_receive+0x97c>)
 800ce12:	f006 fd55 	bl	80138c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 80e1 	beq.w	800cfe2 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ce20:	4b2c      	ldr	r3, [pc, #176]	; (800ced4 <tcp_receive+0x96c>)
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	899b      	ldrh	r3, [r3, #12]
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fa fe7c 	bl	8007b26 <lwip_htons>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d010      	beq.n	800ce5a <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ce38:	e00a      	b.n	800ce50 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce3e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ce4a:	68b8      	ldr	r0, [r7, #8]
 800ce4c:	f7fd fe6e 	bl	800ab2c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1f0      	bne.n	800ce3a <tcp_receive+0x8d2>
 800ce58:	e0c3      	b.n	800cfe2 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ce60:	e04f      	b.n	800cf02 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	899b      	ldrh	r3, [r3, #12]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fa fe5b 	bl	8007b26 <lwip_htons>
 800ce70:	4603      	mov	r3, r0
 800ce72:	f003 0301 	and.w	r3, r3, #1
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d03b      	beq.n	800cef2 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ce7a:	4b16      	ldr	r3, [pc, #88]	; (800ced4 <tcp_receive+0x96c>)
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	899b      	ldrh	r3, [r3, #12]
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fa fe4f 	bl	8007b26 <lwip_htons>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d12f      	bne.n	800cef2 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ce92:	4b10      	ldr	r3, [pc, #64]	; (800ced4 <tcp_receive+0x96c>)
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	899b      	ldrh	r3, [r3, #12]
 800ce98:	b29c      	uxth	r4, r3
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	f7fa fe43 	bl	8007b26 <lwip_htons>
 800cea0:	4603      	mov	r3, r0
 800cea2:	461a      	mov	r2, r3
 800cea4:	4b0b      	ldr	r3, [pc, #44]	; (800ced4 <tcp_receive+0x96c>)
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	4322      	orrs	r2, r4
 800ceaa:	b292      	uxth	r2, r2
 800ceac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <tcp_receive+0x96c>)
 800ceb0:	891c      	ldrh	r4, [r3, #8]
 800ceb2:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <tcp_receive+0x96c>)
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	899b      	ldrh	r3, [r3, #12]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fa fe33 	bl	8007b26 <lwip_htons>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00e      	beq.n	800cee8 <tcp_receive+0x980>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e00d      	b.n	800ceea <tcp_receive+0x982>
 800cece:	bf00      	nop
 800ced0:	20008df0 	.word	0x20008df0
 800ced4:	20008dd0 	.word	0x20008dd0
 800ced8:	20008dfa 	.word	0x20008dfa
 800cedc:	08015610 	.word	0x08015610
 800cee0:	080158dc 	.word	0x080158dc
 800cee4:	08015654 	.word	0x08015654
 800cee8:	2300      	movs	r3, #0
 800ceea:	4423      	add	r3, r4
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	4b95      	ldr	r3, [pc, #596]	; (800d144 <tcp_receive+0xbdc>)
 800cef0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800cefc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cefe:	f7fd fe15 	bl	800ab2c <tcp_seg_free>
            while (next &&
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00e      	beq.n	800cf26 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cf08:	4b8e      	ldr	r3, [pc, #568]	; (800d144 <tcp_receive+0xbdc>)
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4b8e      	ldr	r3, [pc, #568]	; (800d148 <tcp_receive+0xbe0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	441a      	add	r2, r3
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf1c:	8909      	ldrh	r1, [r1, #8]
 800cf1e:	440b      	add	r3, r1
 800cf20:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	da9d      	bge.n	800ce62 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d057      	beq.n	800cfdc <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800cf2c:	4b85      	ldr	r3, [pc, #532]	; (800d144 <tcp_receive+0xbdc>)
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	461a      	mov	r2, r3
 800cf32:	4b85      	ldr	r3, [pc, #532]	; (800d148 <tcp_receive+0xbe0>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	441a      	add	r2, r3
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	dd4b      	ble.n	800cfdc <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	4b7e      	ldr	r3, [pc, #504]	; (800d148 <tcp_receive+0xbe0>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	4b7d      	ldr	r3, [pc, #500]	; (800d14c <tcp_receive+0xbe4>)
 800cf58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cf5a:	4b7c      	ldr	r3, [pc, #496]	; (800d14c <tcp_receive+0xbe4>)
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	899b      	ldrh	r3, [r3, #12]
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fa fddf 	bl	8007b26 <lwip_htons>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f003 0302 	and.w	r3, r3, #2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <tcp_receive+0xa16>
                inseg.len -= 1;
 800cf72:	4b76      	ldr	r3, [pc, #472]	; (800d14c <tcp_receive+0xbe4>)
 800cf74:	891b      	ldrh	r3, [r3, #8]
 800cf76:	3b01      	subs	r3, #1
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	4b74      	ldr	r3, [pc, #464]	; (800d14c <tcp_receive+0xbe4>)
 800cf7c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cf7e:	4b73      	ldr	r3, [pc, #460]	; (800d14c <tcp_receive+0xbe4>)
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	4a72      	ldr	r2, [pc, #456]	; (800d14c <tcp_receive+0xbe4>)
 800cf84:	8912      	ldrh	r2, [r2, #8]
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fc f82b 	bl	8008fe4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cf8e:	4b6f      	ldr	r3, [pc, #444]	; (800d14c <tcp_receive+0xbe4>)
 800cf90:	891c      	ldrh	r4, [r3, #8]
 800cf92:	4b6e      	ldr	r3, [pc, #440]	; (800d14c <tcp_receive+0xbe4>)
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	899b      	ldrh	r3, [r3, #12]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fa fdc3 	bl	8007b26 <lwip_htons>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <tcp_receive+0xa46>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e000      	b.n	800cfb0 <tcp_receive+0xa48>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	4423      	add	r3, r4
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	4b63      	ldr	r3, [pc, #396]	; (800d144 <tcp_receive+0xbdc>)
 800cfb6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cfb8:	4b62      	ldr	r3, [pc, #392]	; (800d144 <tcp_receive+0xbdc>)
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b62      	ldr	r3, [pc, #392]	; (800d148 <tcp_receive+0xbe0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	441a      	add	r2, r3
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d006      	beq.n	800cfdc <tcp_receive+0xa74>
 800cfce:	4b60      	ldr	r3, [pc, #384]	; (800d150 <tcp_receive+0xbe8>)
 800cfd0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800cfd4:	495f      	ldr	r1, [pc, #380]	; (800d154 <tcp_receive+0xbec>)
 800cfd6:	4860      	ldr	r0, [pc, #384]	; (800d158 <tcp_receive+0xbf0>)
 800cfd8:	f006 fc72 	bl	80138c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfe0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cfe2:	4b58      	ldr	r3, [pc, #352]	; (800d144 <tcp_receive+0xbdc>)
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4b57      	ldr	r3, [pc, #348]	; (800d148 <tcp_receive+0xbe0>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	441a      	add	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cff6:	4b53      	ldr	r3, [pc, #332]	; (800d144 <tcp_receive+0xbdc>)
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d206      	bcs.n	800d00c <tcp_receive+0xaa4>
 800cffe:	4b54      	ldr	r3, [pc, #336]	; (800d150 <tcp_receive+0xbe8>)
 800d000:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d004:	4955      	ldr	r1, [pc, #340]	; (800d15c <tcp_receive+0xbf4>)
 800d006:	4854      	ldr	r0, [pc, #336]	; (800d158 <tcp_receive+0xbf0>)
 800d008:	f006 fc5a 	bl	80138c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d010:	4b4c      	ldr	r3, [pc, #304]	; (800d144 <tcp_receive+0xbdc>)
 800d012:	881b      	ldrh	r3, [r3, #0]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	b29a      	uxth	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7fd f8f5 	bl	800a20c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d022:	4b4a      	ldr	r3, [pc, #296]	; (800d14c <tcp_receive+0xbe4>)
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	891b      	ldrh	r3, [r3, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d006      	beq.n	800d03a <tcp_receive+0xad2>
          recv_data = inseg.p;
 800d02c:	4b47      	ldr	r3, [pc, #284]	; (800d14c <tcp_receive+0xbe4>)
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	4a4b      	ldr	r2, [pc, #300]	; (800d160 <tcp_receive+0xbf8>)
 800d032:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d034:	4b45      	ldr	r3, [pc, #276]	; (800d14c <tcp_receive+0xbe4>)
 800d036:	2200      	movs	r2, #0
 800d038:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d03a:	4b44      	ldr	r3, [pc, #272]	; (800d14c <tcp_receive+0xbe4>)
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	899b      	ldrh	r3, [r3, #12]
 800d040:	b29b      	uxth	r3, r3
 800d042:	4618      	mov	r0, r3
 800d044:	f7fa fd6f 	bl	8007b26 <lwip_htons>
 800d048:	4603      	mov	r3, r0
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 80b4 	beq.w	800d1bc <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d054:	4b43      	ldr	r3, [pc, #268]	; (800d164 <tcp_receive+0xbfc>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	f043 0320 	orr.w	r3, r3, #32
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	4b41      	ldr	r3, [pc, #260]	; (800d164 <tcp_receive+0xbfc>)
 800d060:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d062:	e0ab      	b.n	800d1bc <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d068:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	4a35      	ldr	r2, [pc, #212]	; (800d148 <tcp_receive+0xbe0>)
 800d074:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	461c      	mov	r4, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	899b      	ldrh	r3, [r3, #12]
 800d082:	b29b      	uxth	r3, r3
 800d084:	4618      	mov	r0, r3
 800d086:	f7fa fd4e 	bl	8007b26 <lwip_htons>
 800d08a:	4603      	mov	r3, r0
 800d08c:	f003 0303 	and.w	r3, r3, #3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <tcp_receive+0xb30>
 800d094:	2301      	movs	r3, #1
 800d096:	e000      	b.n	800d09a <tcp_receive+0xb32>
 800d098:	2300      	movs	r3, #0
 800d09a:	191a      	adds	r2, r3, r4
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	441a      	add	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0aa:	461c      	mov	r4, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	891b      	ldrh	r3, [r3, #8]
 800d0b0:	461d      	mov	r5, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	899b      	ldrh	r3, [r3, #12]
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fa fd33 	bl	8007b26 <lwip_htons>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f003 0303 	and.w	r3, r3, #3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <tcp_receive+0xb66>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <tcp_receive+0xb68>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	442b      	add	r3, r5
 800d0d2:	429c      	cmp	r4, r3
 800d0d4:	d206      	bcs.n	800d0e4 <tcp_receive+0xb7c>
 800d0d6:	4b1e      	ldr	r3, [pc, #120]	; (800d150 <tcp_receive+0xbe8>)
 800d0d8:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800d0dc:	4922      	ldr	r1, [pc, #136]	; (800d168 <tcp_receive+0xc00>)
 800d0de:	481e      	ldr	r0, [pc, #120]	; (800d158 <tcp_receive+0xbf0>)
 800d0e0:	f006 fbee 	bl	80138c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	891b      	ldrh	r3, [r3, #8]
 800d0e8:	461c      	mov	r4, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	899b      	ldrh	r3, [r3, #12]
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fa fd17 	bl	8007b26 <lwip_htons>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f003 0303 	and.w	r3, r3, #3
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <tcp_receive+0xb9e>
 800d102:	2301      	movs	r3, #1
 800d104:	e000      	b.n	800d108 <tcp_receive+0xba0>
 800d106:	2300      	movs	r3, #0
 800d108:	1919      	adds	r1, r3, r4
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d10e:	b28b      	uxth	r3, r1
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	b29a      	uxth	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7fd f877 	bl	800a20c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	891b      	ldrh	r3, [r3, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d028      	beq.n	800d17a <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d128:	4b0d      	ldr	r3, [pc, #52]	; (800d160 <tcp_receive+0xbf8>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01d      	beq.n	800d16c <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800d130:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <tcp_receive+0xbf8>)
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f7fc f992 	bl	8009464 <pbuf_cat>
 800d140:	e018      	b.n	800d174 <tcp_receive+0xc0c>
 800d142:	bf00      	nop
 800d144:	20008dfa 	.word	0x20008dfa
 800d148:	20008df0 	.word	0x20008df0
 800d14c:	20008dd0 	.word	0x20008dd0
 800d150:	08015610 	.word	0x08015610
 800d154:	08015914 	.word	0x08015914
 800d158:	08015654 	.word	0x08015654
 800d15c:	08015950 	.word	0x08015950
 800d160:	20008e00 	.word	0x20008e00
 800d164:	20008dfd 	.word	0x20008dfd
 800d168:	08015970 	.word	0x08015970
            } else {
              recv_data = cseg->p;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	4a71      	ldr	r2, [pc, #452]	; (800d338 <tcp_receive+0xdd0>)
 800d172:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	899b      	ldrh	r3, [r3, #12]
 800d180:	b29b      	uxth	r3, r3
 800d182:	4618      	mov	r0, r3
 800d184:	f7fa fccf 	bl	8007b26 <lwip_htons>
 800d188:	4603      	mov	r3, r0
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00d      	beq.n	800d1ae <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d192:	4b6a      	ldr	r3, [pc, #424]	; (800d33c <tcp_receive+0xdd4>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	f043 0320 	orr.w	r3, r3, #32
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	4b67      	ldr	r3, [pc, #412]	; (800d33c <tcp_receive+0xdd4>)
 800d19e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7d1b      	ldrb	r3, [r3, #20]
 800d1a4:	2b04      	cmp	r3, #4
 800d1a6:	d102      	bne.n	800d1ae <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2207      	movs	r2, #7
 800d1ac:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7fd fcb8 	bl	800ab2c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d008      	beq.n	800d1d6 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	f43f af47 	beq.w	800d064 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7e9b      	ldrb	r3, [r3, #26]
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00e      	beq.n	800d200 <tcp_receive+0xc98>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	7e9b      	ldrb	r3, [r3, #26]
 800d1e6:	f023 0301 	bic.w	r3, r3, #1
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	769a      	strb	r2, [r3, #26]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	7e9b      	ldrb	r3, [r3, #26]
 800d1f4:	f043 0302 	orr.w	r3, r3, #2
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d1fe:	e181      	b.n	800d504 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	7e9b      	ldrb	r3, [r3, #26]
 800d204:	f043 0301 	orr.w	r3, r3, #1
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d20e:	e179      	b.n	800d504 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f001 f8c3 	bl	800e39c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d21e:	4848      	ldr	r0, [pc, #288]	; (800d340 <tcp_receive+0xdd8>)
 800d220:	f7fd fcaa 	bl	800ab78 <tcp_seg_copy>
 800d224:	4602      	mov	r2, r0
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800d22a:	e16b      	b.n	800d504 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800d22c:	2300      	movs	r3, #0
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d236:	e150      	b.n	800d4da <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	4b41      	ldr	r3, [pc, #260]	; (800d344 <tcp_receive+0xddc>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	429a      	cmp	r2, r3
 800d244:	d11d      	bne.n	800d282 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d246:	4b3e      	ldr	r3, [pc, #248]	; (800d340 <tcp_receive+0xdd8>)
 800d248:	891a      	ldrh	r2, [r3, #8]
 800d24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24c:	891b      	ldrh	r3, [r3, #8]
 800d24e:	429a      	cmp	r2, r3
 800d250:	f240 8148 	bls.w	800d4e4 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800d254:	483a      	ldr	r0, [pc, #232]	; (800d340 <tcp_receive+0xdd8>)
 800d256:	f7fd fc8f 	bl	800ab78 <tcp_seg_copy>
 800d25a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 8142 	beq.w	800d4e8 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	e002      	b.n	800d278 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	f7ff f8fe 	bl	800c47c <tcp_oos_insert_segment>
                }
                break;
 800d280:	e132      	b.n	800d4e8 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	2b00      	cmp	r3, #0
 800d286:	d117      	bne.n	800d2b8 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d288:	4b2e      	ldr	r3, [pc, #184]	; (800d344 <tcp_receive+0xddc>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	2b00      	cmp	r3, #0
 800d296:	da57      	bge.n	800d348 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800d298:	4829      	ldr	r0, [pc, #164]	; (800d340 <tcp_receive+0xdd8>)
 800d29a:	f7fd fc6d 	bl	800ab78 <tcp_seg_copy>
 800d29e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 8122 	beq.w	800d4ec <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800d2ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff f8e3 	bl	800c47c <tcp_oos_insert_segment>
                  }
                  break;
 800d2b6:	e119      	b.n	800d4ec <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800d2b8:	4b22      	ldr	r3, [pc, #136]	; (800d344 <tcp_receive+0xddc>)
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	db3e      	blt.n	800d348 <tcp_receive+0xde0>
 800d2ca:	4b1e      	ldr	r3, [pc, #120]	; (800d344 <tcp_receive+0xddc>)
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	dc35      	bgt.n	800d348 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800d2dc:	4818      	ldr	r0, [pc, #96]	; (800d340 <tcp_receive+0xdd8>)
 800d2de:	f7fd fc4b 	bl	800ab78 <tcp_seg_copy>
 800d2e2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 8102 	beq.w	800d4f0 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2f4:	8912      	ldrh	r2, [r2, #8]
 800d2f6:	441a      	add	r2, r3
 800d2f8:	4b12      	ldr	r3, [pc, #72]	; (800d344 <tcp_receive+0xddc>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	dd12      	ble.n	800d328 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d302:	4b10      	ldr	r3, [pc, #64]	; (800d344 <tcp_receive+0xddc>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	b29a      	uxth	r2, r3
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	b29a      	uxth	r2, r3
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	891b      	ldrh	r3, [r3, #8]
 800d320:	4619      	mov	r1, r3
 800d322:	4610      	mov	r0, r2
 800d324:	f7fb fe5e 	bl	8008fe4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d32e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff f8a3 	bl	800c47c <tcp_oos_insert_segment>
                  }
                  break;
 800d336:	e0db      	b.n	800d4f0 <tcp_receive+0xf88>
 800d338:	20008e00 	.word	0x20008e00
 800d33c:	20008dfd 	.word	0x20008dfd
 800d340:	20008dd0 	.word	0x20008dd0
 800d344:	20008df0 	.word	0x20008df0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f040 80bf 	bne.w	800d4d0 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d352:	4b7c      	ldr	r3, [pc, #496]	; (800d544 <tcp_receive+0xfdc>)
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f340 80b6 	ble.w	800d4d0 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	899b      	ldrh	r3, [r3, #12]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fa fbda 	bl	8007b26 <lwip_htons>
 800d372:	4603      	mov	r3, r0
 800d374:	f003 0301 	and.w	r3, r3, #1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f040 80bb 	bne.w	800d4f4 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d37e:	4872      	ldr	r0, [pc, #456]	; (800d548 <tcp_receive+0xfe0>)
 800d380:	f7fd fbfa 	bl	800ab78 <tcp_seg_copy>
 800d384:	4602      	mov	r2, r0
 800d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d388:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f000 80b2 	beq.w	800d4f8 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d39c:	8912      	ldrh	r2, [r2, #8]
 800d39e:	441a      	add	r2, r3
 800d3a0:	4b68      	ldr	r3, [pc, #416]	; (800d544 <tcp_receive+0xfdc>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dd12      	ble.n	800d3d0 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d3aa:	4b66      	ldr	r3, [pc, #408]	; (800d544 <tcp_receive+0xfdc>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	891b      	ldrh	r3, [r3, #8]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f7fb fe0a 	bl	8008fe4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d3d0:	4b5e      	ldr	r3, [pc, #376]	; (800d54c <tcp_receive+0xfe4>)
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4b5b      	ldr	r3, [pc, #364]	; (800d544 <tcp_receive+0xfdc>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	441a      	add	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	6879      	ldr	r1, [r7, #4]
 800d3e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3e4:	440b      	add	r3, r1
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f340 8085 	ble.w	800d4f8 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	899b      	ldrh	r3, [r3, #12]
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fa fb94 	bl	8007b26 <lwip_htons>
 800d3fe:	4603      	mov	r3, r0
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01e      	beq.n	800d446 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	899b      	ldrh	r3, [r3, #12]
 800d410:	b29b      	uxth	r3, r3
 800d412:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d416:	b29c      	uxth	r4, r3
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	899b      	ldrh	r3, [r3, #12]
 800d420:	b29b      	uxth	r3, r3
 800d422:	4618      	mov	r0, r3
 800d424:	f7fa fb7f 	bl	8007b26 <lwip_htons>
 800d428:	4603      	mov	r3, r0
 800d42a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4618      	mov	r0, r3
 800d432:	f7fa fb78 	bl	8007b26 <lwip_htons>
 800d436:	4603      	mov	r3, r0
 800d438:	461a      	mov	r2, r3
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	4322      	orrs	r2, r4
 800d442:	b292      	uxth	r2, r2
 800d444:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d450:	4413      	add	r3, r2
 800d452:	b299      	uxth	r1, r3
 800d454:	4b3b      	ldr	r3, [pc, #236]	; (800d544 <tcp_receive+0xfdc>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	b29a      	uxth	r2, r3
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	1a8a      	subs	r2, r1, r2
 800d460:	b292      	uxth	r2, r2
 800d462:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685a      	ldr	r2, [r3, #4]
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	891b      	ldrh	r3, [r3, #8]
 800d470:	4619      	mov	r1, r3
 800d472:	4610      	mov	r0, r2
 800d474:	f7fb fdb6 	bl	8008fe4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	891c      	ldrh	r4, [r3, #8]
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	899b      	ldrh	r3, [r3, #12]
 800d486:	b29b      	uxth	r3, r3
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fa fb4c 	bl	8007b26 <lwip_htons>
 800d48e:	4603      	mov	r3, r0
 800d490:	f003 0303 	and.w	r3, r3, #3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <tcp_receive+0xf34>
 800d498:	2301      	movs	r3, #1
 800d49a:	e000      	b.n	800d49e <tcp_receive+0xf36>
 800d49c:	2300      	movs	r3, #0
 800d49e:	4423      	add	r3, r4
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	4b2a      	ldr	r3, [pc, #168]	; (800d54c <tcp_receive+0xfe4>)
 800d4a4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d4a6:	4b29      	ldr	r3, [pc, #164]	; (800d54c <tcp_receive+0xfe4>)
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4b25      	ldr	r3, [pc, #148]	; (800d544 <tcp_receive+0xfdc>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	441a      	add	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4ba:	440b      	add	r3, r1
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d01b      	beq.n	800d4f8 <tcp_receive+0xf90>
 800d4c0:	4b23      	ldr	r3, [pc, #140]	; (800d550 <tcp_receive+0xfe8>)
 800d4c2:	f240 627a 	movw	r2, #1658	; 0x67a
 800d4c6:	4923      	ldr	r1, [pc, #140]	; (800d554 <tcp_receive+0xfec>)
 800d4c8:	4823      	ldr	r0, [pc, #140]	; (800d558 <tcp_receive+0xff0>)
 800d4ca:	f006 f9f9 	bl	80138c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d4ce:	e013      	b.n	800d4f8 <tcp_receive+0xf90>
              }
            }
            prev = next;
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f47f aeab 	bne.w	800d238 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800d4e2:	e00f      	b.n	800d504 <tcp_receive+0xf9c>
                break;
 800d4e4:	bf00      	nop
 800d4e6:	e00d      	b.n	800d504 <tcp_receive+0xf9c>
                break;
 800d4e8:	bf00      	nop
 800d4ea:	e00b      	b.n	800d504 <tcp_receive+0xf9c>
                  break;
 800d4ec:	bf00      	nop
 800d4ee:	e009      	b.n	800d504 <tcp_receive+0xf9c>
                  break;
 800d4f0:	bf00      	nop
 800d4f2:	e007      	b.n	800d504 <tcp_receive+0xf9c>
                  break;
 800d4f4:	bf00      	nop
 800d4f6:	e005      	b.n	800d504 <tcp_receive+0xf9c>
                break;
 800d4f8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800d4fa:	e003      	b.n	800d504 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 ff4d 	bl	800e39c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d502:	e01a      	b.n	800d53a <tcp_receive+0xfd2>
 800d504:	e019      	b.n	800d53a <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d506:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <tcp_receive+0xfdc>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	db0a      	blt.n	800d52a <tcp_receive+0xfc2>
 800d514:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <tcp_receive+0xfdc>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d520:	440b      	add	r3, r1
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	3301      	adds	r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	dd07      	ble.n	800d53a <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7e9b      	ldrb	r3, [r3, #26]
 800d52e:	f043 0302 	orr.w	r3, r3, #2
 800d532:	b2da      	uxtb	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800d538:	e7ff      	b.n	800d53a <tcp_receive+0xfd2>
 800d53a:	bf00      	nop
 800d53c:	3734      	adds	r7, #52	; 0x34
 800d53e:	46bd      	mov	sp, r7
 800d540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d542:	bf00      	nop
 800d544:	20008df0 	.word	0x20008df0
 800d548:	20008dd0 	.word	0x20008dd0
 800d54c:	20008dfa 	.word	0x20008dfa
 800d550:	08015610 	.word	0x08015610
 800d554:	080158dc 	.word	0x080158dc
 800d558:	08015654 	.word	0x08015654

0800d55c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800d562:	4b17      	ldr	r3, [pc, #92]	; (800d5c0 <tcp_getoptbyte+0x64>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d005      	beq.n	800d576 <tcp_getoptbyte+0x1a>
 800d56a:	4b16      	ldr	r3, [pc, #88]	; (800d5c4 <tcp_getoptbyte+0x68>)
 800d56c:	881a      	ldrh	r2, [r3, #0]
 800d56e:	4b16      	ldr	r3, [pc, #88]	; (800d5c8 <tcp_getoptbyte+0x6c>)
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d20e      	bcs.n	800d594 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800d576:	4b15      	ldr	r3, [pc, #84]	; (800d5cc <tcp_getoptbyte+0x70>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3314      	adds	r3, #20
 800d57c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800d57e:	4b11      	ldr	r3, [pc, #68]	; (800d5c4 <tcp_getoptbyte+0x68>)
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	b291      	uxth	r1, r2
 800d586:	4a0f      	ldr	r2, [pc, #60]	; (800d5c4 <tcp_getoptbyte+0x68>)
 800d588:	8011      	strh	r1, [r2, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	4413      	add	r3, r2
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	e010      	b.n	800d5b6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <tcp_getoptbyte+0x68>)
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	b291      	uxth	r1, r2
 800d59c:	4a09      	ldr	r2, [pc, #36]	; (800d5c4 <tcp_getoptbyte+0x68>)
 800d59e:	8011      	strh	r1, [r2, #0]
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <tcp_getoptbyte+0x6c>)
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800d5ac:	4b04      	ldr	r3, [pc, #16]	; (800d5c0 <tcp_getoptbyte+0x64>)
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bc80      	pop	{r7}
 800d5be:	4770      	bx	lr
 800d5c0:	20008de8 	.word	0x20008de8
 800d5c4:	20008dec 	.word	0x20008dec
 800d5c8:	20008de6 	.word	0x20008de6
 800d5cc:	20008de0 	.word	0x20008de0

0800d5d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d5d8:	4b2e      	ldr	r3, [pc, #184]	; (800d694 <tcp_parseopt+0xc4>)
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d055      	beq.n	800d68c <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d5e0:	4b2d      	ldr	r3, [pc, #180]	; (800d698 <tcp_parseopt+0xc8>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	801a      	strh	r2, [r3, #0]
 800d5e6:	e045      	b.n	800d674 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800d5e8:	f7ff ffb8 	bl	800d55c <tcp_getoptbyte>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	d006      	beq.n	800d604 <tcp_parseopt+0x34>
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	dc2b      	bgt.n	800d652 <tcp_parseopt+0x82>
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d041      	beq.n	800d682 <tcp_parseopt+0xb2>
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d127      	bne.n	800d652 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800d602:	e037      	b.n	800d674 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d604:	f7ff ffaa 	bl	800d55c <tcp_getoptbyte>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	d13b      	bne.n	800d686 <tcp_parseopt+0xb6>
 800d60e:	4b22      	ldr	r3, [pc, #136]	; (800d698 <tcp_parseopt+0xc8>)
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	3301      	adds	r3, #1
 800d614:	4a1f      	ldr	r2, [pc, #124]	; (800d694 <tcp_parseopt+0xc4>)
 800d616:	8812      	ldrh	r2, [r2, #0]
 800d618:	4293      	cmp	r3, r2
 800d61a:	da34      	bge.n	800d686 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800d61c:	f7ff ff9e 	bl	800d55c <tcp_getoptbyte>
 800d620:	4603      	mov	r3, r0
 800d622:	b29b      	uxth	r3, r3
 800d624:	021b      	lsls	r3, r3, #8
 800d626:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800d628:	f7ff ff98 	bl	800d55c <tcp_getoptbyte>
 800d62c:	4603      	mov	r3, r0
 800d62e:	b29a      	uxth	r2, r3
 800d630:	89bb      	ldrh	r3, [r7, #12]
 800d632:	4313      	orrs	r3, r2
 800d634:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d636:	89bb      	ldrh	r3, [r7, #12]
 800d638:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d63c:	d804      	bhi.n	800d648 <tcp_parseopt+0x78>
 800d63e:	89bb      	ldrh	r3, [r7, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <tcp_parseopt+0x78>
 800d644:	89ba      	ldrh	r2, [r7, #12]
 800d646:	e001      	b.n	800d64c <tcp_parseopt+0x7c>
 800d648:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800d650:	e010      	b.n	800d674 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800d652:	f7ff ff83 	bl	800d55c <tcp_getoptbyte>
 800d656:	4603      	mov	r3, r0
 800d658:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800d65a:	7afb      	ldrb	r3, [r7, #11]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d914      	bls.n	800d68a <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800d660:	7afb      	ldrb	r3, [r7, #11]
 800d662:	b29a      	uxth	r2, r3
 800d664:	4b0c      	ldr	r3, [pc, #48]	; (800d698 <tcp_parseopt+0xc8>)
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	4413      	add	r3, r2
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	3b02      	subs	r3, #2
 800d66e:	b29a      	uxth	r2, r3
 800d670:	4b09      	ldr	r3, [pc, #36]	; (800d698 <tcp_parseopt+0xc8>)
 800d672:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <tcp_parseopt+0xc8>)
 800d676:	881a      	ldrh	r2, [r3, #0]
 800d678:	4b06      	ldr	r3, [pc, #24]	; (800d694 <tcp_parseopt+0xc4>)
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d3b3      	bcc.n	800d5e8 <tcp_parseopt+0x18>
 800d680:	e004      	b.n	800d68c <tcp_parseopt+0xbc>
        return;
 800d682:	bf00      	nop
 800d684:	e002      	b.n	800d68c <tcp_parseopt+0xbc>
          return;
 800d686:	bf00      	nop
 800d688:	e000      	b.n	800d68c <tcp_parseopt+0xbc>
          return;
 800d68a:	bf00      	nop
      }
    }
  }
}
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20008de4 	.word	0x20008de4
 800d698:	20008dec 	.word	0x20008dec

0800d69c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d69c:	b480      	push	{r7}
 800d69e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d6a0:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <tcp_trigger_input_pcb_close+0x1c>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f043 0310 	orr.w	r3, r3, #16
 800d6a8:	b2da      	uxtb	r2, r3
 800d6aa:	4b03      	ldr	r3, [pc, #12]	; (800d6b8 <tcp_trigger_input_pcb_close+0x1c>)
 800d6ac:	701a      	strb	r2, [r3, #0]
}
 800d6ae:	bf00      	nop
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bc80      	pop	{r7}
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	20008dfd 	.word	0x20008dfd

0800d6bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	607b      	str	r3, [r7, #4]
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	817b      	strh	r3, [r7, #10]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6ce:	897a      	ldrh	r2, [r7, #10]
 800d6d0:	893b      	ldrh	r3, [r7, #8]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	3314      	adds	r3, #20
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4619      	mov	r1, r3
 800d6de:	2001      	movs	r0, #1
 800d6e0:	f7fb fa7c 	bl	8008bdc <pbuf_alloc>
 800d6e4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d056      	beq.n	800d79a <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d6ec:	897b      	ldrh	r3, [r7, #10]
 800d6ee:	3313      	adds	r3, #19
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	8952      	ldrh	r2, [r2, #10]
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	db05      	blt.n	800d704 <tcp_output_alloc_header+0x48>
 800d6f8:	4b2a      	ldr	r3, [pc, #168]	; (800d7a4 <tcp_output_alloc_header+0xe8>)
 800d6fa:	2272      	movs	r2, #114	; 0x72
 800d6fc:	492a      	ldr	r1, [pc, #168]	; (800d7a8 <tcp_output_alloc_header+0xec>)
 800d6fe:	482b      	ldr	r0, [pc, #172]	; (800d7ac <tcp_output_alloc_header+0xf0>)
 800d700:	f006 f8de 	bl	80138c0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8adb      	ldrh	r3, [r3, #22]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fa fa09 	bl	8007b26 <lwip_htons>
 800d714:	4603      	mov	r3, r0
 800d716:	461a      	mov	r2, r3
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	8b1b      	ldrh	r3, [r3, #24]
 800d720:	4618      	mov	r0, r3
 800d722:	f7fa fa00 	bl	8007b26 <lwip_htons>
 800d726:	4603      	mov	r3, r0
 800d728:	461a      	mov	r2, r3
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fa fa01 	bl	8007b40 <lwip_htonl>
 800d73e:	4602      	mov	r2, r0
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d744:	897b      	ldrh	r3, [r7, #10]
 800d746:	089b      	lsrs	r3, r3, #2
 800d748:	b29b      	uxth	r3, r3
 800d74a:	3305      	adds	r3, #5
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	031b      	lsls	r3, r3, #12
 800d750:	b29b      	uxth	r3, r3
 800d752:	f043 0310 	orr.w	r3, r3, #16
 800d756:	b29b      	uxth	r3, r3
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fa f9e4 	bl	8007b26 <lwip_htons>
 800d75e:	4603      	mov	r3, r0
 800d760:	461a      	mov	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fa f9db 	bl	8007b26 <lwip_htons>
 800d770:	4603      	mov	r3, r0
 800d772:	461a      	mov	r2, r3
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	2200      	movs	r2, #0
 800d77c:	741a      	strb	r2, [r3, #16]
 800d77e:	2200      	movs	r2, #0
 800d780:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2200      	movs	r2, #0
 800d786:	749a      	strb	r2, [r3, #18]
 800d788:	2200      	movs	r2, #0
 800d78a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d794:	441a      	add	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d79a:	697b      	ldr	r3, [r7, #20]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	08015998 	.word	0x08015998
 800d7a8:	080159cc 	.word	0x080159cc
 800d7ac:	080159fc 	.word	0x080159fc

0800d7b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d02d      	beq.n	800d81c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c4:	60fb      	str	r3, [r7, #12]
 800d7c6:	e002      	b.n	800d7ce <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1f8      	bne.n	800d7c8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	899b      	ldrh	r3, [r3, #12]
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fa f9a1 	bl	8007b26 <lwip_htons>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d116      	bne.n	800d81c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	899b      	ldrh	r3, [r3, #12]
 800d7f4:	b29c      	uxth	r4, r3
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	f7fa f995 	bl	8007b26 <lwip_htons>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	461a      	mov	r2, r3
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	4322      	orrs	r2, r4
 800d806:	b292      	uxth	r2, r2
 800d808:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	7e9b      	ldrb	r3, [r3, #26]
 800d80e:	f043 0320 	orr.w	r3, r3, #32
 800d812:	b2da      	uxtb	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	e004      	b.n	800d826 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d81c:	2101      	movs	r1, #1
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fcc0 	bl	800e1a4 <tcp_enqueue_flags>
 800d824:	4603      	mov	r3, r0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd90      	pop	{r4, r7, pc}
	...

0800d830 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800d830:	b590      	push	{r4, r7, lr}
 800d832:	b087      	sub	sp, #28
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	603b      	str	r3, [r7, #0]
 800d83c:	4613      	mov	r3, r2
 800d83e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0304 	and.w	r3, r3, #4
 800d84c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d84e:	2003      	movs	r0, #3
 800d850:	f7fa ffb2 	bl	80087b8 <memp_malloc>
 800d854:	6138      	str	r0, [r7, #16]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d104      	bne.n	800d866 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d85c:	68b8      	ldr	r0, [r7, #8]
 800d85e:	f7fb fd35 	bl	80092cc <pbuf_free>
    return NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	e061      	b.n	800d92a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d86c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	2200      	movs	r2, #0
 800d872:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	891a      	ldrh	r2, [r3, #8]
 800d87e:	7dfb      	ldrb	r3, [r7, #23]
 800d880:	b29b      	uxth	r3, r3
 800d882:	429a      	cmp	r2, r3
 800d884:	d205      	bcs.n	800d892 <tcp_create_segment+0x62>
 800d886:	4b2b      	ldr	r3, [pc, #172]	; (800d934 <tcp_create_segment+0x104>)
 800d888:	22ba      	movs	r2, #186	; 0xba
 800d88a:	492b      	ldr	r1, [pc, #172]	; (800d938 <tcp_create_segment+0x108>)
 800d88c:	482b      	ldr	r0, [pc, #172]	; (800d93c <tcp_create_segment+0x10c>)
 800d88e:	f006 f817 	bl	80138c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	891a      	ldrh	r2, [r3, #8]
 800d896:	7dfb      	ldrb	r3, [r7, #23]
 800d898:	b29b      	uxth	r3, r3
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800d8a2:	2114      	movs	r1, #20
 800d8a4:	68b8      	ldr	r0, [r7, #8]
 800d8a6:	f7fb fced 	bl	8009284 <pbuf_header>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d8b0:	6938      	ldr	r0, [r7, #16]
 800d8b2:	f7fd f93b 	bl	800ab2c <tcp_seg_free>
    return NULL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e037      	b.n	800d92a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	8ada      	ldrh	r2, [r3, #22]
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	68dc      	ldr	r4, [r3, #12]
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f7fa f92a 	bl	8007b26 <lwip_htons>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8b1a      	ldrh	r2, [r3, #24]
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	68dc      	ldr	r4, [r3, #12]
 800d8de:	4610      	mov	r0, r2
 800d8e0:	f7fa f921 	bl	8007b26 <lwip_htons>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	68dc      	ldr	r4, [r3, #12]
 800d8ec:	6838      	ldr	r0, [r7, #0]
 800d8ee:	f7fa f927 	bl	8007b40 <lwip_htonl>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	089b      	lsrs	r3, r3, #2
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	3305      	adds	r3, #5
 800d900:	b29b      	uxth	r3, r3
 800d902:	031b      	lsls	r3, r3, #12
 800d904:	b29a      	uxth	r2, r3
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	4313      	orrs	r3, r2
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	68dc      	ldr	r4, [r3, #12]
 800d912:	4610      	mov	r0, r2
 800d914:	f7fa f907 	bl	8007b26 <lwip_htons>
 800d918:	4603      	mov	r3, r0
 800d91a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	749a      	strb	r2, [r3, #18]
 800d924:	2200      	movs	r2, #0
 800d926:	74da      	strb	r2, [r3, #19]
  return seg;
 800d928:	693b      	ldr	r3, [r7, #16]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd90      	pop	{r4, r7, pc}
 800d932:	bf00      	nop
 800d934:	08015998 	.word	0x08015998
 800d938:	08015a24 	.word	0x08015a24
 800d93c:	080159fc 	.word	0x080159fc

0800d940 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	607b      	str	r3, [r7, #4]
 800d948:	4603      	mov	r3, r0
 800d94a:	73fb      	strb	r3, [r7, #15]
 800d94c:	460b      	mov	r3, r1
 800d94e:	81bb      	strh	r3, [r7, #12]
 800d950:	4613      	mov	r3, r2
 800d952:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d954:	89bb      	ldrh	r3, [r7, #12]
 800d956:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d958:	89ba      	ldrh	r2, [r7, #12]
 800d95a:	897b      	ldrh	r3, [r7, #10]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d221      	bcs.n	800d9a4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d960:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d111      	bne.n	800d990 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	7e9b      	ldrb	r3, [r3, #26]
 800d970:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d974:	2b00      	cmp	r3, #0
 800d976:	d115      	bne.n	800d9a4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800d978:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d007      	beq.n	800d990 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800d984:	2b00      	cmp	r3, #0
 800d986:	d103      	bne.n	800d990 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d990:	89bb      	ldrh	r3, [r7, #12]
 800d992:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d996:	f023 0203 	bic.w	r2, r3, #3
 800d99a:	897b      	ldrh	r3, [r7, #10]
 800d99c:	4293      	cmp	r3, r2
 800d99e:	bf28      	it	cs
 800d9a0:	4613      	movcs	r3, r2
 800d9a2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d9a4:	8af9      	ldrh	r1, [r7, #22]
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fb f916 	bl	8008bdc <pbuf_alloc>
 800d9b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e019      	b.n	800d9f0 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d006      	beq.n	800d9d2 <tcp_pbuf_prealloc+0x92>
 800d9c4:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <tcp_pbuf_prealloc+0xb8>)
 800d9c6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d9ca:	490c      	ldr	r1, [pc, #48]	; (800d9fc <tcp_pbuf_prealloc+0xbc>)
 800d9cc:	480c      	ldr	r0, [pc, #48]	; (800da00 <tcp_pbuf_prealloc+0xc0>)
 800d9ce:	f005 ff77 	bl	80138c0 <iprintf>
  *oversize = p->len - length;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	895a      	ldrh	r2, [r3, #10]
 800d9d6:	89bb      	ldrh	r3, [r7, #12]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	89ba      	ldrh	r2, [r7, #12]
 800d9e4:	811a      	strh	r2, [r3, #8]
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	891a      	ldrh	r2, [r3, #8]
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	815a      	strh	r2, [r3, #10]
  return p;
 800d9ee:	693b      	ldr	r3, [r7, #16]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	08015998 	.word	0x08015998
 800d9fc:	08015a3c 	.word	0x08015a3c
 800da00:	080159fc 	.word	0x080159fc

0800da04 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7d1b      	ldrb	r3, [r3, #20]
 800da14:	2b04      	cmp	r3, #4
 800da16:	d00e      	beq.n	800da36 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800da1c:	2b07      	cmp	r3, #7
 800da1e:	d00a      	beq.n	800da36 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800da24:	2b02      	cmp	r3, #2
 800da26:	d006      	beq.n	800da36 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800da2c:	2b03      	cmp	r3, #3
 800da2e:	d002      	beq.n	800da36 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800da30:	f06f 030a 	mvn.w	r3, #10
 800da34:	e04f      	b.n	800dad6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800da36:	887b      	ldrh	r3, [r7, #2]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d101      	bne.n	800da40 <tcp_write_checks+0x3c>
    return ERR_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	e04a      	b.n	800dad6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da46:	887a      	ldrh	r2, [r7, #2]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d909      	bls.n	800da60 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	7e9b      	ldrb	r3, [r3, #26]
 800da50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da54:	b2da      	uxtb	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800da5a:	f04f 33ff 	mov.w	r3, #4294967295
 800da5e:	e03a      	b.n	800dad6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da66:	2b0d      	cmp	r3, #13
 800da68:	d806      	bhi.n	800da78 <tcp_write_checks+0x74>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da70:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800da74:	4293      	cmp	r3, r2
 800da76:	d909      	bls.n	800da8c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7e9b      	ldrb	r3, [r3, #26]
 800da7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da80:	b2da      	uxtb	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800da86:	f04f 33ff 	mov.w	r3, #4294967295
 800da8a:	e024      	b.n	800dad6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00f      	beq.n	800dab6 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d11a      	bne.n	800dad4 <tcp_write_checks+0xd0>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d116      	bne.n	800dad4 <tcp_write_checks+0xd0>
 800daa6:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <tcp_write_checks+0xdc>)
 800daa8:	f240 1255 	movw	r2, #341	; 0x155
 800daac:	490d      	ldr	r1, [pc, #52]	; (800dae4 <tcp_write_checks+0xe0>)
 800daae:	480e      	ldr	r0, [pc, #56]	; (800dae8 <tcp_write_checks+0xe4>)
 800dab0:	f005 ff06 	bl	80138c0 <iprintf>
 800dab4:	e00e      	b.n	800dad4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d103      	bne.n	800dac6 <tcp_write_checks+0xc2>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d006      	beq.n	800dad4 <tcp_write_checks+0xd0>
 800dac6:	4b06      	ldr	r3, [pc, #24]	; (800dae0 <tcp_write_checks+0xdc>)
 800dac8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800dacc:	4907      	ldr	r1, [pc, #28]	; (800daec <tcp_write_checks+0xe8>)
 800dace:	4806      	ldr	r0, [pc, #24]	; (800dae8 <tcp_write_checks+0xe4>)
 800dad0:	f005 fef6 	bl	80138c0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	08015998 	.word	0x08015998
 800dae4:	08015a50 	.word	0x08015a50
 800dae8:	080159fc 	.word	0x080159fc
 800daec:	08015a8c 	.word	0x08015a8c

0800daf0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800daf0:	b590      	push	{r4, r7, lr}
 800daf2:	b09b      	sub	sp, #108	; 0x6c
 800daf4:	af04      	add	r7, sp, #16
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	4611      	mov	r1, r2
 800dafc:	461a      	mov	r2, r3
 800dafe:	460b      	mov	r3, r1
 800db00:	80fb      	strh	r3, [r7, #6]
 800db02:	4613      	mov	r3, r2
 800db04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800db06:	2300      	movs	r3, #0
 800db08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	653b      	str	r3, [r7, #80]	; 0x50
 800db0e:	2300      	movs	r3, #0
 800db10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db12:	2300      	movs	r3, #0
 800db14:	64bb      	str	r3, [r7, #72]	; 0x48
 800db16:	2300      	movs	r3, #0
 800db18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800db1a:	2300      	movs	r3, #0
 800db1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db3e:	085b      	lsrs	r3, r3, #1
 800db40:	b29a      	uxth	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db46:	4293      	cmp	r3, r2
 800db48:	bf28      	it	cs
 800db4a:	4613      	movcs	r3, r2
 800db4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800db4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <tcp_write+0x6a>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db58:	e000      	b.n	800db5c <tcp_write+0x6c>
 800db5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d109      	bne.n	800db78 <tcp_write+0x88>
 800db64:	4b92      	ldr	r3, [pc, #584]	; (800ddb0 <tcp_write+0x2c0>)
 800db66:	f240 1291 	movw	r2, #401	; 0x191
 800db6a:	4992      	ldr	r1, [pc, #584]	; (800ddb4 <tcp_write+0x2c4>)
 800db6c:	4892      	ldr	r0, [pc, #584]	; (800ddb8 <tcp_write+0x2c8>)
 800db6e:	f005 fea7 	bl	80138c0 <iprintf>
 800db72:	f06f 030f 	mvn.w	r3, #15
 800db76:	e30a      	b.n	800e18e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800db78:	88fb      	ldrh	r3, [r7, #6]
 800db7a:	4619      	mov	r1, r3
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f7ff ff41 	bl	800da04 <tcp_write_checks>
 800db82:	4603      	mov	r3, r0
 800db84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800db88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d002      	beq.n	800db96 <tcp_write+0xa6>
    return err;
 800db90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800db94:	e2fb      	b.n	800e18e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 80f4 	beq.w	800dd92 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbae:	653b      	str	r3, [r7, #80]	; 0x50
 800dbb0:	e002      	b.n	800dbb8 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800dbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1f8      	bne.n	800dbb2 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800dbc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbc2:	7a9b      	ldrb	r3, [r3, #10]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dbce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd2:	891b      	ldrh	r3, [r3, #8]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	8c3b      	ldrh	r3, [r7, #32]
 800dbd8:	440b      	add	r3, r1
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	da06      	bge.n	800dbec <tcp_write+0xfc>
 800dbde:	4b74      	ldr	r3, [pc, #464]	; (800ddb0 <tcp_write+0x2c0>)
 800dbe0:	f240 12c7 	movw	r2, #455	; 0x1c7
 800dbe4:	4975      	ldr	r1, [pc, #468]	; (800ddbc <tcp_write+0x2cc>)
 800dbe6:	4874      	ldr	r0, [pc, #464]	; (800ddb8 <tcp_write+0x2c8>)
 800dbe8:	f005 fe6a 	bl	80138c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbee:	891a      	ldrh	r2, [r3, #8]
 800dbf0:	8c3b      	ldrh	r3, [r7, #32]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dc02:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dc04:	8a7b      	ldrh	r3, [r7, #18]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d026      	beq.n	800dc58 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dc0a:	8a7b      	ldrh	r3, [r7, #18]
 800dc0c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d206      	bcs.n	800dc20 <tcp_write+0x130>
 800dc12:	4b67      	ldr	r3, [pc, #412]	; (800ddb0 <tcp_write+0x2c0>)
 800dc14:	f240 12d9 	movw	r2, #473	; 0x1d9
 800dc18:	4969      	ldr	r1, [pc, #420]	; (800ddc0 <tcp_write+0x2d0>)
 800dc1a:	4867      	ldr	r0, [pc, #412]	; (800ddb8 <tcp_write+0x2c8>)
 800dc1c:	f005 fe50 	bl	80138c0 <iprintf>
      seg = last_unsent;
 800dc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc22:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dc24:	8a7b      	ldrh	r3, [r7, #18]
 800dc26:	88fa      	ldrh	r2, [r7, #6]
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	bf28      	it	cs
 800dc2c:	4613      	movcs	r3, r2
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc32:	4293      	cmp	r3, r2
 800dc34:	bf28      	it	cs
 800dc36:	4613      	movcs	r3, r2
 800dc38:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800dc3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc40:	4413      	add	r3, r2
 800dc42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800dc46:	8a7a      	ldrh	r2, [r7, #18]
 800dc48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800dc50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dc58:	8a7b      	ldrh	r3, [r7, #18]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00b      	beq.n	800dc76 <tcp_write+0x186>
 800dc5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc62:	88fb      	ldrh	r3, [r7, #6]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d006      	beq.n	800dc76 <tcp_write+0x186>
 800dc68:	4b51      	ldr	r3, [pc, #324]	; (800ddb0 <tcp_write+0x2c0>)
 800dc6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dc6e:	4955      	ldr	r1, [pc, #340]	; (800ddc4 <tcp_write+0x2d4>)
 800dc70:	4851      	ldr	r0, [pc, #324]	; (800ddb8 <tcp_write+0x2c8>)
 800dc72:	f005 fe25 	bl	80138c0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800dc76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc7a:	88fb      	ldrh	r3, [r7, #6]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	f080 8169 	bcs.w	800df54 <tcp_write+0x464>
 800dc82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 8165 	beq.w	800df54 <tcp_write+0x464>
 800dc8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc8c:	891b      	ldrh	r3, [r3, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 8160 	beq.w	800df54 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dc94:	88fa      	ldrh	r2, [r7, #6]
 800dc96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc9a:	1ad2      	subs	r2, r2, r3
 800dc9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	bfa8      	it	ge
 800dca2:	4613      	movge	r3, r2
 800dca4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800dca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dca8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dcaa:	797b      	ldrb	r3, [r7, #5]
 800dcac:	f003 0301 	and.w	r3, r3, #1
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d027      	beq.n	800dd04 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dcb4:	f107 0012 	add.w	r0, r7, #18
 800dcb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dcba:	8bf9      	ldrh	r1, [r7, #30]
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	9302      	str	r3, [sp, #8]
 800dcc0:	797b      	ldrb	r3, [r7, #5]
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2004      	movs	r0, #4
 800dccc:	f7ff fe38 	bl	800d940 <tcp_pbuf_prealloc>
 800dcd0:	6578      	str	r0, [r7, #84]	; 0x54
 800dcd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 8228 	beq.w	800e12a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dcda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcdc:	6858      	ldr	r0, [r3, #4]
 800dcde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	4413      	add	r3, r2
 800dce6:	8bfa      	ldrh	r2, [r7, #30]
 800dce8:	4619      	mov	r1, r3
 800dcea:	f005 fcf7 	bl	80136dc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800dcee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dcf0:	f7fb fb80 	bl	80093f4 <pbuf_clen>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800dd02:	e03f      	b.n	800dd84 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800dd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	637b      	str	r3, [r7, #52]	; 0x34
 800dd0a:	e002      	b.n	800dd12 <tcp_write+0x222>
 800dd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	637b      	str	r3, [r7, #52]	; 0x34
 800dd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1f8      	bne.n	800dd0c <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1c:	7b1b      	ldrb	r3, [r3, #12]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d115      	bne.n	800dd4e <tcp_write+0x25e>
 800dd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd28:	8952      	ldrh	r2, [r2, #10]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d10d      	bne.n	800dd4e <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dd32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d006      	beq.n	800dd48 <tcp_write+0x258>
 800dd3a:	4b1d      	ldr	r3, [pc, #116]	; (800ddb0 <tcp_write+0x2c0>)
 800dd3c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800dd40:	4921      	ldr	r1, [pc, #132]	; (800ddc8 <tcp_write+0x2d8>)
 800dd42:	481d      	ldr	r0, [pc, #116]	; (800ddb8 <tcp_write+0x2c8>)
 800dd44:	f005 fdbc 	bl	80138c0 <iprintf>
          extendlen = seglen;
 800dd48:	8bfb      	ldrh	r3, [r7, #30]
 800dd4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800dd4c:	e01a      	b.n	800dd84 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800dd4e:	8bfb      	ldrh	r3, [r7, #30]
 800dd50:	2201      	movs	r2, #1
 800dd52:	4619      	mov	r1, r3
 800dd54:	2004      	movs	r0, #4
 800dd56:	f7fa ff41 	bl	8008bdc <pbuf_alloc>
 800dd5a:	6578      	str	r0, [r7, #84]	; 0x54
 800dd5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f000 81e5 	beq.w	800e12e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800dd64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	441a      	add	r2, r3
 800dd6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd6e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800dd70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dd72:	f7fb fb3f 	bl	80093f4 <pbuf_clen>
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dd7e:	4413      	add	r3, r2
 800dd80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dd84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd88:	8bfb      	ldrh	r3, [r7, #30]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dd90:	e0e0      	b.n	800df54 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 80db 	beq.w	800df54 <tcp_write+0x464>
 800dd9e:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <tcp_write+0x2c0>)
 800dda0:	f44f 7209 	mov.w	r2, #548	; 0x224
 800dda4:	4909      	ldr	r1, [pc, #36]	; (800ddcc <tcp_write+0x2dc>)
 800dda6:	4804      	ldr	r0, [pc, #16]	; (800ddb8 <tcp_write+0x2c8>)
 800dda8:	f005 fd8a 	bl	80138c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ddac:	e0d2      	b.n	800df54 <tcp_write+0x464>
 800ddae:	bf00      	nop
 800ddb0:	08015998 	.word	0x08015998
 800ddb4:	08015ac0 	.word	0x08015ac0
 800ddb8:	080159fc 	.word	0x080159fc
 800ddbc:	08015af4 	.word	0x08015af4
 800ddc0:	08015b0c 	.word	0x08015b0c
 800ddc4:	08015b2c 	.word	0x08015b2c
 800ddc8:	08015b4c 	.word	0x08015b4c
 800ddcc:	08015b78 	.word	0x08015b78
    struct pbuf *p;
    u16_t left = len - pos;
 800ddd0:	88fa      	ldrh	r2, [r7, #6]
 800ddd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ddda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800dde6:	8b7a      	ldrh	r2, [r7, #26]
 800dde8:	8bbb      	ldrh	r3, [r7, #28]
 800ddea:	4293      	cmp	r3, r2
 800ddec:	bf28      	it	cs
 800ddee:	4613      	movcs	r3, r2
 800ddf0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ddf2:	797b      	ldrb	r3, [r7, #5]
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d036      	beq.n	800de6a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ddfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de00:	b29a      	uxth	r2, r3
 800de02:	8b3b      	ldrh	r3, [r7, #24]
 800de04:	4413      	add	r3, r2
 800de06:	b299      	uxth	r1, r3
 800de08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	bf0c      	ite	eq
 800de0e:	2301      	moveq	r3, #1
 800de10:	2300      	movne	r3, #0
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f107 0012 	add.w	r0, r7, #18
 800de18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de1a:	9302      	str	r3, [sp, #8]
 800de1c:	797b      	ldrb	r3, [r7, #5]
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4603      	mov	r3, r0
 800de26:	2000      	movs	r0, #0
 800de28:	f7ff fd8a 	bl	800d940 <tcp_pbuf_prealloc>
 800de2c:	6338      	str	r0, [r7, #48]	; 0x30
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 817e 	beq.w	800e132 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800de36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de38:	895b      	ldrh	r3, [r3, #10]
 800de3a:	8b3a      	ldrh	r2, [r7, #24]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d906      	bls.n	800de4e <tcp_write+0x35e>
 800de40:	4b8f      	ldr	r3, [pc, #572]	; (800e080 <tcp_write+0x590>)
 800de42:	f44f 7210 	mov.w	r2, #576	; 0x240
 800de46:	498f      	ldr	r1, [pc, #572]	; (800e084 <tcp_write+0x594>)
 800de48:	488f      	ldr	r0, [pc, #572]	; (800e088 <tcp_write+0x598>)
 800de4a:	f005 fd39 	bl	80138c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	685a      	ldr	r2, [r3, #4]
 800de52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de56:	18d0      	adds	r0, r2, r3
 800de58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	4413      	add	r3, r2
 800de60:	8b3a      	ldrh	r2, [r7, #24]
 800de62:	4619      	mov	r1, r3
 800de64:	f005 fc3a 	bl	80136dc <memcpy>
 800de68:	e02e      	b.n	800dec8 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800de6a:	8a7b      	ldrh	r3, [r7, #18]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d006      	beq.n	800de7e <tcp_write+0x38e>
 800de70:	4b83      	ldr	r3, [pc, #524]	; (800e080 <tcp_write+0x590>)
 800de72:	f240 224b 	movw	r2, #587	; 0x24b
 800de76:	4985      	ldr	r1, [pc, #532]	; (800e08c <tcp_write+0x59c>)
 800de78:	4883      	ldr	r0, [pc, #524]	; (800e088 <tcp_write+0x598>)
 800de7a:	f005 fd21 	bl	80138c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800de7e:	8b3b      	ldrh	r3, [r7, #24]
 800de80:	2201      	movs	r2, #1
 800de82:	4619      	mov	r1, r3
 800de84:	2000      	movs	r0, #0
 800de86:	f7fa fea9 	bl	8008bdc <pbuf_alloc>
 800de8a:	6178      	str	r0, [r7, #20]
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f000 8151 	beq.w	800e136 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800de94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	441a      	add	r2, r3
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	2200      	movs	r2, #0
 800dea8:	4619      	mov	r1, r3
 800deaa:	2000      	movs	r0, #0
 800deac:	f7fa fe96 	bl	8008bdc <pbuf_alloc>
 800deb0:	6338      	str	r0, [r7, #48]	; 0x30
 800deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d103      	bne.n	800dec0 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800deb8:	6978      	ldr	r0, [r7, #20]
 800deba:	f7fb fa07 	bl	80092cc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800debe:	e13d      	b.n	800e13c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dec0:	6979      	ldr	r1, [r7, #20]
 800dec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dec4:	f7fb face 	bl	8009464 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800dec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800deca:	f7fb fa93 	bl	80093f4 <pbuf_clen>
 800dece:	4603      	mov	r3, r0
 800ded0:	461a      	mov	r2, r3
 800ded2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ded6:	4413      	add	r3, r2
 800ded8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800dedc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dee0:	2b0e      	cmp	r3, #14
 800dee2:	d805      	bhi.n	800def0 <tcp_write+0x400>
 800dee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dee8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800deec:	4293      	cmp	r3, r2
 800deee:	d903      	bls.n	800def8 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800def0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800def2:	f7fb f9eb 	bl	80092cc <pbuf_free>
      goto memerr;
 800def6:	e121      	b.n	800e13c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800defc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df00:	441a      	add	r2, r3
 800df02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	4613      	mov	r3, r2
 800df0a:	2200      	movs	r2, #0
 800df0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7ff fc8e 	bl	800d830 <tcp_create_segment>
 800df14:	64f8      	str	r0, [r7, #76]	; 0x4c
 800df16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 810e 	beq.w	800e13a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800df1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df20:	2b00      	cmp	r3, #0
 800df22:	d102      	bne.n	800df2a <tcp_write+0x43a>
      queue = seg;
 800df24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df26:	647b      	str	r3, [r7, #68]	; 0x44
 800df28:	e00c      	b.n	800df44 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800df2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <tcp_write+0x44e>
 800df30:	4b53      	ldr	r3, [pc, #332]	; (800e080 <tcp_write+0x590>)
 800df32:	f240 2285 	movw	r2, #645	; 0x285
 800df36:	4956      	ldr	r1, [pc, #344]	; (800e090 <tcp_write+0x5a0>)
 800df38:	4853      	ldr	r0, [pc, #332]	; (800e088 <tcp_write+0x598>)
 800df3a:	f005 fcc1 	bl	80138c0 <iprintf>
      prev_seg->next = seg;
 800df3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df42:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800df44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df46:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800df48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df4c:	8b3b      	ldrh	r3, [r7, #24]
 800df4e:	4413      	add	r3, r2
 800df50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800df54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df58:	88fb      	ldrh	r3, [r7, #6]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	f4ff af38 	bcc.w	800ddd0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800df60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df62:	2b00      	cmp	r3, #0
 800df64:	d02c      	beq.n	800dfc0 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800df66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df6c:	e01e      	b.n	800dfac <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	891a      	ldrh	r2, [r3, #8]
 800df72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df74:	4413      	add	r3, r2
 800df76:	b29a      	uxth	r2, r3
 800df78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d110      	bne.n	800dfa6 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df8a:	8952      	ldrh	r2, [r2, #10]
 800df8c:	4413      	add	r3, r2
 800df8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df90:	68b9      	ldr	r1, [r7, #8]
 800df92:	4618      	mov	r0, r3
 800df94:	f005 fba2 	bl	80136dc <memcpy>
        p->len += oversize_used;
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	895a      	ldrh	r2, [r3, #10]
 800df9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df9e:	4413      	add	r3, r2
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1dd      	bne.n	800df6e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800dfb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfb4:	891a      	ldrh	r2, [r3, #8]
 800dfb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfb8:	4413      	add	r3, r2
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfbe:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800dfc0:	8a7a      	ldrh	r2, [r7, #18]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800dfc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d018      	beq.n	800e000 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d106      	bne.n	800dfe2 <tcp_write+0x4f2>
 800dfd4:	4b2a      	ldr	r3, [pc, #168]	; (800e080 <tcp_write+0x590>)
 800dfd6:	f240 22ba 	movw	r2, #698	; 0x2ba
 800dfda:	492e      	ldr	r1, [pc, #184]	; (800e094 <tcp_write+0x5a4>)
 800dfdc:	482a      	ldr	r0, [pc, #168]	; (800e088 <tcp_write+0x598>)
 800dfde:	f005 fc6f 	bl	80138c0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800dfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fb fa3b 	bl	8009464 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dff0:	891a      	ldrh	r2, [r3, #8]
 800dff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dff4:	891b      	ldrh	r3, [r3, #8]
 800dff6:	4413      	add	r3, r2
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dffc:	811a      	strh	r2, [r3, #8]
 800dffe:	e037      	b.n	800e070 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800e000:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e002:	2b00      	cmp	r3, #0
 800e004:	d034      	beq.n	800e070 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <tcp_write+0x524>
 800e00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d106      	bne.n	800e022 <tcp_write+0x532>
 800e014:	4b1a      	ldr	r3, [pc, #104]	; (800e080 <tcp_write+0x590>)
 800e016:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800e01a:	491f      	ldr	r1, [pc, #124]	; (800e098 <tcp_write+0x5a8>)
 800e01c:	481a      	ldr	r0, [pc, #104]	; (800e088 <tcp_write+0x598>)
 800e01e:	f005 fc4f 	bl	80138c0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	62bb      	str	r3, [r7, #40]	; 0x28
 800e028:	e009      	b.n	800e03e <tcp_write+0x54e>
      p->tot_len += extendlen;
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	891a      	ldrh	r2, [r3, #8]
 800e02e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e030:	4413      	add	r3, r2
 800e032:	b29a      	uxth	r2, r3
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d1f1      	bne.n	800e02a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e048:	891a      	ldrh	r2, [r3, #8]
 800e04a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e04c:	4413      	add	r3, r2
 800e04e:	b29a      	uxth	r2, r3
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e056:	895a      	ldrh	r2, [r3, #10]
 800e058:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e05a:	4413      	add	r3, r2
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e064:	891a      	ldrh	r2, [r3, #8]
 800e066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e068:	4413      	add	r3, r2
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e06e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e072:	2b00      	cmp	r3, #0
 800e074:	d112      	bne.n	800e09c <tcp_write+0x5ac>
    pcb->unsent = queue;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e07a:	669a      	str	r2, [r3, #104]	; 0x68
 800e07c:	e011      	b.n	800e0a2 <tcp_write+0x5b2>
 800e07e:	bf00      	nop
 800e080:	08015998 	.word	0x08015998
 800e084:	08015ba8 	.word	0x08015ba8
 800e088:	080159fc 	.word	0x080159fc
 800e08c:	08015be8 	.word	0x08015be8
 800e090:	08015bf8 	.word	0x08015bf8
 800e094:	08015c0c 	.word	0x08015c0c
 800e098:	08015c44 	.word	0x08015c44
  } else {
    last_unsent->next = queue;
 800e09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0a6:	88fb      	ldrh	r3, [r7, #6]
 800e0a8:	441a      	add	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e0b4:	88fb      	ldrh	r3, [r7, #6]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e0c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00e      	beq.n	800e0f2 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10a      	bne.n	800e0f2 <tcp_write+0x602>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d106      	bne.n	800e0f2 <tcp_write+0x602>
 800e0e4:	4b2c      	ldr	r3, [pc, #176]	; (800e198 <tcp_write+0x6a8>)
 800e0e6:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e0ea:	492c      	ldr	r1, [pc, #176]	; (800e19c <tcp_write+0x6ac>)
 800e0ec:	482c      	ldr	r0, [pc, #176]	; (800e1a0 <tcp_write+0x6b0>)
 800e0ee:	f005 fbe7 	bl	80138c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800e0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d016      	beq.n	800e126 <tcp_write+0x636>
 800e0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d012      	beq.n	800e126 <tcp_write+0x636>
 800e100:	797b      	ldrb	r3, [r7, #5]
 800e102:	f003 0302 	and.w	r3, r3, #2
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10d      	bne.n	800e126 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	899b      	ldrh	r3, [r3, #12]
 800e110:	b29c      	uxth	r4, r3
 800e112:	2008      	movs	r0, #8
 800e114:	f7f9 fd07 	bl	8007b26 <lwip_htons>
 800e118:	4603      	mov	r3, r0
 800e11a:	461a      	mov	r2, r3
 800e11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	4322      	orrs	r2, r4
 800e122:	b292      	uxth	r2, r2
 800e124:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	e031      	b.n	800e18e <tcp_write+0x69e>
          goto memerr;
 800e12a:	bf00      	nop
 800e12c:	e006      	b.n	800e13c <tcp_write+0x64c>
            goto memerr;
 800e12e:	bf00      	nop
 800e130:	e004      	b.n	800e13c <tcp_write+0x64c>
        goto memerr;
 800e132:	bf00      	nop
 800e134:	e002      	b.n	800e13c <tcp_write+0x64c>
        goto memerr;
 800e136:	bf00      	nop
 800e138:	e000      	b.n	800e13c <tcp_write+0x64c>
      goto memerr;
 800e13a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	7e9b      	ldrb	r3, [r3, #26]
 800e140:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e144:	b2da      	uxtb	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d002      	beq.n	800e156 <tcp_write+0x666>
    pbuf_free(concat_p);
 800e150:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e152:	f7fb f8bb 	bl	80092cc <pbuf_free>
  }
  if (queue != NULL) {
 800e156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <tcp_write+0x672>
    tcp_segs_free(queue);
 800e15c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e15e:	f7fc fcd0 	bl	800ab02 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00e      	beq.n	800e18a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10a      	bne.n	800e18a <tcp_write+0x69a>
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d106      	bne.n	800e18a <tcp_write+0x69a>
 800e17c:	4b06      	ldr	r3, [pc, #24]	; (800e198 <tcp_write+0x6a8>)
 800e17e:	f240 3201 	movw	r2, #769	; 0x301
 800e182:	4906      	ldr	r1, [pc, #24]	; (800e19c <tcp_write+0x6ac>)
 800e184:	4806      	ldr	r0, [pc, #24]	; (800e1a0 <tcp_write+0x6b0>)
 800e186:	f005 fb9b 	bl	80138c0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e18a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e18e:	4618      	mov	r0, r3
 800e190:	375c      	adds	r7, #92	; 0x5c
 800e192:	46bd      	mov	sp, r7
 800e194:	bd90      	pop	{r4, r7, pc}
 800e196:	bf00      	nop
 800e198:	08015998 	.word	0x08015998
 800e19c:	08015c7c 	.word	0x08015c7c
 800e1a0:	080159fc 	.word	0x080159fc

0800e1a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08a      	sub	sp, #40	; 0x28
 800e1a8:	af02      	add	r7, sp, #8
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e1b8:	78fb      	ldrb	r3, [r7, #3]
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <tcp_enqueue_flags+0x2c>
 800e1c2:	4b6f      	ldr	r3, [pc, #444]	; (800e380 <tcp_enqueue_flags+0x1dc>)
 800e1c4:	f240 321a 	movw	r2, #794	; 0x31a
 800e1c8:	496e      	ldr	r1, [pc, #440]	; (800e384 <tcp_enqueue_flags+0x1e0>)
 800e1ca:	486f      	ldr	r0, [pc, #444]	; (800e388 <tcp_enqueue_flags+0x1e4>)
 800e1cc:	f005 fb78 	bl	80138c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1d6:	2b0d      	cmp	r3, #13
 800e1d8:	d806      	bhi.n	800e1e8 <tcp_enqueue_flags+0x44>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1e0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d90e      	bls.n	800e206 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800e1e8:	78fb      	ldrb	r3, [r7, #3]
 800e1ea:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7e9b      	ldrb	r3, [r3, #26]
 800e1f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e200:	f04f 33ff 	mov.w	r3, #4294967295
 800e204:	e0b7      	b.n	800e376 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800e206:	78fb      	ldrb	r3, [r7, #3]
 800e208:	f003 0302 	and.w	r3, r3, #2
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800e210:	2301      	movs	r3, #1
 800e212:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e214:	7ffb      	ldrb	r3, [r7, #31]
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	f003 0304 	and.w	r3, r3, #4
 800e21e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e220:	7dfb      	ldrb	r3, [r7, #23]
 800e222:	b29b      	uxth	r3, r3
 800e224:	2200      	movs	r2, #0
 800e226:	4619      	mov	r1, r3
 800e228:	2000      	movs	r0, #0
 800e22a:	f7fa fcd7 	bl	8008bdc <pbuf_alloc>
 800e22e:	6138      	str	r0, [r7, #16]
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7e9b      	ldrb	r3, [r3, #26]
 800e23a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e244:	f04f 33ff 	mov.w	r3, #4294967295
 800e248:	e095      	b.n	800e376 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	895a      	ldrh	r2, [r3, #10]
 800e24e:	7dfb      	ldrb	r3, [r7, #23]
 800e250:	b29b      	uxth	r3, r3
 800e252:	429a      	cmp	r2, r3
 800e254:	d206      	bcs.n	800e264 <tcp_enqueue_flags+0xc0>
 800e256:	4b4a      	ldr	r3, [pc, #296]	; (800e380 <tcp_enqueue_flags+0x1dc>)
 800e258:	f44f 7250 	mov.w	r2, #832	; 0x340
 800e25c:	494b      	ldr	r1, [pc, #300]	; (800e38c <tcp_enqueue_flags+0x1e8>)
 800e25e:	484a      	ldr	r0, [pc, #296]	; (800e388 <tcp_enqueue_flags+0x1e4>)
 800e260:	f005 fb2e 	bl	80138c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e268:	78fa      	ldrb	r2, [r7, #3]
 800e26a:	7ffb      	ldrb	r3, [r7, #31]
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	460b      	mov	r3, r1
 800e270:	6939      	ldr	r1, [r7, #16]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff fadc 	bl	800d830 <tcp_create_segment>
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d109      	bne.n	800e294 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	7e9b      	ldrb	r3, [r3, #26]
 800e284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e28e:	f04f 33ff 	mov.w	r3, #4294967295
 800e292:	e070      	b.n	800e376 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	f003 0303 	and.w	r3, r3, #3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d006      	beq.n	800e2ae <tcp_enqueue_flags+0x10a>
 800e2a0:	4b37      	ldr	r3, [pc, #220]	; (800e380 <tcp_enqueue_flags+0x1dc>)
 800e2a2:	f240 3249 	movw	r2, #841	; 0x349
 800e2a6:	493a      	ldr	r1, [pc, #232]	; (800e390 <tcp_enqueue_flags+0x1ec>)
 800e2a8:	4837      	ldr	r0, [pc, #220]	; (800e388 <tcp_enqueue_flags+0x1e4>)
 800e2aa:	f005 fb09 	bl	80138c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	891b      	ldrh	r3, [r3, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d006      	beq.n	800e2c4 <tcp_enqueue_flags+0x120>
 800e2b6:	4b32      	ldr	r3, [pc, #200]	; (800e380 <tcp_enqueue_flags+0x1dc>)
 800e2b8:	f240 324a 	movw	r2, #842	; 0x34a
 800e2bc:	4935      	ldr	r1, [pc, #212]	; (800e394 <tcp_enqueue_flags+0x1f0>)
 800e2be:	4832      	ldr	r0, [pc, #200]	; (800e388 <tcp_enqueue_flags+0x1e4>)
 800e2c0:	f005 fafe 	bl	80138c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d103      	bne.n	800e2d4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	669a      	str	r2, [r3, #104]	; 0x68
 800e2d2:	e00d      	b.n	800e2f0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2d8:	61bb      	str	r3, [r7, #24]
 800e2da:	e002      	b.n	800e2e2 <tcp_enqueue_flags+0x13e>
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	61bb      	str	r3, [r7, #24]
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1f8      	bne.n	800e2dc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	f003 0302 	and.w	r3, r3, #2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d104      	bne.n	800e30c <tcp_enqueue_flags+0x168>
 800e302:	78fb      	ldrb	r3, [r7, #3]
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d004      	beq.n	800e316 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d006      	beq.n	800e32e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7e9b      	ldrb	r3, [r3, #26]
 800e324:	f043 0320 	orr.w	r3, r3, #32
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	4618      	mov	r0, r3
 800e334:	f7fb f85e 	bl	80093f4 <pbuf_clen>
 800e338:	4603      	mov	r3, r0
 800e33a:	461a      	mov	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e342:	4413      	add	r3, r2
 800e344:	b29a      	uxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00e      	beq.n	800e374 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10a      	bne.n	800e374 <tcp_enqueue_flags+0x1d0>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e362:	2b00      	cmp	r3, #0
 800e364:	d106      	bne.n	800e374 <tcp_enqueue_flags+0x1d0>
 800e366:	4b06      	ldr	r3, [pc, #24]	; (800e380 <tcp_enqueue_flags+0x1dc>)
 800e368:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e36c:	490a      	ldr	r1, [pc, #40]	; (800e398 <tcp_enqueue_flags+0x1f4>)
 800e36e:	4806      	ldr	r0, [pc, #24]	; (800e388 <tcp_enqueue_flags+0x1e4>)
 800e370:	f005 faa6 	bl	80138c0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3720      	adds	r7, #32
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	08015998 	.word	0x08015998
 800e384:	08015c9c 	.word	0x08015c9c
 800e388:	080159fc 	.word	0x080159fc
 800e38c:	08015cf4 	.word	0x08015cf4
 800e390:	08015d30 	.word	0x08015d30
 800e394:	08015d48 	.word	0x08015d48
 800e398:	08015d74 	.word	0x08015d74

0800e39c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e39c:	b590      	push	{r4, r7, lr}
 800e39e:	b08b      	sub	sp, #44	; 0x2c
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e3a8:	7dbb      	ldrb	r3, [r7, #22]
 800e3aa:	b29c      	uxth	r4, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7f9 fbc5 	bl	8007b40 <lwip_htonl>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7ff f97d 	bl	800d6bc <tcp_output_alloc_header>
 800e3c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d109      	bne.n	800e3de <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	7e9b      	ldrb	r3, [r3, #26]
 800e3ce:	f043 0303 	orr.w	r3, r3, #3
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e3d8:	f06f 0301 	mvn.w	r3, #1
 800e3dc:	e036      	b.n	800e44c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f002 fa2a 	bl	801083c <ip4_route>
 800e3e8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800e3f0:	23fc      	movs	r3, #252	; 0xfc
 800e3f2:	75fb      	strb	r3, [r7, #23]
 800e3f4:	e012      	b.n	800e41c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	1d18      	adds	r0, r3, #4
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7a9c      	ldrb	r4, [r3, #10]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	7a5b      	ldrb	r3, [r3, #9]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	9202      	str	r2, [sp, #8]
 800e408:	2206      	movs	r2, #6
 800e40a:	9201      	str	r2, [sp, #4]
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	4623      	mov	r3, r4
 800e410:	4602      	mov	r2, r0
 800e412:	6938      	ldr	r0, [r7, #16]
 800e414:	f002 fbbc 	bl	8010b90 <ip4_output_if>
 800e418:	4603      	mov	r3, r0
 800e41a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e41c:	6938      	ldr	r0, [r7, #16]
 800e41e:	f7fa ff55 	bl	80092cc <pbuf_free>

  if (err != ERR_OK) {
 800e422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d007      	beq.n	800e43a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7e9b      	ldrb	r3, [r3, #26]
 800e42e:	f043 0303 	orr.w	r3, r3, #3
 800e432:	b2da      	uxtb	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	769a      	strb	r2, [r3, #26]
 800e438:	e006      	b.n	800e448 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7e9b      	ldrb	r3, [r3, #26]
 800e43e:	f023 0303 	bic.w	r3, r3, #3
 800e442:	b2da      	uxtb	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800e448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	371c      	adds	r7, #28
 800e450:	46bd      	mov	sp, r7
 800e452:	bd90      	pop	{r4, r7, pc}

0800e454 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e454:	b5b0      	push	{r4, r5, r7, lr}
 800e456:	b08a      	sub	sp, #40	; 0x28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	7d1b      	ldrb	r3, [r3, #20]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d106      	bne.n	800e472 <tcp_output+0x1e>
 800e464:	4b99      	ldr	r3, [pc, #612]	; (800e6cc <tcp_output+0x278>)
 800e466:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e46a:	4999      	ldr	r1, [pc, #612]	; (800e6d0 <tcp_output+0x27c>)
 800e46c:	4899      	ldr	r0, [pc, #612]	; (800e6d4 <tcp_output+0x280>)
 800e46e:	f005 fa27 	bl	80138c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e472:	4b99      	ldr	r3, [pc, #612]	; (800e6d8 <tcp_output+0x284>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d101      	bne.n	800e480 <tcp_output+0x2c>
    return ERR_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	e1cb      	b.n	800e818 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e48c:	4293      	cmp	r3, r2
 800e48e:	bf28      	it	cs
 800e490:	4613      	movcs	r3, r2
 800e492:	b29b      	uxth	r3, r3
 800e494:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e49a:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7e9b      	ldrb	r3, [r3, #26]
 800e4a0:	f003 0302 	and.w	r3, r3, #2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d017      	beq.n	800e4d8 <tcp_output+0x84>
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00f      	beq.n	800e4ce <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f9 fb43 	bl	8007b40 <lwip_htonl>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4c4:	8912      	ldrh	r2, [r2, #8]
 800e4c6:	4413      	add	r3, r2
     (seg == NULL ||
 800e4c8:	69ba      	ldr	r2, [r7, #24]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d204      	bcs.n	800e4d8 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f7ff ff64 	bl	800e39c <tcp_send_empty_ack>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	e19f      	b.n	800e818 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d007      	beq.n	800e4f4 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800e4e4:	e002      	b.n	800e4ec <tcp_output+0x98>
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	623b      	str	r3, [r7, #32]
 800e4ec:	6a3b      	ldr	r3, [r7, #32]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1f8      	bne.n	800e4e6 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f002 f99f 	bl	801083c <ip4_route>
 800e4fe:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d102      	bne.n	800e50c <tcp_output+0xb8>
    return ERR_RTE;
 800e506:	f06f 0303 	mvn.w	r3, #3
 800e50a:	e185      	b.n	800e818 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d003      	beq.n	800e51a <tcp_output+0xc6>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d111      	bne.n	800e53e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <tcp_output+0xd2>
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	3304      	adds	r3, #4
 800e524:	e000      	b.n	800e528 <tcp_output+0xd4>
 800e526:	2300      	movs	r3, #0
 800e528:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d102      	bne.n	800e536 <tcp_output+0xe2>
      return ERR_RTE;
 800e530:	f06f 0303 	mvn.w	r3, #3
 800e534:	e170      	b.n	800e818 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 813f 	beq.w	800e7c4 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7f9 faf7 	bl	8007b40 <lwip_htonl>
 800e552:	4602      	mov	r2, r0
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55c:	8912      	ldrh	r2, [r2, #8]
 800e55e:	4413      	add	r3, r2
  if (seg != NULL &&
 800e560:	69ba      	ldr	r2, [r7, #24]
 800e562:	429a      	cmp	r2, r3
 800e564:	f080 812e 	bcs.w	800e7c4 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f000 812a 	beq.w	800e7c4 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e576:	461a      	mov	r2, r3
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	4293      	cmp	r3, r2
 800e57c:	f040 8122 	bne.w	800e7c4 <tcp_output+0x370>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e584:	2b00      	cmp	r3, #0
 800e586:	f040 811d 	bne.w	800e7c4 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e590:	2b00      	cmp	r3, #0
 800e592:	f040 812c 	bne.w	800e7ee <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800e5a6:	e122      	b.n	800e7ee <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	899b      	ldrh	r3, [r3, #12]
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7f9 fab8 	bl	8007b26 <lwip_htons>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f003 0304 	and.w	r3, r3, #4
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d006      	beq.n	800e5ce <tcp_output+0x17a>
 800e5c0:	4b42      	ldr	r3, [pc, #264]	; (800e6cc <tcp_output+0x278>)
 800e5c2:	f240 4245 	movw	r2, #1093	; 0x445
 800e5c6:	4945      	ldr	r1, [pc, #276]	; (800e6dc <tcp_output+0x288>)
 800e5c8:	4842      	ldr	r0, [pc, #264]	; (800e6d4 <tcp_output+0x280>)
 800e5ca:	f005 f979 	bl	80138c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d01f      	beq.n	800e616 <tcp_output+0x1c2>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	7e9b      	ldrb	r3, [r3, #26]
 800e5da:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d119      	bne.n	800e616 <tcp_output+0x1c2>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00b      	beq.n	800e602 <tcp_output+0x1ae>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d110      	bne.n	800e616 <tcp_output+0x1c2>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5f8:	891a      	ldrh	r2, [r3, #8]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d209      	bcs.n	800e616 <tcp_output+0x1c2>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d004      	beq.n	800e616 <tcp_output+0x1c2>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e612:	2b0d      	cmp	r3, #13
 800e614:	d901      	bls.n	800e61a <tcp_output+0x1c6>
 800e616:	2301      	movs	r3, #1
 800e618:	e000      	b.n	800e61c <tcp_output+0x1c8>
 800e61a:	2300      	movs	r3, #0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7e9b      	ldrb	r3, [r3, #26]
 800e624:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 80e2 	beq.w	800e7f2 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7d1b      	ldrb	r3, [r3, #20]
 800e632:	2b02      	cmp	r3, #2
 800e634:	d00d      	beq.n	800e652 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	899b      	ldrh	r3, [r3, #12]
 800e63c:	b29c      	uxth	r4, r3
 800e63e:	2010      	movs	r0, #16
 800e640:	f7f9 fa71 	bl	8007b26 <lwip_htons>
 800e644:	4603      	mov	r3, r0
 800e646:	461a      	mov	r2, r3
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	4322      	orrs	r2, r4
 800e64e:	b292      	uxth	r2, r2
 800e650:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e658:	f000 f8e2 	bl	800e820 <tcp_output_segment>
 800e65c:	4603      	mov	r3, r0
 800e65e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d009      	beq.n	800e67c <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	7e9b      	ldrb	r3, [r3, #26]
 800e66c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e670:	b2da      	uxtb	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	769a      	strb	r2, [r3, #26]
      return err;
 800e676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e67a:	e0cd      	b.n	800e818 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	7d1b      	ldrb	r3, [r3, #20]
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d006      	beq.n	800e69a <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	7e9b      	ldrb	r3, [r3, #26]
 800e690:	f023 0303 	bic.w	r3, r3, #3
 800e694:	b2da      	uxtb	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f9 fa4d 	bl	8007b40 <lwip_htonl>
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	891b      	ldrh	r3, [r3, #8]
 800e6ac:	461d      	mov	r5, r3
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	899b      	ldrh	r3, [r3, #12]
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f9 fa35 	bl	8007b26 <lwip_htons>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f003 0303 	and.w	r3, r3, #3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00c      	beq.n	800e6e0 <tcp_output+0x28c>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e00b      	b.n	800e6e2 <tcp_output+0x28e>
 800e6ca:	bf00      	nop
 800e6cc:	08015998 	.word	0x08015998
 800e6d0:	08015d9c 	.word	0x08015d9c
 800e6d4:	080159fc 	.word	0x080159fc
 800e6d8:	20008e04 	.word	0x20008e04
 800e6dc:	08015dc4 	.word	0x08015dc4
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	442b      	add	r3, r5
 800e6e4:	4423      	add	r3, r4
 800e6e6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da02      	bge.n	800e6fa <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	891b      	ldrh	r3, [r3, #8]
 800e6fe:	461c      	mov	r4, r3
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	899b      	ldrh	r3, [r3, #12]
 800e706:	b29b      	uxth	r3, r3
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f9 fa0c 	bl	8007b26 <lwip_htons>
 800e70e:	4603      	mov	r3, r0
 800e710:	f003 0303 	and.w	r3, r3, #3
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <tcp_output+0x2c8>
 800e718:	2301      	movs	r3, #1
 800e71a:	e000      	b.n	800e71e <tcp_output+0x2ca>
 800e71c:	2300      	movs	r3, #0
 800e71e:	4423      	add	r3, r4
 800e720:	2b00      	cmp	r3, #0
 800e722:	d049      	beq.n	800e7b8 <tcp_output+0x364>
      seg->next = NULL;
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d105      	bne.n	800e73e <tcp_output+0x2ea>
        pcb->unacked = seg;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e736:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73a:	623b      	str	r3, [r7, #32]
 800e73c:	e03f      	b.n	800e7be <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	4618      	mov	r0, r3
 800e746:	f7f9 f9fb 	bl	8007b40 <lwip_htonl>
 800e74a:	4604      	mov	r4, r0
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	f7f9 f9f4 	bl	8007b40 <lwip_htonl>
 800e758:	4603      	mov	r3, r0
 800e75a:	1ae3      	subs	r3, r4, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	da24      	bge.n	800e7aa <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	336c      	adds	r3, #108	; 0x6c
 800e764:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e766:	e002      	b.n	800e76e <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d011      	beq.n	800e79a <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f9 f9de 	bl	8007b40 <lwip_htonl>
 800e784:	4604      	mov	r4, r0
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7f9 f9d7 	bl	8007b40 <lwip_htonl>
 800e792:	4603      	mov	r3, r0
 800e794:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e796:	2b00      	cmp	r3, #0
 800e798:	dbe6      	blt.n	800e768 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a6:	601a      	str	r2, [r3, #0]
 800e7a8:	e009      	b.n	800e7be <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ae:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	623b      	str	r3, [r7, #32]
 800e7b6:	e002      	b.n	800e7be <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e7b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7ba:	f7fc f9b7 	bl	800ab2c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d015      	beq.n	800e7f6 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f9 f9b5 	bl	8007b40 <lwip_htonl>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e0:	8912      	ldrh	r2, [r2, #8]
 800e7e2:	4413      	add	r3, r2
  while (seg != NULL &&
 800e7e4:	69ba      	ldr	r2, [r7, #24]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	f4bf aede 	bcs.w	800e5a8 <tcp_output+0x154>
  }
output_done:
 800e7ec:	e003      	b.n	800e7f6 <tcp_output+0x3a2>
    goto output_done;
 800e7ee:	bf00      	nop
 800e7f0:	e002      	b.n	800e7f8 <tcp_output+0x3a4>
      break;
 800e7f2:	bf00      	nop
 800e7f4:	e000      	b.n	800e7f8 <tcp_output+0x3a4>
output_done:
 800e7f6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d103      	bne.n	800e808 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7e9b      	ldrb	r3, [r3, #26]
 800e80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e810:	b2da      	uxtb	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3728      	adds	r7, #40	; 0x28
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bdb0      	pop	{r4, r5, r7, pc}

0800e820 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e820:	b5b0      	push	{r4, r5, r7, lr}
 800e822:	b08c      	sub	sp, #48	; 0x30
 800e824:	af04      	add	r7, sp, #16
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	89db      	ldrh	r3, [r3, #14]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d001      	beq.n	800e83a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e836:	2300      	movs	r3, #0
 800e838:	e08a      	b.n	800e950 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	68dc      	ldr	r4, [r3, #12]
 800e842:	4610      	mov	r0, r2
 800e844:	f7f9 f97c 	bl	8007b40 <lwip_htonl>
 800e848:	4603      	mov	r3, r0
 800e84a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	68dc      	ldr	r4, [r3, #12]
 800e854:	4610      	mov	r0, r2
 800e856:	f7f9 f966 	bl	8007b26 <lwip_htons>
 800e85a:	4603      	mov	r3, r0
 800e85c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e866:	441a      	add	r2, r3
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	3314      	adds	r3, #20
 800e872:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	7a9b      	ldrb	r3, [r3, #10]
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d014      	beq.n	800e8aa <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	3304      	adds	r3, #4
 800e884:	4619      	mov	r1, r3
 800e886:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e88a:	f7fc fc7b 	bl	800b184 <tcp_eff_send_mss_impl>
 800e88e:	4603      	mov	r3, r0
 800e890:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e892:	8b7b      	ldrh	r3, [r7, #26]
 800e894:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f9 f951 	bl	8007b40 <lwip_htonl>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	da02      	bge.n	800e8ba <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10c      	bne.n	800e8dc <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800e8c2:	4b25      	ldr	r3, [pc, #148]	; (800e958 <tcp_output_segment+0x138>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7f9 f935 	bl	8007b40 <lwip_htonl>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	68da      	ldr	r2, [r3, #12]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	8959      	ldrh	r1, [r3, #10]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	8b3a      	ldrh	r2, [r7, #24]
 800e8f6:	1a8a      	subs	r2, r1, r2
 800e8f8:	b292      	uxth	r2, r2
 800e8fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	8919      	ldrh	r1, [r3, #8]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	8b3a      	ldrh	r2, [r7, #24]
 800e908:	1a8a      	subs	r2, r1, r2
 800e90a:	b292      	uxth	r2, r2
 800e90c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	68fa      	ldr	r2, [r7, #12]
 800e914:	68d2      	ldr	r2, [r2, #12]
 800e916:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	741a      	strb	r2, [r3, #16]
 800e920:	2200      	movs	r2, #0
 800e922:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6858      	ldr	r0, [r3, #4]
 800e928:	68b9      	ldr	r1, [r7, #8]
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	1d1c      	adds	r4, r3, #4
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	7a9d      	ldrb	r5, [r3, #10]
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	7a5b      	ldrb	r3, [r3, #9]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	9202      	str	r2, [sp, #8]
 800e93a:	2206      	movs	r2, #6
 800e93c:	9201      	str	r2, [sp, #4]
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	462b      	mov	r3, r5
 800e942:	4622      	mov	r2, r4
 800e944:	f002 f924 	bl	8010b90 <ip4_output_if>
 800e948:	4603      	mov	r3, r0
 800e94a:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800e94c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3720      	adds	r7, #32
 800e954:	46bd      	mov	sp, r7
 800e956:	bdb0      	pop	{r4, r5, r7, pc}
 800e958:	20008db8 	.word	0x20008db8

0800e95c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b08c      	sub	sp, #48	; 0x30
 800e960:	af04      	add	r7, sp, #16
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e96a:	2200      	movs	r2, #0
 800e96c:	2114      	movs	r1, #20
 800e96e:	2001      	movs	r0, #1
 800e970:	f7fa f934 	bl	8008bdc <pbuf_alloc>
 800e974:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d05b      	beq.n	800ea34 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	895b      	ldrh	r3, [r3, #10]
 800e980:	2b13      	cmp	r3, #19
 800e982:	d806      	bhi.n	800e992 <tcp_rst+0x36>
 800e984:	4b2d      	ldr	r3, [pc, #180]	; (800ea3c <tcp_rst+0xe0>)
 800e986:	f240 524c 	movw	r2, #1356	; 0x54c
 800e98a:	492d      	ldr	r1, [pc, #180]	; (800ea40 <tcp_rst+0xe4>)
 800e98c:	482d      	ldr	r0, [pc, #180]	; (800ea44 <tcp_rst+0xe8>)
 800e98e:	f004 ff97 	bl	80138c0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800e998:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7f9 f8c3 	bl	8007b26 <lwip_htons>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e9a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7f9 f8bb 	bl	8007b26 <lwip_htons>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f7f9 f8c1 	bl	8007b40 <lwip_htonl>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e9c4:	68b8      	ldr	r0, [r7, #8]
 800e9c6:	f7f9 f8bb 	bl	8007b40 <lwip_htonl>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e9d0:	f245 0014 	movw	r0, #20500	; 0x5014
 800e9d4:	f7f9 f8a7 	bl	8007b26 <lwip_htons>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	461a      	mov	r2, r3
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f042 0208 	orr.w	r2, r2, #8
 800e9e8:	739a      	strb	r2, [r3, #14]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e9f0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	741a      	strb	r2, [r3, #16]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	749a      	strb	r2, [r3, #18]
 800ea02:	2200      	movs	r2, #0
 800ea04:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ea06:	6838      	ldr	r0, [r7, #0]
 800ea08:	f001 ff18 	bl	801083c <ip4_route>
 800ea0c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00b      	beq.n	800ea2c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	9302      	str	r3, [sp, #8]
 800ea18:	2306      	movs	r3, #6
 800ea1a:	9301      	str	r3, [sp, #4]
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	23ff      	movs	r3, #255	; 0xff
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	69f8      	ldr	r0, [r7, #28]
 800ea28:	f002 f8b2 	bl	8010b90 <ip4_output_if>
  }
  pbuf_free(p);
 800ea2c:	69f8      	ldr	r0, [r7, #28]
 800ea2e:	f7fa fc4d 	bl	80092cc <pbuf_free>
 800ea32:	e000      	b.n	800ea36 <tcp_rst+0xda>
    return;
 800ea34:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ea36:	3720      	adds	r7, #32
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	08015998 	.word	0x08015998
 800ea40:	080159cc 	.word	0x080159cc
 800ea44:	080159fc 	.word	0x080159fc

0800ea48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d029      	beq.n	800eaac <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea5c:	60fb      	str	r3, [r7, #12]
 800ea5e:	e002      	b.n	800ea66 <tcp_rexmit_rto+0x1e>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1f8      	bne.n	800ea60 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea8a:	2bff      	cmp	r3, #255	; 0xff
 800ea8c:	d007      	beq.n	800ea9e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea94:	3301      	adds	r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff fcd5 	bl	800e454 <tcp_output>
 800eaaa:	e000      	b.n	800eaae <tcp_rexmit_rto+0x66>
    return;
 800eaac:	bf00      	nop
}
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800eab4:	b590      	push	{r4, r7, lr}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d043      	beq.n	800eb4c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	3368      	adds	r3, #104	; 0x68
 800ead6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ead8:	e002      	b.n	800eae0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d011      	beq.n	800eb0c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f9 f825 	bl	8007b40 <lwip_htonl>
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f9 f81e 	bl	8007b40 <lwip_htonl>
 800eb04:	4603      	mov	r3, r0
 800eb06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dbe6      	blt.n	800eada <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d103      	bne.n	800eb2a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb30:	2bff      	cmp	r3, #255	; 0xff
 800eb32:	d007      	beq.n	800eb44 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	635a      	str	r2, [r3, #52]	; 0x34
 800eb4a:	e000      	b.n	800eb4e <tcp_rexmit+0x9a>
    return;
 800eb4c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800eb4e:	3714      	adds	r7, #20
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd90      	pop	{r4, r7, pc}

0800eb54 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d041      	beq.n	800ebe8 <tcp_rexmit_fast+0x94>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	7e9b      	ldrb	r3, [r3, #26]
 800eb68:	f003 0304 	and.w	r3, r3, #4
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d13b      	bne.n	800ebe8 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7ff ff9f 	bl	800eab4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb82:	4293      	cmp	r3, r2
 800eb84:	bf28      	it	cs
 800eb86:	4613      	movcs	r3, r2
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	0fda      	lsrs	r2, r3, #31
 800eb8c:	4413      	add	r3, r2
 800eb8e:	105b      	asrs	r3, r3, #1
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800eb9e:	461a      	mov	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d206      	bcs.n	800ebb8 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebae:	005b      	lsls	r3, r3, #1
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	0049      	lsls	r1, r1, #1
 800ebc6:	440b      	add	r3, r1
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	4413      	add	r3, r2
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	7e9b      	ldrb	r3, [r3, #26]
 800ebd8:	f043 0304 	orr.w	r3, r3, #4
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08a      	sub	sp, #40	; 0x28
 800ebf4:	af04      	add	r7, sp, #16
 800ebf6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f8 ff9e 	bl	8007b40 <lwip_htonl>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2200      	movs	r2, #0
 800ec08:	2100      	movs	r1, #0
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7fe fd56 	bl	800d6bc <tcp_output_alloc_header>
 800ec10:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d102      	bne.n	800ec1e <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ec18:	f04f 33ff 	mov.w	r3, #4294967295
 800ec1c:	e021      	b.n	800ec62 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4618      	mov	r0, r3
 800ec24:	f001 fe0a 	bl	801083c <ip4_route>
 800ec28:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800ec30:	23fc      	movs	r3, #252	; 0xfc
 800ec32:	75fb      	strb	r3, [r7, #23]
 800ec34:	e010      	b.n	800ec58 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800ec36:	6879      	ldr	r1, [r7, #4]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	1d1a      	adds	r2, r3, #4
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	7a98      	ldrb	r0, [r3, #10]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	9302      	str	r3, [sp, #8]
 800ec44:	2306      	movs	r3, #6
 800ec46:	9301      	str	r3, [sp, #4]
 800ec48:	2300      	movs	r3, #0
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	6938      	ldr	r0, [r7, #16]
 800ec50:	f001 ff9e 	bl	8010b90 <ip4_output_if>
 800ec54:	4603      	mov	r3, r0
 800ec56:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ec58:	6938      	ldr	r0, [r7, #16]
 800ec5a:	f7fa fb37 	bl	80092cc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ec5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3718      	adds	r7, #24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ec6a:	b590      	push	{r4, r7, lr}
 800ec6c:	b08f      	sub	sp, #60	; 0x3c
 800ec6e:	af04      	add	r7, sp, #16
 800ec70:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec76:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec82:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e085      	b.n	800ed9a <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	899b      	ldrh	r3, [r3, #12]
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7f8 ff45 	bl	8007b26 <lwip_htons>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <tcp_zero_window_probe+0x48>
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	891b      	ldrh	r3, [r3, #8]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <tcp_zero_window_probe+0x48>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e000      	b.n	800ecb4 <tcp_zero_window_probe+0x4a>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ecb6:	7ffb      	ldrb	r3, [r7, #31]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	bf0c      	ite	eq
 800ecbc:	2301      	moveq	r3, #1
 800ecbe:	2300      	movne	r3, #0
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ecc4:	6a3b      	ldr	r3, [r7, #32]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	8bba      	ldrh	r2, [r7, #28]
 800eccc:	2100      	movs	r1, #0
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fe fcf4 	bl	800d6bc <tcp_output_alloc_header>
 800ecd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d102      	bne.n	800ece2 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ecdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ece0:	e05b      	b.n	800ed9a <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ece8:	7ffb      	ldrb	r3, [r7, #31]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00e      	beq.n	800ed0c <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	899b      	ldrh	r3, [r3, #12]
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ecf8:	b29c      	uxth	r4, r3
 800ecfa:	2011      	movs	r0, #17
 800ecfc:	f7f8 ff13 	bl	8007b26 <lwip_htons>
 800ed00:	4603      	mov	r3, r0
 800ed02:	4323      	orrs	r3, r4
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	819a      	strh	r2, [r3, #12]
 800ed0a:	e010      	b.n	800ed2e <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	3314      	adds	r3, #20
 800ed12:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	6858      	ldr	r0, [r3, #4]
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	891a      	ldrh	r2, [r3, #8]
 800ed1e:	6a3b      	ldr	r3, [r7, #32]
 800ed20:	891b      	ldrh	r3, [r3, #8]
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	2201      	movs	r2, #1
 800ed28:	6939      	ldr	r1, [r7, #16]
 800ed2a:	f7fa fccd 	bl	80096c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ed2e:	6a3b      	ldr	r3, [r7, #32]
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7f8 ff03 	bl	8007b40 <lwip_htonl>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	da02      	bge.n	800ed52 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3304      	adds	r3, #4
 800ed56:	4618      	mov	r0, r3
 800ed58:	f001 fd70 	bl	801083c <ip4_route>
 800ed5c:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d103      	bne.n	800ed6c <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800ed64:	23fc      	movs	r3, #252	; 0xfc
 800ed66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed6a:	e011      	b.n	800ed90 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	1d1a      	adds	r2, r3, #4
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	7a98      	ldrb	r0, [r3, #10]
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	9302      	str	r3, [sp, #8]
 800ed7a:	2306      	movs	r3, #6
 800ed7c:	9301      	str	r3, [sp, #4]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	4603      	mov	r3, r0
 800ed84:	69b8      	ldr	r0, [r7, #24]
 800ed86:	f001 ff03 	bl	8010b90 <ip4_output_if>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800ed90:	69b8      	ldr	r0, [r7, #24]
 800ed92:	f7fa fa9b 	bl	80092cc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ed96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	372c      	adds	r7, #44	; 0x2c
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd90      	pop	{r4, r7, pc}
	...

0800eda4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800edac:	f7fa fe4e 	bl	8009a4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <tcpip_tcp_timer+0x38>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d103      	bne.n	800edc0 <tcpip_tcp_timer+0x1c>
 800edb8:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <tcpip_tcp_timer+0x3c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800edc0:	2200      	movs	r2, #0
 800edc2:	4908      	ldr	r1, [pc, #32]	; (800ede4 <tcpip_tcp_timer+0x40>)
 800edc4:	20fa      	movs	r0, #250	; 0xfa
 800edc6:	f000 f86f 	bl	800eea8 <sys_timeout>
 800edca:	e003      	b.n	800edd4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800edcc:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <tcpip_tcp_timer+0x44>)
 800edce:	2200      	movs	r2, #0
 800edd0:	601a      	str	r2, [r3, #0]
  }
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20008dc4 	.word	0x20008dc4
 800ede0:	20008dc8 	.word	0x20008dc8
 800ede4:	0800eda5 	.word	0x0800eda5
 800ede8:	20008e10 	.word	0x20008e10

0800edec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800edf0:	4b0a      	ldr	r3, [pc, #40]	; (800ee1c <tcp_timer_needed+0x30>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10f      	bne.n	800ee18 <tcp_timer_needed+0x2c>
 800edf8:	4b09      	ldr	r3, [pc, #36]	; (800ee20 <tcp_timer_needed+0x34>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d103      	bne.n	800ee08 <tcp_timer_needed+0x1c>
 800ee00:	4b08      	ldr	r3, [pc, #32]	; (800ee24 <tcp_timer_needed+0x38>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d007      	beq.n	800ee18 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ee08:	4b04      	ldr	r3, [pc, #16]	; (800ee1c <tcp_timer_needed+0x30>)
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ee0e:	2200      	movs	r2, #0
 800ee10:	4905      	ldr	r1, [pc, #20]	; (800ee28 <tcp_timer_needed+0x3c>)
 800ee12:	20fa      	movs	r0, #250	; 0xfa
 800ee14:	f000 f848 	bl	800eea8 <sys_timeout>
  }
}
 800ee18:	bf00      	nop
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20008e10 	.word	0x20008e10
 800ee20:	20008dc4 	.word	0x20008dc4
 800ee24:	20008dc8 	.word	0x20008dc8
 800ee28:	0800eda5 	.word	0x0800eda5

0800ee2c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	4903      	ldr	r1, [pc, #12]	; (800ee54 <cyclic_timer+0x28>)
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 f82e 	bl	800eea8 <sys_timeout>
}
 800ee4c:	bf00      	nop
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	0800ee2d 	.word	0x0800ee2d

0800ee58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee5e:	2301      	movs	r3, #1
 800ee60:	607b      	str	r3, [r7, #4]
 800ee62:	e00e      	b.n	800ee82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ee64:	4a0d      	ldr	r2, [pc, #52]	; (800ee9c <sys_timeouts_init+0x44>)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	00db      	lsls	r3, r3, #3
 800ee70:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <sys_timeouts_init+0x44>)
 800ee72:	4413      	add	r3, r2
 800ee74:	461a      	mov	r2, r3
 800ee76:	490a      	ldr	r1, [pc, #40]	; (800eea0 <sys_timeouts_init+0x48>)
 800ee78:	f000 f816 	bl	800eea8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	607b      	str	r3, [r7, #4]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b03      	cmp	r3, #3
 800ee86:	d9ed      	bls.n	800ee64 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800ee88:	f7f8 fdc0 	bl	8007a0c <sys_now>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	4a05      	ldr	r2, [pc, #20]	; (800eea4 <sys_timeouts_init+0x4c>)
 800ee90:	6013      	str	r3, [r2, #0]
}
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	080166a0 	.word	0x080166a0
 800eea0:	0800ee2d 	.word	0x0800ee2d
 800eea4:	20008e0c 	.word	0x20008e0c

0800eea8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eeb4:	2006      	movs	r0, #6
 800eeb6:	f7f9 fc7f 	bl	80087b8 <memp_malloc>
 800eeba:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10a      	bne.n	800eed8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f040 8084 	bne.w	800efd2 <sys_timeout+0x12a>
 800eeca:	4b44      	ldr	r3, [pc, #272]	; (800efdc <sys_timeout+0x134>)
 800eecc:	22d4      	movs	r2, #212	; 0xd4
 800eece:	4944      	ldr	r1, [pc, #272]	; (800efe0 <sys_timeout+0x138>)
 800eed0:	4844      	ldr	r0, [pc, #272]	; (800efe4 <sys_timeout+0x13c>)
 800eed2:	f004 fcf5 	bl	80138c0 <iprintf>
    return;
 800eed6:	e07c      	b.n	800efd2 <sys_timeout+0x12a>
  }

  now = sys_now();
 800eed8:	f7f8 fd98 	bl	8007a0c <sys_now>
 800eedc:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800eede:	4b42      	ldr	r3, [pc, #264]	; (800efe8 <sys_timeout+0x140>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d105      	bne.n	800eef2 <sys_timeout+0x4a>
    diff = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800eeea:	4a40      	ldr	r2, [pc, #256]	; (800efec <sys_timeout+0x144>)
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	6013      	str	r3, [r2, #0]
 800eef0:	e004      	b.n	800eefc <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800eef2:	4b3e      	ldr	r3, [pc, #248]	; (800efec <sys_timeout+0x144>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2200      	movs	r2, #0
 800ef00:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	441a      	add	r2, r3
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ef18:	4b33      	ldr	r3, [pc, #204]	; (800efe8 <sys_timeout+0x140>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d103      	bne.n	800ef28 <sys_timeout+0x80>
    next_timeout = timeout;
 800ef20:	4a31      	ldr	r2, [pc, #196]	; (800efe8 <sys_timeout+0x140>)
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	6013      	str	r3, [r2, #0]
    return;
 800ef26:	e055      	b.n	800efd4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800ef28:	4b2f      	ldr	r3, [pc, #188]	; (800efe8 <sys_timeout+0x140>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d20f      	bcs.n	800ef54 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800ef34:	4b2c      	ldr	r3, [pc, #176]	; (800efe8 <sys_timeout+0x140>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	6859      	ldr	r1, [r3, #4]
 800ef3a:	4b2b      	ldr	r3, [pc, #172]	; (800efe8 <sys_timeout+0x140>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	1a8a      	subs	r2, r1, r2
 800ef42:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800ef44:	4b28      	ldr	r3, [pc, #160]	; (800efe8 <sys_timeout+0x140>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ef4c:	4a26      	ldr	r2, [pc, #152]	; (800efe8 <sys_timeout+0x140>)
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	6013      	str	r3, [r2, #0]
 800ef52:	e03f      	b.n	800efd4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef54:	4b24      	ldr	r3, [pc, #144]	; (800efe8 <sys_timeout+0x140>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	61fb      	str	r3, [r7, #28]
 800ef5a:	e036      	b.n	800efca <sys_timeout+0x122>
      timeout->time -= t->time;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	1ad2      	subs	r2, r2, r3
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <sys_timeout+0xd8>
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d921      	bls.n	800efc4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d009      	beq.n	800ef9c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6859      	ldr	r1, [r3, #4]
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	685a      	ldr	r2, [r3, #4]
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	1a8a      	subs	r2, r1, r2
 800ef98:	605a      	str	r2, [r3, #4]
 800ef9a:	e00b      	b.n	800efb4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d206      	bcs.n	800efb4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800efa6:	4b10      	ldr	r3, [pc, #64]	; (800efe8 <sys_timeout+0x140>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	441a      	add	r2, r3
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	697a      	ldr	r2, [r7, #20]
 800efc0:	601a      	str	r2, [r3, #0]
        break;
 800efc2:	e007      	b.n	800efd4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	61fb      	str	r3, [r7, #28]
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1c5      	bne.n	800ef5c <sys_timeout+0xb4>
 800efd0:	e000      	b.n	800efd4 <sys_timeout+0x12c>
    return;
 800efd2:	bf00      	nop
      }
    }
  }
}
 800efd4:	3720      	adds	r7, #32
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	08015ddc 	.word	0x08015ddc
 800efe0:	08015e10 	.word	0x08015e10
 800efe4:	08015e50 	.word	0x08015e50
 800efe8:	20008e08 	.word	0x20008e08
 800efec:	20008e0c 	.word	0x20008e0c

0800eff0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800eff6:	4b24      	ldr	r3, [pc, #144]	; (800f088 <sys_check_timeouts+0x98>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d040      	beq.n	800f080 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800effe:	f7f8 fd05 	bl	8007a0c <sys_now>
 800f002:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800f004:	4b21      	ldr	r3, [pc, #132]	; (800f08c <sys_check_timeouts+0x9c>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800f00e:	4b20      	ldr	r3, [pc, #128]	; (800f090 <sys_check_timeouts+0xa0>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <sys_check_timeouts+0x2c>
 800f018:	f7f9 fdb0 	bl	8008b7c <pbuf_free_ooseq>
      had_one = 0;
 800f01c:	2300      	movs	r3, #0
 800f01e:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800f020:	4b19      	ldr	r3, [pc, #100]	; (800f088 <sys_check_timeouts+0x98>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d026      	beq.n	800f07a <sys_check_timeouts+0x8a>
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	429a      	cmp	r2, r3
 800f034:	d321      	bcc.n	800f07a <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800f036:	2301      	movs	r3, #1
 800f038:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	685a      	ldr	r2, [r3, #4]
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <sys_check_timeouts+0x9c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4413      	add	r3, r2
 800f044:	4a11      	ldr	r2, [pc, #68]	; (800f08c <sys_check_timeouts+0x9c>)
 800f046:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4a0c      	ldr	r2, [pc, #48]	; (800f088 <sys_check_timeouts+0x98>)
 800f058:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f066:	68b9      	ldr	r1, [r7, #8]
 800f068:	2006      	movs	r0, #6
 800f06a:	f7f9 fbf1 	bl	8008850 <memp_free>
        if (handler != NULL) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6838      	ldr	r0, [r7, #0]
 800f078:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800f07a:	7cfb      	ldrb	r3, [r7, #19]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1c6      	bne.n	800f00e <sys_check_timeouts+0x1e>
  }
}
 800f080:	bf00      	nop
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	20008e08 	.word	0x20008e08
 800f08c:	20008e0c 	.word	0x20008e0c
 800f090:	20008db5 	.word	0x20008db5

0800f094 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f094:	b480      	push	{r7}
 800f096:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800f098:	bf00      	nop
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bc80      	pop	{r7}
 800f09e:	4770      	bx	lr

0800f0a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f0aa:	4b17      	ldr	r3, [pc, #92]	; (800f108 <udp_new_port+0x68>)
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	b291      	uxth	r1, r2
 800f0b2:	4a15      	ldr	r2, [pc, #84]	; (800f108 <udp_new_port+0x68>)
 800f0b4:	8011      	strh	r1, [r2, #0]
 800f0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d103      	bne.n	800f0c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f0be:	4b12      	ldr	r3, [pc, #72]	; (800f108 <udp_new_port+0x68>)
 800f0c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f0c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0c6:	4b11      	ldr	r3, [pc, #68]	; (800f10c <udp_new_port+0x6c>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	603b      	str	r3, [r7, #0]
 800f0cc:	e011      	b.n	800f0f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	8a5a      	ldrh	r2, [r3, #18]
 800f0d2:	4b0d      	ldr	r3, [pc, #52]	; (800f108 <udp_new_port+0x68>)
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d108      	bne.n	800f0ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	80fb      	strh	r3, [r7, #6]
 800f0e0:	88fb      	ldrh	r3, [r7, #6]
 800f0e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f0e6:	d3e0      	bcc.n	800f0aa <udp_new_port+0xa>
        return 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	e007      	b.n	800f0fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	603b      	str	r3, [r7, #0]
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1ea      	bne.n	800f0ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f0f8:	4b03      	ldr	r3, [pc, #12]	; (800f108 <udp_new_port+0x68>)
 800f0fa:	881b      	ldrh	r3, [r3, #0]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	bc80      	pop	{r7}
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	20000024 	.word	0x20000024
 800f10c:	20008e14 	.word	0x20008e14

0800f110 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	4613      	mov	r3, r2
 800f11c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d018      	beq.n	800f156 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d013      	beq.n	800f152 <udp_input_local_match+0x42>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00f      	beq.n	800f152 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f132:	4b13      	ldr	r3, [pc, #76]	; (800f180 <udp_input_local_match+0x70>)
 800f134:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f13a:	d00a      	beq.n	800f152 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	4b0f      	ldr	r3, [pc, #60]	; (800f180 <udp_input_local_match+0x70>)
 800f142:	695b      	ldr	r3, [r3, #20]
 800f144:	405a      	eors	r2, r3
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	3308      	adds	r3, #8
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d110      	bne.n	800f174 <udp_input_local_match+0x64>
          return 1;
 800f152:	2301      	movs	r3, #1
 800f154:	e00f      	b.n	800f176 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d009      	beq.n	800f170 <udp_input_local_match+0x60>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d005      	beq.n	800f170 <udp_input_local_match+0x60>
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	4b05      	ldr	r3, [pc, #20]	; (800f180 <udp_input_local_match+0x70>)
 800f16a:	695b      	ldr	r3, [r3, #20]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d101      	bne.n	800f174 <udp_input_local_match+0x64>
      return 1;
 800f170:	2301      	movs	r3, #1
 800f172:	e000      	b.n	800f176 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800f174:	2300      	movs	r3, #0
}
 800f176:	4618      	mov	r0, r3
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bc80      	pop	{r7}
 800f17e:	4770      	bx	lr
 800f180:	200057cc 	.word	0x200057cc

0800f184 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f184:	b590      	push	{r4, r7, lr}
 800f186:	b08d      	sub	sp, #52	; 0x34
 800f188:	af02      	add	r7, sp, #8
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f18e:	2300      	movs	r3, #0
 800f190:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	895b      	ldrh	r3, [r3, #10]
 800f196:	2b07      	cmp	r3, #7
 800f198:	d803      	bhi.n	800f1a2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7fa f896 	bl	80092cc <pbuf_free>
    goto end;
 800f1a0:	e0c6      	b.n	800f330 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f1a8:	4b63      	ldr	r3, [pc, #396]	; (800f338 <udp_input+0x1b4>)
 800f1aa:	695b      	ldr	r3, [r3, #20]
 800f1ac:	4a62      	ldr	r2, [pc, #392]	; (800f338 <udp_input+0x1b4>)
 800f1ae:	6812      	ldr	r2, [r2, #0]
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f001 fdbe 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f8 fcaf 	bl	8007b26 <lwip_htons>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	885b      	ldrh	r3, [r3, #2]
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f8 fca7 	bl	8007b26 <lwip_htons>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1e8:	4b54      	ldr	r3, [pc, #336]	; (800f33c <udp_input+0x1b8>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ee:	e03b      	b.n	800f268 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	8a5b      	ldrh	r3, [r3, #18]
 800f1f4:	89fa      	ldrh	r2, [r7, #14]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d131      	bne.n	800f25e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f1fa:	7cfb      	ldrb	r3, [r7, #19]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f202:	f7ff ff85 	bl	800f110 <udp_input_local_match>
 800f206:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d028      	beq.n	800f25e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	7c1b      	ldrb	r3, [r3, #16]
 800f210:	f003 0304 	and.w	r3, r3, #4
 800f214:	2b00      	cmp	r3, #0
 800f216:	d104      	bne.n	800f222 <udp_input+0x9e>
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d101      	bne.n	800f222 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800f21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f220:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	8a9b      	ldrh	r3, [r3, #20]
 800f226:	8a3a      	ldrh	r2, [r7, #16]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d118      	bne.n	800f25e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f230:	2b00      	cmp	r3, #0
 800f232:	d005      	beq.n	800f240 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	685a      	ldr	r2, [r3, #4]
 800f238:	4b3f      	ldr	r3, [pc, #252]	; (800f338 <udp_input+0x1b4>)
 800f23a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d10e      	bne.n	800f25e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d014      	beq.n	800f270 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f248:	68da      	ldr	r2, [r3, #12]
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f24e:	4b3b      	ldr	r3, [pc, #236]	; (800f33c <udp_input+0x1b8>)
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f256:	4a39      	ldr	r2, [pc, #228]	; (800f33c <udp_input+0x1b8>)
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f25c:	e008      	b.n	800f270 <udp_input+0xec>
      }
    }

    prev = pcb;
 800f25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f260:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	627b      	str	r3, [r7, #36]	; 0x24
 800f268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1c0      	bne.n	800f1f0 <udp_input+0x6c>
 800f26e:	e000      	b.n	800f272 <udp_input+0xee>
        break;
 800f270:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <udp_input+0xf8>
    pcb = uncon_pcb;
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <udp_input+0x104>
    for_us = 1;
 800f282:	2301      	movs	r3, #1
 800f284:	76fb      	strb	r3, [r7, #27]
 800f286:	e00a      	b.n	800f29e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	3304      	adds	r3, #4
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	4b2a      	ldr	r3, [pc, #168]	; (800f338 <udp_input+0x1b4>)
 800f290:	695b      	ldr	r3, [r3, #20]
 800f292:	429a      	cmp	r2, r3
 800f294:	bf0c      	ite	eq
 800f296:	2301      	moveq	r3, #1
 800f298:	2300      	movne	r3, #0
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f29e:	7efb      	ldrb	r3, [r7, #27]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d042      	beq.n	800f32a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800f2a4:	f06f 0107 	mvn.w	r1, #7
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7f9 ffeb 	bl	8009284 <pbuf_header>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00a      	beq.n	800f2ca <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800f2b4:	4b22      	ldr	r3, [pc, #136]	; (800f340 <udp_input+0x1bc>)
 800f2b6:	f240 1255 	movw	r2, #341	; 0x155
 800f2ba:	4922      	ldr	r1, [pc, #136]	; (800f344 <udp_input+0x1c0>)
 800f2bc:	4822      	ldr	r0, [pc, #136]	; (800f348 <udp_input+0x1c4>)
 800f2be:	f004 faff 	bl	80138c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7fa f802 	bl	80092cc <pbuf_free>
      goto end;
 800f2c8:	e032      	b.n	800f330 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d012      	beq.n	800f2f6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00a      	beq.n	800f2ee <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	699c      	ldr	r4, [r3, #24]
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	69d8      	ldr	r0, [r3, #28]
 800f2e0:	8a3b      	ldrh	r3, [r7, #16]
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	4b19      	ldr	r3, [pc, #100]	; (800f34c <udp_input+0x1c8>)
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f2ec:	e021      	b.n	800f332 <udp_input+0x1ae>
        pbuf_free(p);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7f9 ffec 	bl	80092cc <pbuf_free>
        goto end;
 800f2f4:	e01c      	b.n	800f330 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2f6:	7cfb      	ldrb	r3, [r7, #19]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d112      	bne.n	800f322 <udp_input+0x19e>
 800f2fc:	4b0e      	ldr	r3, [pc, #56]	; (800f338 <udp_input+0x1b4>)
 800f2fe:	695b      	ldr	r3, [r3, #20]
 800f300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f304:	2be0      	cmp	r3, #224	; 0xe0
 800f306:	d00c      	beq.n	800f322 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f308:	4b0b      	ldr	r3, [pc, #44]	; (800f338 <udp_input+0x1b4>)
 800f30a:	899b      	ldrh	r3, [r3, #12]
 800f30c:	3308      	adds	r3, #8
 800f30e:	b29b      	uxth	r3, r3
 800f310:	b21b      	sxth	r3, r3
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7f9 ffc7 	bl	80092a8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f31a:	2103      	movs	r1, #3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f001 fa05 	bl	801072c <icmp_dest_unreach>
      pbuf_free(p);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7f9 ffd2 	bl	80092cc <pbuf_free>
  return;
 800f328:	e003      	b.n	800f332 <udp_input+0x1ae>
    pbuf_free(p);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7f9 ffce 	bl	80092cc <pbuf_free>
  return;
 800f330:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f332:	372c      	adds	r7, #44	; 0x2c
 800f334:	46bd      	mov	sp, r7
 800f336:	bd90      	pop	{r4, r7, pc}
 800f338:	200057cc 	.word	0x200057cc
 800f33c:	20008e14 	.word	0x20008e14
 800f340:	08015e78 	.word	0x08015e78
 800f344:	08015ea8 	.word	0x08015ea8
 800f348:	08015ebc 	.word	0x08015ebc
 800f34c:	200057dc 	.word	0x200057dc

0800f350 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b088      	sub	sp, #32
 800f354:	af02      	add	r7, sp, #8
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <udp_sendto+0x1e>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d102      	bne.n	800f374 <udp_sendto+0x24>
    return ERR_VAL;
 800f36e:	f06f 0305 	mvn.w	r3, #5
 800f372:	e013      	b.n	800f39c <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800f374:	6978      	ldr	r0, [r7, #20]
 800f376:	f001 fa61 	bl	801083c <ip4_route>
 800f37a:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d102      	bne.n	800f388 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f382:	f06f 0303 	mvn.w	r3, #3
 800f386:	e009      	b.n	800f39c <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f388:	887a      	ldrh	r2, [r7, #2]
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	4613      	mov	r3, r2
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 f805 	bl	800f3a4 <udp_sendto_if>
 800f39a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b088      	sub	sp, #32
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
 800f3b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d002      	beq.n	800f3be <udp_sendto_if+0x1a>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d102      	bne.n	800f3c4 <udp_sendto_if+0x20>
    return ERR_VAL;
 800f3be:	f06f 0305 	mvn.w	r3, #5
 800f3c2:	e028      	b.n	800f416 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d009      	beq.n	800f3de <udp_sendto_if+0x3a>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d005      	beq.n	800f3de <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3da:	2be0      	cmp	r3, #224	; 0xe0
 800f3dc:	d103      	bne.n	800f3e6 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800f3de:	6a3b      	ldr	r3, [r7, #32]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	e00b      	b.n	800f3fe <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d002      	beq.n	800f3fa <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800f3f4:	f06f 0303 	mvn.w	r3, #3
 800f3f8:	e00d      	b.n	800f416 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f3fe:	887a      	ldrh	r2, [r7, #2]
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	9301      	str	r3, [sp, #4]
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	4613      	mov	r3, r2
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	68b9      	ldr	r1, [r7, #8]
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f000 f806 	bl	800f420 <udp_sendto_if_src>
 800f414:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f416:	4618      	mov	r0, r3
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
	...

0800f420 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08c      	sub	sp, #48	; 0x30
 800f424:	af04      	add	r7, sp, #16
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
 800f42c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <udp_sendto_if_src+0x1a>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d102      	bne.n	800f440 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800f43a:	f06f 0305 	mvn.w	r3, #5
 800f43e:	e07e      	b.n	800f53e <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	8a5b      	ldrh	r3, [r3, #18]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d10f      	bne.n	800f468 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f448:	68f9      	ldr	r1, [r7, #12]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	8a5b      	ldrh	r3, [r3, #18]
 800f44e:	461a      	mov	r2, r3
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f000 f87f 	bl	800f554 <udp_bind>
 800f456:	4603      	mov	r3, r0
 800f458:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f45a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d002      	beq.n	800f468 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f462:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f466:	e06a      	b.n	800f53e <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800f468:	2108      	movs	r1, #8
 800f46a:	68b8      	ldr	r0, [r7, #8]
 800f46c:	f7f9 ff0a 	bl	8009284 <pbuf_header>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d014      	beq.n	800f4a0 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f476:	2200      	movs	r2, #0
 800f478:	2108      	movs	r1, #8
 800f47a:	2001      	movs	r0, #1
 800f47c:	f7f9 fbae 	bl	8008bdc <pbuf_alloc>
 800f480:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d102      	bne.n	800f48e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f488:	f04f 33ff 	mov.w	r3, #4294967295
 800f48c:	e057      	b.n	800f53e <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	891b      	ldrh	r3, [r3, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d006      	beq.n	800f4a4 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	69f8      	ldr	r0, [r7, #28]
 800f49a:	f7fa f839 	bl	8009510 <pbuf_chain>
 800f49e:	e001      	b.n	800f4a4 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	895b      	ldrh	r3, [r3, #10]
 800f4a8:	2b07      	cmp	r3, #7
 800f4aa:	d806      	bhi.n	800f4ba <udp_sendto_if_src+0x9a>
 800f4ac:	4b26      	ldr	r3, [pc, #152]	; (800f548 <udp_sendto_if_src+0x128>)
 800f4ae:	f240 22db 	movw	r2, #731	; 0x2db
 800f4b2:	4926      	ldr	r1, [pc, #152]	; (800f54c <udp_sendto_if_src+0x12c>)
 800f4b4:	4826      	ldr	r0, [pc, #152]	; (800f550 <udp_sendto_if_src+0x130>)
 800f4b6:	f004 fa03 	bl	80138c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	8a5b      	ldrh	r3, [r3, #18]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7f8 fb2e 	bl	8007b26 <lwip_htons>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f4d2:	887b      	ldrh	r3, [r7, #2]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7f8 fb26 	bl	8007b26 <lwip_htons>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	461a      	mov	r2, r3
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	719a      	strb	r2, [r3, #6]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	891b      	ldrh	r3, [r3, #8]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7f8 fb18 	bl	8007b26 <lwip_htons>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f4fe:	2311      	movs	r3, #17
 800f500:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	7a9b      	ldrb	r3, [r3, #10]
 800f506:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	7a5b      	ldrb	r3, [r3, #9]
 800f50c:	7cb9      	ldrb	r1, [r7, #18]
 800f50e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f510:	9202      	str	r2, [sp, #8]
 800f512:	7cfa      	ldrb	r2, [r7, #19]
 800f514:	9201      	str	r2, [sp, #4]
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	460b      	mov	r3, r1
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f51e:	69f8      	ldr	r0, [r7, #28]
 800f520:	f001 fb60 	bl	8010be4 <ip4_output_if_src>
 800f524:	4603      	mov	r3, r0
 800f526:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f528:	69fa      	ldr	r2, [r7, #28]
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d004      	beq.n	800f53a <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800f530:	69f8      	ldr	r0, [r7, #28]
 800f532:	f7f9 fecb 	bl	80092cc <pbuf_free>
    q = NULL;
 800f536:	2300      	movs	r3, #0
 800f538:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f53a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3720      	adds	r7, #32
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	08015e78 	.word	0x08015e78
 800f54c:	08015ee4 	.word	0x08015ee4
 800f550:	08015ebc 	.word	0x08015ebc

0800f554 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b086      	sub	sp, #24
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	4613      	mov	r3, r2
 800f560:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d101      	bne.n	800f56c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f568:	4b30      	ldr	r3, [pc, #192]	; (800f62c <udp_bind+0xd8>)
 800f56a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d002      	beq.n	800f578 <udp_bind+0x24>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <udp_bind+0x2a>
    return ERR_VAL;
 800f578:	f06f 0305 	mvn.w	r3, #5
 800f57c:	e052      	b.n	800f624 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f582:	4b2b      	ldr	r3, [pc, #172]	; (800f630 <udp_bind+0xdc>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	617b      	str	r3, [r7, #20]
 800f588:	e009      	b.n	800f59e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d102      	bne.n	800f598 <udp_bind+0x44>
      rebind = 1;
 800f592:	2301      	movs	r3, #1
 800f594:	74fb      	strb	r3, [r7, #19]
      break;
 800f596:	e005      	b.n	800f5a4 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	68db      	ldr	r3, [r3, #12]
 800f59c:	617b      	str	r3, [r7, #20]
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1f2      	bne.n	800f58a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800f5a4:	88fb      	ldrh	r3, [r7, #6]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d109      	bne.n	800f5be <udp_bind+0x6a>
    port = udp_new_port();
 800f5aa:	f7ff fd79 	bl	800f0a0 <udp_new_port>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f5b2:	88fb      	ldrh	r3, [r7, #6]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d11e      	bne.n	800f5f6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f5b8:	f06f 0307 	mvn.w	r3, #7
 800f5bc:	e032      	b.n	800f624 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f5be:	4b1c      	ldr	r3, [pc, #112]	; (800f630 <udp_bind+0xdc>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	617b      	str	r3, [r7, #20]
 800f5c4:	e014      	b.n	800f5f0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d00d      	beq.n	800f5ea <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	8a5b      	ldrh	r3, [r3, #18]
 800f5d2:	88fa      	ldrh	r2, [r7, #6]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d108      	bne.n	800f5ea <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d102      	bne.n	800f5ea <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f5e4:	f06f 0307 	mvn.w	r3, #7
 800f5e8:	e01c      	b.n	800f624 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1e7      	bne.n	800f5c6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d002      	beq.n	800f602 <udp_bind+0xae>
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	e000      	b.n	800f604 <udp_bind+0xb0>
 800f602:	2300      	movs	r3, #0
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	88fa      	ldrh	r2, [r7, #6]
 800f60c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f60e:	7cfb      	ldrb	r3, [r7, #19]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d106      	bne.n	800f622 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f614:	4b06      	ldr	r3, [pc, #24]	; (800f630 <udp_bind+0xdc>)
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f61c:	4a04      	ldr	r2, [pc, #16]	; (800f630 <udp_bind+0xdc>)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	080166c0 	.word	0x080166c0
 800f630:	20008e14 	.word	0x20008e14

0800f634 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f63c:	4b15      	ldr	r3, [pc, #84]	; (800f694 <udp_remove+0x60>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	429a      	cmp	r2, r3
 800f644:	d105      	bne.n	800f652 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f646:	4b13      	ldr	r3, [pc, #76]	; (800f694 <udp_remove+0x60>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	4a11      	ldr	r2, [pc, #68]	; (800f694 <udp_remove+0x60>)
 800f64e:	6013      	str	r3, [r2, #0]
 800f650:	e017      	b.n	800f682 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f652:	4b10      	ldr	r3, [pc, #64]	; (800f694 <udp_remove+0x60>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	e010      	b.n	800f67c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d009      	beq.n	800f676 <udp_remove+0x42>
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d104      	bne.n	800f676 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68da      	ldr	r2, [r3, #12]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	60da      	str	r2, [r3, #12]
        break;
 800f674:	e005      	b.n	800f682 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	60fb      	str	r3, [r7, #12]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1eb      	bne.n	800f65a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f682:	6879      	ldr	r1, [r7, #4]
 800f684:	2000      	movs	r0, #0
 800f686:	f7f9 f8e3 	bl	8008850 <memp_free>
}
 800f68a:	bf00      	nop
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	20008e14 	.word	0x20008e14

0800f698 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d01e      	beq.n	800f6e6 <udp_netif_ip_addr_changed+0x4e>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d01a      	beq.n	800f6e6 <udp_netif_ip_addr_changed+0x4e>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d017      	beq.n	800f6e6 <udp_netif_ip_addr_changed+0x4e>
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d013      	beq.n	800f6e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6be:	4b0c      	ldr	r3, [pc, #48]	; (800f6f0 <udp_netif_ip_addr_changed+0x58>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e00c      	b.n	800f6e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d103      	bne.n	800f6da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1ef      	bne.n	800f6c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f6e6:	bf00      	nop
 800f6e8:	3714      	adds	r7, #20
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bc80      	pop	{r7}
 800f6ee:	4770      	bx	lr
 800f6f0:	20008e14 	.word	0x20008e14

0800f6f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f6fc:	4915      	ldr	r1, [pc, #84]	; (800f754 <etharp_free_entry+0x60>)
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	4613      	mov	r3, r2
 800f702:	005b      	lsls	r3, r3, #1
 800f704:	4413      	add	r3, r2
 800f706:	00db      	lsls	r3, r3, #3
 800f708:	440b      	add	r3, r1
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d013      	beq.n	800f738 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f710:	4910      	ldr	r1, [pc, #64]	; (800f754 <etharp_free_entry+0x60>)
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	4613      	mov	r3, r2
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	4413      	add	r3, r2
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	440b      	add	r3, r1
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4618      	mov	r0, r3
 800f722:	f7f9 fdd3 	bl	80092cc <pbuf_free>
    arp_table[i].q = NULL;
 800f726:	490b      	ldr	r1, [pc, #44]	; (800f754 <etharp_free_entry+0x60>)
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	4613      	mov	r3, r2
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	4413      	add	r3, r2
 800f730:	00db      	lsls	r3, r3, #3
 800f732:	440b      	add	r3, r1
 800f734:	2200      	movs	r2, #0
 800f736:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f738:	4906      	ldr	r1, [pc, #24]	; (800f754 <etharp_free_entry+0x60>)
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	4613      	mov	r3, r2
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	4413      	add	r3, r2
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	440b      	add	r3, r1
 800f746:	3314      	adds	r3, #20
 800f748:	2200      	movs	r2, #0
 800f74a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f74c:	bf00      	nop
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	20008e18 	.word	0x20008e18

0800f758 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f75e:	2300      	movs	r3, #0
 800f760:	71fb      	strb	r3, [r7, #7]
 800f762:	e096      	b.n	800f892 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f764:	79fa      	ldrb	r2, [r7, #7]
 800f766:	494f      	ldr	r1, [pc, #316]	; (800f8a4 <etharp_tmr+0x14c>)
 800f768:	4613      	mov	r3, r2
 800f76a:	005b      	lsls	r3, r3, #1
 800f76c:	4413      	add	r3, r2
 800f76e:	00db      	lsls	r3, r3, #3
 800f770:	440b      	add	r3, r1
 800f772:	3314      	adds	r3, #20
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800f778:	79bb      	ldrb	r3, [r7, #6]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 8086 	beq.w	800f88c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800f780:	79fa      	ldrb	r2, [r7, #7]
 800f782:	4948      	ldr	r1, [pc, #288]	; (800f8a4 <etharp_tmr+0x14c>)
 800f784:	4613      	mov	r3, r2
 800f786:	005b      	lsls	r3, r3, #1
 800f788:	4413      	add	r3, r2
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	440b      	add	r3, r1
 800f78e:	3312      	adds	r3, #18
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	b298      	uxth	r0, r3
 800f796:	4943      	ldr	r1, [pc, #268]	; (800f8a4 <etharp_tmr+0x14c>)
 800f798:	4613      	mov	r3, r2
 800f79a:	005b      	lsls	r3, r3, #1
 800f79c:	4413      	add	r3, r2
 800f79e:	00db      	lsls	r3, r3, #3
 800f7a0:	440b      	add	r3, r1
 800f7a2:	3312      	adds	r3, #18
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f7a8:	79fa      	ldrb	r2, [r7, #7]
 800f7aa:	493e      	ldr	r1, [pc, #248]	; (800f8a4 <etharp_tmr+0x14c>)
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	440b      	add	r3, r1
 800f7b6:	3312      	adds	r3, #18
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f7be:	d215      	bcs.n	800f7ec <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f7c0:	79fa      	ldrb	r2, [r7, #7]
 800f7c2:	4938      	ldr	r1, [pc, #224]	; (800f8a4 <etharp_tmr+0x14c>)
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	4413      	add	r3, r2
 800f7ca:	00db      	lsls	r3, r3, #3
 800f7cc:	440b      	add	r3, r1
 800f7ce:	3314      	adds	r3, #20
 800f7d0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d10f      	bne.n	800f7f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f7d6:	79fa      	ldrb	r2, [r7, #7]
 800f7d8:	4932      	ldr	r1, [pc, #200]	; (800f8a4 <etharp_tmr+0x14c>)
 800f7da:	4613      	mov	r3, r2
 800f7dc:	005b      	lsls	r3, r3, #1
 800f7de:	4413      	add	r3, r2
 800f7e0:	00db      	lsls	r3, r3, #3
 800f7e2:	440b      	add	r3, r1
 800f7e4:	3312      	adds	r3, #18
 800f7e6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f7e8:	2b04      	cmp	r3, #4
 800f7ea:	d904      	bls.n	800f7f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f7ec:	79fb      	ldrb	r3, [r7, #7]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7ff ff80 	bl	800f6f4 <etharp_free_entry>
 800f7f4:	e04a      	b.n	800f88c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f7f6:	79fa      	ldrb	r2, [r7, #7]
 800f7f8:	492a      	ldr	r1, [pc, #168]	; (800f8a4 <etharp_tmr+0x14c>)
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	4413      	add	r3, r2
 800f800:	00db      	lsls	r3, r3, #3
 800f802:	440b      	add	r3, r1
 800f804:	3314      	adds	r3, #20
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2b03      	cmp	r3, #3
 800f80a:	d10a      	bne.n	800f822 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f80c:	79fa      	ldrb	r2, [r7, #7]
 800f80e:	4925      	ldr	r1, [pc, #148]	; (800f8a4 <etharp_tmr+0x14c>)
 800f810:	4613      	mov	r3, r2
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	4413      	add	r3, r2
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	440b      	add	r3, r1
 800f81a:	3314      	adds	r3, #20
 800f81c:	2204      	movs	r2, #4
 800f81e:	701a      	strb	r2, [r3, #0]
 800f820:	e034      	b.n	800f88c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f822:	79fa      	ldrb	r2, [r7, #7]
 800f824:	491f      	ldr	r1, [pc, #124]	; (800f8a4 <etharp_tmr+0x14c>)
 800f826:	4613      	mov	r3, r2
 800f828:	005b      	lsls	r3, r3, #1
 800f82a:	4413      	add	r3, r2
 800f82c:	00db      	lsls	r3, r3, #3
 800f82e:	440b      	add	r3, r1
 800f830:	3314      	adds	r3, #20
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	2b04      	cmp	r3, #4
 800f836:	d10a      	bne.n	800f84e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f838:	79fa      	ldrb	r2, [r7, #7]
 800f83a:	491a      	ldr	r1, [pc, #104]	; (800f8a4 <etharp_tmr+0x14c>)
 800f83c:	4613      	mov	r3, r2
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	4413      	add	r3, r2
 800f842:	00db      	lsls	r3, r3, #3
 800f844:	440b      	add	r3, r1
 800f846:	3314      	adds	r3, #20
 800f848:	2202      	movs	r2, #2
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	e01e      	b.n	800f88c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f84e:	79fa      	ldrb	r2, [r7, #7]
 800f850:	4914      	ldr	r1, [pc, #80]	; (800f8a4 <etharp_tmr+0x14c>)
 800f852:	4613      	mov	r3, r2
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	4413      	add	r3, r2
 800f858:	00db      	lsls	r3, r3, #3
 800f85a:	440b      	add	r3, r1
 800f85c:	3314      	adds	r3, #20
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b01      	cmp	r3, #1
 800f862:	d113      	bne.n	800f88c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f864:	79fa      	ldrb	r2, [r7, #7]
 800f866:	490f      	ldr	r1, [pc, #60]	; (800f8a4 <etharp_tmr+0x14c>)
 800f868:	4613      	mov	r3, r2
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	4413      	add	r3, r2
 800f86e:	00db      	lsls	r3, r3, #3
 800f870:	440b      	add	r3, r1
 800f872:	3308      	adds	r3, #8
 800f874:	6818      	ldr	r0, [r3, #0]
 800f876:	79fa      	ldrb	r2, [r7, #7]
 800f878:	4613      	mov	r3, r2
 800f87a:	005b      	lsls	r3, r3, #1
 800f87c:	4413      	add	r3, r2
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	4a08      	ldr	r2, [pc, #32]	; (800f8a4 <etharp_tmr+0x14c>)
 800f882:	4413      	add	r3, r2
 800f884:	3304      	adds	r3, #4
 800f886:	4619      	mov	r1, r3
 800f888:	f000 fe38 	bl	80104fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	3301      	adds	r3, #1
 800f890:	71fb      	strb	r3, [r7, #7]
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	2b09      	cmp	r3, #9
 800f896:	f67f af65 	bls.w	800f764 <etharp_tmr+0xc>
      }
    }
  }
}
 800f89a:	bf00      	nop
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	20008e18 	.word	0x20008e18

0800f8a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b088      	sub	sp, #32
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	607a      	str	r2, [r7, #4]
 800f8b4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f8b6:	230a      	movs	r3, #10
 800f8b8:	77fb      	strb	r3, [r7, #31]
 800f8ba:	230a      	movs	r3, #10
 800f8bc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800f8be:	230a      	movs	r3, #10
 800f8c0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800f8c6:	230a      	movs	r3, #10
 800f8c8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	833b      	strh	r3, [r7, #24]
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	82fb      	strh	r3, [r7, #22]
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	773b      	strb	r3, [r7, #28]
 800f8da:	e093      	b.n	800fa04 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800f8dc:	7f3a      	ldrb	r2, [r7, #28]
 800f8de:	4990      	ldr	r1, [pc, #576]	; (800fb20 <etharp_find_entry+0x278>)
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	4413      	add	r3, r2
 800f8e6:	00db      	lsls	r3, r3, #3
 800f8e8:	440b      	add	r3, r1
 800f8ea:	3314      	adds	r3, #20
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f8f0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f8f4:	2b0a      	cmp	r3, #10
 800f8f6:	d105      	bne.n	800f904 <etharp_find_entry+0x5c>
 800f8f8:	7cfb      	ldrb	r3, [r7, #19]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d102      	bne.n	800f904 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800f8fe:	7f3b      	ldrb	r3, [r7, #28]
 800f900:	777b      	strb	r3, [r7, #29]
 800f902:	e07c      	b.n	800f9fe <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f904:	7cfb      	ldrb	r3, [r7, #19]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d079      	beq.n	800f9fe <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f90a:	7cfb      	ldrb	r3, [r7, #19]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d009      	beq.n	800f924 <etharp_find_entry+0x7c>
 800f910:	7cfb      	ldrb	r3, [r7, #19]
 800f912:	2b01      	cmp	r3, #1
 800f914:	d806      	bhi.n	800f924 <etharp_find_entry+0x7c>
 800f916:	4b83      	ldr	r3, [pc, #524]	; (800fb24 <etharp_find_entry+0x27c>)
 800f918:	f240 1225 	movw	r2, #293	; 0x125
 800f91c:	4982      	ldr	r1, [pc, #520]	; (800fb28 <etharp_find_entry+0x280>)
 800f91e:	4883      	ldr	r0, [pc, #524]	; (800fb2c <etharp_find_entry+0x284>)
 800f920:	f003 ffce 	bl	80138c0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00f      	beq.n	800f94a <etharp_find_entry+0xa2>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6819      	ldr	r1, [r3, #0]
 800f92e:	7f3a      	ldrb	r2, [r7, #28]
 800f930:	487b      	ldr	r0, [pc, #492]	; (800fb20 <etharp_find_entry+0x278>)
 800f932:	4613      	mov	r3, r2
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	4413      	add	r3, r2
 800f938:	00db      	lsls	r3, r3, #3
 800f93a:	4403      	add	r3, r0
 800f93c:	3304      	adds	r3, #4
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4299      	cmp	r1, r3
 800f942:	d102      	bne.n	800f94a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f944:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f948:	e0e5      	b.n	800fb16 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f94a:	7cfb      	ldrb	r3, [r7, #19]
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d13b      	bne.n	800f9c8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f950:	7f3a      	ldrb	r2, [r7, #28]
 800f952:	4973      	ldr	r1, [pc, #460]	; (800fb20 <etharp_find_entry+0x278>)
 800f954:	4613      	mov	r3, r2
 800f956:	005b      	lsls	r3, r3, #1
 800f958:	4413      	add	r3, r2
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	440b      	add	r3, r1
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d018      	beq.n	800f996 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800f964:	7f3a      	ldrb	r2, [r7, #28]
 800f966:	496e      	ldr	r1, [pc, #440]	; (800fb20 <etharp_find_entry+0x278>)
 800f968:	4613      	mov	r3, r2
 800f96a:	005b      	lsls	r3, r3, #1
 800f96c:	4413      	add	r3, r2
 800f96e:	00db      	lsls	r3, r3, #3
 800f970:	440b      	add	r3, r1
 800f972:	3312      	adds	r3, #18
 800f974:	881b      	ldrh	r3, [r3, #0]
 800f976:	8b3a      	ldrh	r2, [r7, #24]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d840      	bhi.n	800f9fe <etharp_find_entry+0x156>
            old_queue = i;
 800f97c:	7f3b      	ldrb	r3, [r7, #28]
 800f97e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800f980:	7f3a      	ldrb	r2, [r7, #28]
 800f982:	4967      	ldr	r1, [pc, #412]	; (800fb20 <etharp_find_entry+0x278>)
 800f984:	4613      	mov	r3, r2
 800f986:	005b      	lsls	r3, r3, #1
 800f988:	4413      	add	r3, r2
 800f98a:	00db      	lsls	r3, r3, #3
 800f98c:	440b      	add	r3, r1
 800f98e:	3312      	adds	r3, #18
 800f990:	881b      	ldrh	r3, [r3, #0]
 800f992:	833b      	strh	r3, [r7, #24]
 800f994:	e033      	b.n	800f9fe <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f996:	7f3a      	ldrb	r2, [r7, #28]
 800f998:	4961      	ldr	r1, [pc, #388]	; (800fb20 <etharp_find_entry+0x278>)
 800f99a:	4613      	mov	r3, r2
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	4413      	add	r3, r2
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	440b      	add	r3, r1
 800f9a4:	3312      	adds	r3, #18
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	8afa      	ldrh	r2, [r7, #22]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d827      	bhi.n	800f9fe <etharp_find_entry+0x156>
            old_pending = i;
 800f9ae:	7f3b      	ldrb	r3, [r7, #28]
 800f9b0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800f9b2:	7f3a      	ldrb	r2, [r7, #28]
 800f9b4:	495a      	ldr	r1, [pc, #360]	; (800fb20 <etharp_find_entry+0x278>)
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	005b      	lsls	r3, r3, #1
 800f9ba:	4413      	add	r3, r2
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	440b      	add	r3, r1
 800f9c0:	3312      	adds	r3, #18
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	82fb      	strh	r3, [r7, #22]
 800f9c6:	e01a      	b.n	800f9fe <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f9c8:	7cfb      	ldrb	r3, [r7, #19]
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d917      	bls.n	800f9fe <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f9ce:	7f3a      	ldrb	r2, [r7, #28]
 800f9d0:	4953      	ldr	r1, [pc, #332]	; (800fb20 <etharp_find_entry+0x278>)
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4413      	add	r3, r2
 800f9d8:	00db      	lsls	r3, r3, #3
 800f9da:	440b      	add	r3, r1
 800f9dc:	3312      	adds	r3, #18
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	8aba      	ldrh	r2, [r7, #20]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d80b      	bhi.n	800f9fe <etharp_find_entry+0x156>
            old_stable = i;
 800f9e6:	7f3b      	ldrb	r3, [r7, #28]
 800f9e8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800f9ea:	7f3a      	ldrb	r2, [r7, #28]
 800f9ec:	494c      	ldr	r1, [pc, #304]	; (800fb20 <etharp_find_entry+0x278>)
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	005b      	lsls	r3, r3, #1
 800f9f2:	4413      	add	r3, r2
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	440b      	add	r3, r1
 800f9f8:	3312      	adds	r3, #18
 800f9fa:	881b      	ldrh	r3, [r3, #0]
 800f9fc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9fe:	7f3b      	ldrb	r3, [r7, #28]
 800fa00:	3301      	adds	r3, #1
 800fa02:	773b      	strb	r3, [r7, #28]
 800fa04:	7f3b      	ldrb	r3, [r7, #28]
 800fa06:	2b09      	cmp	r3, #9
 800fa08:	f67f af68 	bls.w	800f8dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fa0c:	7afb      	ldrb	r3, [r7, #11]
 800fa0e:	f003 0302 	and.w	r3, r3, #2
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d108      	bne.n	800fa28 <etharp_find_entry+0x180>
 800fa16:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fa1a:	2b0a      	cmp	r3, #10
 800fa1c:	d107      	bne.n	800fa2e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fa1e:	7afb      	ldrb	r3, [r7, #11]
 800fa20:	f003 0301 	and.w	r3, r3, #1
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d102      	bne.n	800fa2e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800fa28:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2c:	e073      	b.n	800fb16 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fa2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fa32:	2b09      	cmp	r3, #9
 800fa34:	dc02      	bgt.n	800fa3c <etharp_find_entry+0x194>
    i = empty;
 800fa36:	7f7b      	ldrb	r3, [r7, #29]
 800fa38:	773b      	strb	r3, [r7, #28]
 800fa3a:	e036      	b.n	800faaa <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fa3c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800fa40:	2b09      	cmp	r3, #9
 800fa42:	dc13      	bgt.n	800fa6c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800fa44:	7fbb      	ldrb	r3, [r7, #30]
 800fa46:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fa48:	7f3a      	ldrb	r2, [r7, #28]
 800fa4a:	4935      	ldr	r1, [pc, #212]	; (800fb20 <etharp_find_entry+0x278>)
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	005b      	lsls	r3, r3, #1
 800fa50:	4413      	add	r3, r2
 800fa52:	00db      	lsls	r3, r3, #3
 800fa54:	440b      	add	r3, r1
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d018      	beq.n	800fa8e <etharp_find_entry+0x1e6>
 800fa5c:	4b31      	ldr	r3, [pc, #196]	; (800fb24 <etharp_find_entry+0x27c>)
 800fa5e:	f240 126f 	movw	r2, #367	; 0x16f
 800fa62:	4933      	ldr	r1, [pc, #204]	; (800fb30 <etharp_find_entry+0x288>)
 800fa64:	4831      	ldr	r0, [pc, #196]	; (800fb2c <etharp_find_entry+0x284>)
 800fa66:	f003 ff2b 	bl	80138c0 <iprintf>
 800fa6a:	e010      	b.n	800fa8e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fa6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa70:	2b09      	cmp	r3, #9
 800fa72:	dc02      	bgt.n	800fa7a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800fa74:	7ffb      	ldrb	r3, [r7, #31]
 800fa76:	773b      	strb	r3, [r7, #28]
 800fa78:	e009      	b.n	800fa8e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fa7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa7e:	2b09      	cmp	r3, #9
 800fa80:	dc02      	bgt.n	800fa88 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fa82:	7efb      	ldrb	r3, [r7, #27]
 800fa84:	773b      	strb	r3, [r7, #28]
 800fa86:	e002      	b.n	800fa8e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800fa88:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8c:	e043      	b.n	800fb16 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fa8e:	7f3b      	ldrb	r3, [r7, #28]
 800fa90:	2b09      	cmp	r3, #9
 800fa92:	d906      	bls.n	800faa2 <etharp_find_entry+0x1fa>
 800fa94:	4b23      	ldr	r3, [pc, #140]	; (800fb24 <etharp_find_entry+0x27c>)
 800fa96:	f240 1281 	movw	r2, #385	; 0x181
 800fa9a:	4926      	ldr	r1, [pc, #152]	; (800fb34 <etharp_find_entry+0x28c>)
 800fa9c:	4823      	ldr	r0, [pc, #140]	; (800fb2c <etharp_find_entry+0x284>)
 800fa9e:	f003 ff0f 	bl	80138c0 <iprintf>
    etharp_free_entry(i);
 800faa2:	7f3b      	ldrb	r3, [r7, #28]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7ff fe25 	bl	800f6f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800faaa:	7f3b      	ldrb	r3, [r7, #28]
 800faac:	2b09      	cmp	r3, #9
 800faae:	d906      	bls.n	800fabe <etharp_find_entry+0x216>
 800fab0:	4b1c      	ldr	r3, [pc, #112]	; (800fb24 <etharp_find_entry+0x27c>)
 800fab2:	f240 1285 	movw	r2, #389	; 0x185
 800fab6:	491f      	ldr	r1, [pc, #124]	; (800fb34 <etharp_find_entry+0x28c>)
 800fab8:	481c      	ldr	r0, [pc, #112]	; (800fb2c <etharp_find_entry+0x284>)
 800faba:	f003 ff01 	bl	80138c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fabe:	7f3a      	ldrb	r2, [r7, #28]
 800fac0:	4917      	ldr	r1, [pc, #92]	; (800fb20 <etharp_find_entry+0x278>)
 800fac2:	4613      	mov	r3, r2
 800fac4:	005b      	lsls	r3, r3, #1
 800fac6:	4413      	add	r3, r2
 800fac8:	00db      	lsls	r3, r3, #3
 800faca:	440b      	add	r3, r1
 800facc:	3314      	adds	r3, #20
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d006      	beq.n	800fae2 <etharp_find_entry+0x23a>
 800fad4:	4b13      	ldr	r3, [pc, #76]	; (800fb24 <etharp_find_entry+0x27c>)
 800fad6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800fada:	4917      	ldr	r1, [pc, #92]	; (800fb38 <etharp_find_entry+0x290>)
 800fadc:	4813      	ldr	r0, [pc, #76]	; (800fb2c <etharp_find_entry+0x284>)
 800fade:	f003 feef 	bl	80138c0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00a      	beq.n	800fafe <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fae8:	7f3a      	ldrb	r2, [r7, #28]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	6819      	ldr	r1, [r3, #0]
 800faee:	480c      	ldr	r0, [pc, #48]	; (800fb20 <etharp_find_entry+0x278>)
 800faf0:	4613      	mov	r3, r2
 800faf2:	005b      	lsls	r3, r3, #1
 800faf4:	4413      	add	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	4403      	add	r3, r0
 800fafa:	3304      	adds	r3, #4
 800fafc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fafe:	7f3a      	ldrb	r2, [r7, #28]
 800fb00:	4907      	ldr	r1, [pc, #28]	; (800fb20 <etharp_find_entry+0x278>)
 800fb02:	4613      	mov	r3, r2
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	4413      	add	r3, r2
 800fb08:	00db      	lsls	r3, r3, #3
 800fb0a:	440b      	add	r3, r1
 800fb0c:	3312      	adds	r3, #18
 800fb0e:	2200      	movs	r2, #0
 800fb10:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800fb12:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3720      	adds	r7, #32
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	20008e18 	.word	0x20008e18
 800fb24:	08015f14 	.word	0x08015f14
 800fb28:	08015f4c 	.word	0x08015f4c
 800fb2c:	08015f8c 	.word	0x08015f8c
 800fb30:	08015fb4 	.word	0x08015fb4
 800fb34:	08015fcc 	.word	0x08015fcc
 800fb38:	08015fe0 	.word	0x08015fe0

0800fb3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b088      	sub	sp, #32
 800fb40:	af02      	add	r7, sp, #8
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb50:	2b06      	cmp	r3, #6
 800fb52:	d006      	beq.n	800fb62 <etharp_update_arp_entry+0x26>
 800fb54:	4b48      	ldr	r3, [pc, #288]	; (800fc78 <etharp_update_arp_entry+0x13c>)
 800fb56:	f240 12ab 	movw	r2, #427	; 0x1ab
 800fb5a:	4948      	ldr	r1, [pc, #288]	; (800fc7c <etharp_update_arp_entry+0x140>)
 800fb5c:	4848      	ldr	r0, [pc, #288]	; (800fc80 <etharp_update_arp_entry+0x144>)
 800fb5e:	f003 feaf 	bl	80138c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d012      	beq.n	800fb8e <etharp_update_arp_entry+0x52>
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00e      	beq.n	800fb8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68f9      	ldr	r1, [r7, #12]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f001 f8dc 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 800fb7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d105      	bne.n	800fb8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fb8a:	2be0      	cmp	r3, #224	; 0xe0
 800fb8c:	d102      	bne.n	800fb94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fb8e:	f06f 030f 	mvn.w	r3, #15
 800fb92:	e06c      	b.n	800fc6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fb94:	78fb      	ldrb	r3, [r7, #3]
 800fb96:	68fa      	ldr	r2, [r7, #12]
 800fb98:	4619      	mov	r1, r3
 800fb9a:	68b8      	ldr	r0, [r7, #8]
 800fb9c:	f7ff fe84 	bl	800f8a8 <etharp_find_entry>
 800fba0:	4603      	mov	r3, r0
 800fba2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	da02      	bge.n	800fbb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fbac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fbb0:	e05d      	b.n	800fc6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fbb2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fbb6:	4933      	ldr	r1, [pc, #204]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fbb8:	4613      	mov	r3, r2
 800fbba:	005b      	lsls	r3, r3, #1
 800fbbc:	4413      	add	r3, r2
 800fbbe:	00db      	lsls	r3, r3, #3
 800fbc0:	440b      	add	r3, r1
 800fbc2:	3314      	adds	r3, #20
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fbc8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fbcc:	492d      	ldr	r1, [pc, #180]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fbce:	4613      	mov	r3, r2
 800fbd0:	005b      	lsls	r3, r3, #1
 800fbd2:	4413      	add	r3, r2
 800fbd4:	00db      	lsls	r3, r3, #3
 800fbd6:	440b      	add	r3, r1
 800fbd8:	3308      	adds	r3, #8
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800fbde:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	005b      	lsls	r3, r3, #1
 800fbe6:	4413      	add	r3, r2
 800fbe8:	00db      	lsls	r3, r3, #3
 800fbea:	3308      	adds	r3, #8
 800fbec:	4a25      	ldr	r2, [pc, #148]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fbee:	4413      	add	r3, r2
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	2206      	movs	r2, #6
 800fbf4:	6879      	ldr	r1, [r7, #4]
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f003 fd70 	bl	80136dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fbfc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fc00:	4920      	ldr	r1, [pc, #128]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fc02:	4613      	mov	r3, r2
 800fc04:	005b      	lsls	r3, r3, #1
 800fc06:	4413      	add	r3, r2
 800fc08:	00db      	lsls	r3, r3, #3
 800fc0a:	440b      	add	r3, r1
 800fc0c:	3312      	adds	r3, #18
 800fc0e:	2200      	movs	r2, #0
 800fc10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fc12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fc16:	491b      	ldr	r1, [pc, #108]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fc18:	4613      	mov	r3, r2
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	4413      	add	r3, r2
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	440b      	add	r3, r1
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d021      	beq.n	800fc6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fc28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fc2c:	4915      	ldr	r1, [pc, #84]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fc2e:	4613      	mov	r3, r2
 800fc30:	005b      	lsls	r3, r3, #1
 800fc32:	4413      	add	r3, r2
 800fc34:	00db      	lsls	r3, r3, #3
 800fc36:	440b      	add	r3, r1
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fc3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fc40:	4910      	ldr	r1, [pc, #64]	; (800fc84 <etharp_update_arp_entry+0x148>)
 800fc42:	4613      	mov	r3, r2
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	4413      	add	r3, r2
 800fc48:	00db      	lsls	r3, r3, #3
 800fc4a:	440b      	add	r3, r1
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800fc56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6939      	ldr	r1, [r7, #16]
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f001 ff0d 	bl	8011a80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fc66:	6938      	ldr	r0, [r7, #16]
 800fc68:	f7f9 fb30 	bl	80092cc <pbuf_free>
  }
  return ERR_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	08015f14 	.word	0x08015f14
 800fc7c:	0801600c 	.word	0x0801600c
 800fc80:	08015f8c 	.word	0x08015f8c
 800fc84:	20008e18 	.word	0x20008e18

0800fc88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc90:	2300      	movs	r3, #0
 800fc92:	73fb      	strb	r3, [r7, #15]
 800fc94:	e01f      	b.n	800fcd6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800fc96:	7bfa      	ldrb	r2, [r7, #15]
 800fc98:	4913      	ldr	r1, [pc, #76]	; (800fce8 <etharp_cleanup_netif+0x60>)
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	005b      	lsls	r3, r3, #1
 800fc9e:	4413      	add	r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	440b      	add	r3, r1
 800fca4:	3314      	adds	r3, #20
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fcaa:	7bbb      	ldrb	r3, [r7, #14]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00f      	beq.n	800fcd0 <etharp_cleanup_netif+0x48>
 800fcb0:	7bfa      	ldrb	r2, [r7, #15]
 800fcb2:	490d      	ldr	r1, [pc, #52]	; (800fce8 <etharp_cleanup_netif+0x60>)
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	005b      	lsls	r3, r3, #1
 800fcb8:	4413      	add	r3, r2
 800fcba:	00db      	lsls	r3, r3, #3
 800fcbc:	440b      	add	r3, r1
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d103      	bne.n	800fcd0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff fd12 	bl	800f6f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fcd0:	7bfb      	ldrb	r3, [r7, #15]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	73fb      	strb	r3, [r7, #15]
 800fcd6:	7bfb      	ldrb	r3, [r7, #15]
 800fcd8:	2b09      	cmp	r3, #9
 800fcda:	d9dc      	bls.n	800fc96 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fcdc:	bf00      	nop
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	20008e18 	.word	0x20008e18

0800fcec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fcec:	b5b0      	push	{r4, r5, r7, lr}
 800fcee:	b08a      	sub	sp, #40	; 0x28
 800fcf0:	af04      	add	r7, sp, #16
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d107      	bne.n	800fd0c <etharp_input+0x20>
 800fcfc:	4b3d      	ldr	r3, [pc, #244]	; (800fdf4 <etharp_input+0x108>)
 800fcfe:	f44f 7222 	mov.w	r2, #648	; 0x288
 800fd02:	493d      	ldr	r1, [pc, #244]	; (800fdf8 <etharp_input+0x10c>)
 800fd04:	483d      	ldr	r0, [pc, #244]	; (800fdfc <etharp_input+0x110>)
 800fd06:	f003 fddb 	bl	80138c0 <iprintf>
 800fd0a:	e06f      	b.n	800fdec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd1c:	d10c      	bne.n	800fd38 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fd22:	2b06      	cmp	r3, #6
 800fd24:	d108      	bne.n	800fd38 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fd2a:	2b04      	cmp	r3, #4
 800fd2c:	d104      	bne.n	800fd38 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	885b      	ldrh	r3, [r3, #2]
 800fd32:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fd34:	2b08      	cmp	r3, #8
 800fd36:	d003      	beq.n	800fd40 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7f9 fac7 	bl	80092cc <pbuf_free>
    return;
 800fd3e:	e055      	b.n	800fdec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	330e      	adds	r3, #14
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	3318      	adds	r3, #24
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	3304      	adds	r3, #4
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d102      	bne.n	800fd60 <etharp_input+0x74>
    for_us = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	75fb      	strb	r3, [r7, #23]
 800fd5e:	e009      	b.n	800fd74 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fd60:	68ba      	ldr	r2, [r7, #8]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	3304      	adds	r3, #4
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	bf0c      	ite	eq
 800fd6c:	2301      	moveq	r3, #1
 800fd6e:	2300      	movne	r3, #0
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	f103 0208 	add.w	r2, r3, #8
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d001      	beq.n	800fd84 <etharp_input+0x98>
 800fd80:	2301      	movs	r3, #1
 800fd82:	e000      	b.n	800fd86 <etharp_input+0x9a>
 800fd84:	2302      	movs	r3, #2
 800fd86:	f107 010c 	add.w	r1, r7, #12
 800fd8a:	6838      	ldr	r0, [r7, #0]
 800fd8c:	f7ff fed6 	bl	800fb3c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	88db      	ldrh	r3, [r3, #6]
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd9a:	d003      	beq.n	800fda4 <etharp_input+0xb8>
 800fd9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fda0:	d01e      	beq.n	800fde0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800fda2:	e020      	b.n	800fde6 <etharp_input+0xfa>
    if (for_us) {
 800fda4:	7dfb      	ldrb	r3, [r7, #23]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d01c      	beq.n	800fde4 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800fdc0:	693a      	ldr	r2, [r7, #16]
 800fdc2:	3208      	adds	r2, #8
      etharp_raw(netif,
 800fdc4:	2102      	movs	r1, #2
 800fdc6:	9103      	str	r1, [sp, #12]
 800fdc8:	f107 010c 	add.w	r1, r7, #12
 800fdcc:	9102      	str	r1, [sp, #8]
 800fdce:	9201      	str	r2, [sp, #4]
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	462b      	mov	r3, r5
 800fdd4:	4622      	mov	r2, r4
 800fdd6:	4601      	mov	r1, r0
 800fdd8:	6838      	ldr	r0, [r7, #0]
 800fdda:	f000 fae1 	bl	80103a0 <etharp_raw>
    break;
 800fdde:	e001      	b.n	800fde4 <etharp_input+0xf8>
    break;
 800fde0:	bf00      	nop
 800fde2:	e000      	b.n	800fde6 <etharp_input+0xfa>
    break;
 800fde4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7f9 fa70 	bl	80092cc <pbuf_free>
}
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bdb0      	pop	{r4, r5, r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	08015f14 	.word	0x08015f14
 800fdf8:	08016064 	.word	0x08016064
 800fdfc:	08015f8c 	.word	0x08015f8c

0800fe00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b086      	sub	sp, #24
 800fe04:	af02      	add	r7, sp, #8
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fe0e:	79fa      	ldrb	r2, [r7, #7]
 800fe10:	4944      	ldr	r1, [pc, #272]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fe12:	4613      	mov	r3, r2
 800fe14:	005b      	lsls	r3, r3, #1
 800fe16:	4413      	add	r3, r2
 800fe18:	00db      	lsls	r3, r3, #3
 800fe1a:	440b      	add	r3, r1
 800fe1c:	3314      	adds	r3, #20
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d806      	bhi.n	800fe32 <etharp_output_to_arp_index+0x32>
 800fe24:	4b40      	ldr	r3, [pc, #256]	; (800ff28 <etharp_output_to_arp_index+0x128>)
 800fe26:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800fe2a:	4940      	ldr	r1, [pc, #256]	; (800ff2c <etharp_output_to_arp_index+0x12c>)
 800fe2c:	4840      	ldr	r0, [pc, #256]	; (800ff30 <etharp_output_to_arp_index+0x130>)
 800fe2e:	f003 fd47 	bl	80138c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fe32:	79fa      	ldrb	r2, [r7, #7]
 800fe34:	493b      	ldr	r1, [pc, #236]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fe36:	4613      	mov	r3, r2
 800fe38:	005b      	lsls	r3, r3, #1
 800fe3a:	4413      	add	r3, r2
 800fe3c:	00db      	lsls	r3, r3, #3
 800fe3e:	440b      	add	r3, r1
 800fe40:	3314      	adds	r3, #20
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	2b02      	cmp	r3, #2
 800fe46:	d153      	bne.n	800fef0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fe48:	79fa      	ldrb	r2, [r7, #7]
 800fe4a:	4936      	ldr	r1, [pc, #216]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	4413      	add	r3, r2
 800fe52:	00db      	lsls	r3, r3, #3
 800fe54:	440b      	add	r3, r1
 800fe56:	3312      	adds	r3, #18
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fe5e:	d919      	bls.n	800fe94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fe60:	79fa      	ldrb	r2, [r7, #7]
 800fe62:	4613      	mov	r3, r2
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	4413      	add	r3, r2
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	4a2e      	ldr	r2, [pc, #184]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fe6c:	4413      	add	r3, r2
 800fe6e:	3304      	adds	r3, #4
 800fe70:	4619      	mov	r1, r3
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f000 fb42 	bl	80104fc <etharp_request>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d138      	bne.n	800fef0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fe7e:	79fa      	ldrb	r2, [r7, #7]
 800fe80:	4928      	ldr	r1, [pc, #160]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fe82:	4613      	mov	r3, r2
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	4413      	add	r3, r2
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	440b      	add	r3, r1
 800fe8c:	3314      	adds	r3, #20
 800fe8e:	2203      	movs	r2, #3
 800fe90:	701a      	strb	r2, [r3, #0]
 800fe92:	e02d      	b.n	800fef0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fe94:	79fa      	ldrb	r2, [r7, #7]
 800fe96:	4923      	ldr	r1, [pc, #140]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fe98:	4613      	mov	r3, r2
 800fe9a:	005b      	lsls	r3, r3, #1
 800fe9c:	4413      	add	r3, r2
 800fe9e:	00db      	lsls	r3, r3, #3
 800fea0:	440b      	add	r3, r1
 800fea2:	3312      	adds	r3, #18
 800fea4:	881b      	ldrh	r3, [r3, #0]
 800fea6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800feaa:	d321      	bcc.n	800fef0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800feac:	79fa      	ldrb	r2, [r7, #7]
 800feae:	4613      	mov	r3, r2
 800feb0:	005b      	lsls	r3, r3, #1
 800feb2:	4413      	add	r3, r2
 800feb4:	00db      	lsls	r3, r3, #3
 800feb6:	4a1b      	ldr	r2, [pc, #108]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800feb8:	4413      	add	r3, r2
 800feba:	1d19      	adds	r1, r3, #4
 800febc:	79fa      	ldrb	r2, [r7, #7]
 800febe:	4613      	mov	r3, r2
 800fec0:	005b      	lsls	r3, r3, #1
 800fec2:	4413      	add	r3, r2
 800fec4:	00db      	lsls	r3, r3, #3
 800fec6:	3308      	adds	r3, #8
 800fec8:	4a16      	ldr	r2, [pc, #88]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800feca:	4413      	add	r3, r2
 800fecc:	3304      	adds	r3, #4
 800fece:	461a      	mov	r2, r3
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f000 faf1 	bl	80104b8 <etharp_request_dst>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d109      	bne.n	800fef0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fedc:	79fa      	ldrb	r2, [r7, #7]
 800fede:	4911      	ldr	r1, [pc, #68]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800fee0:	4613      	mov	r3, r2
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	4413      	add	r3, r2
 800fee6:	00db      	lsls	r3, r3, #3
 800fee8:	440b      	add	r3, r1
 800feea:	3314      	adds	r3, #20
 800feec:	2203      	movs	r2, #3
 800feee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800fef6:	79fa      	ldrb	r2, [r7, #7]
 800fef8:	4613      	mov	r3, r2
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	4413      	add	r3, r2
 800fefe:	00db      	lsls	r3, r3, #3
 800ff00:	3308      	adds	r3, #8
 800ff02:	4a08      	ldr	r2, [pc, #32]	; (800ff24 <etharp_output_to_arp_index+0x124>)
 800ff04:	4413      	add	r3, r2
 800ff06:	3304      	adds	r3, #4
 800ff08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff0c:	9200      	str	r2, [sp, #0]
 800ff0e:	460a      	mov	r2, r1
 800ff10:	68b9      	ldr	r1, [r7, #8]
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	f001 fdb4 	bl	8011a80 <ethernet_output>
 800ff18:	4603      	mov	r3, r0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3710      	adds	r7, #16
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	20008e18 	.word	0x20008e18
 800ff28:	08015f14 	.word	0x08015f14
 800ff2c:	08016084 	.word	0x08016084
 800ff30:	08015f8c 	.word	0x08015f8c

0800ff34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b08a      	sub	sp, #40	; 0x28
 800ff38:	af02      	add	r7, sp, #8
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <etharp_output+0x24>
 800ff4a:	4b69      	ldr	r3, [pc, #420]	; (80100f0 <etharp_output+0x1bc>)
 800ff4c:	f240 321b 	movw	r2, #795	; 0x31b
 800ff50:	4968      	ldr	r1, [pc, #416]	; (80100f4 <etharp_output+0x1c0>)
 800ff52:	4869      	ldr	r0, [pc, #420]	; (80100f8 <etharp_output+0x1c4>)
 800ff54:	f003 fcb4 	bl	80138c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <etharp_output+0x38>
 800ff5e:	4b64      	ldr	r3, [pc, #400]	; (80100f0 <etharp_output+0x1bc>)
 800ff60:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ff64:	4965      	ldr	r1, [pc, #404]	; (80100fc <etharp_output+0x1c8>)
 800ff66:	4864      	ldr	r0, [pc, #400]	; (80100f8 <etharp_output+0x1c4>)
 800ff68:	f003 fcaa 	bl	80138c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d106      	bne.n	800ff80 <etharp_output+0x4c>
 800ff72:	4b5f      	ldr	r3, [pc, #380]	; (80100f0 <etharp_output+0x1bc>)
 800ff74:	f240 321d 	movw	r2, #797	; 0x31d
 800ff78:	4961      	ldr	r1, [pc, #388]	; (8010100 <etharp_output+0x1cc>)
 800ff7a:	485f      	ldr	r0, [pc, #380]	; (80100f8 <etharp_output+0x1c4>)
 800ff7c:	f003 fca0 	bl	80138c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	68f9      	ldr	r1, [r7, #12]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 fed4 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d002      	beq.n	800ff98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ff92:	4b5c      	ldr	r3, [pc, #368]	; (8010104 <etharp_output+0x1d0>)
 800ff94:	61fb      	str	r3, [r7, #28]
 800ff96:	e09b      	b.n	80100d0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffa0:	2be0      	cmp	r3, #224	; 0xe0
 800ffa2:	d118      	bne.n	800ffd6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ffac:	235e      	movs	r3, #94	; 0x5e
 800ffae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	3302      	adds	r3, #2
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	3303      	adds	r3, #3
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ffce:	f107 0310 	add.w	r3, r7, #16
 800ffd2:	61fb      	str	r3, [r7, #28]
 800ffd4:	e07c      	b.n	80100d0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	405a      	eors	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	3308      	adds	r3, #8
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4013      	ands	r3, r2
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d012      	beq.n	8010014 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fff4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d00b      	beq.n	8010014 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	330c      	adds	r3, #12
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	330c      	adds	r3, #12
 801000a:	61bb      	str	r3, [r7, #24]
 801000c:	e002      	b.n	8010014 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801000e:	f06f 0303 	mvn.w	r3, #3
 8010012:	e069      	b.n	80100e8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010014:	4b3c      	ldr	r3, [pc, #240]	; (8010108 <etharp_output+0x1d4>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	4619      	mov	r1, r3
 801001a:	4a3c      	ldr	r2, [pc, #240]	; (801010c <etharp_output+0x1d8>)
 801001c:	460b      	mov	r3, r1
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	440b      	add	r3, r1
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	4413      	add	r3, r2
 8010026:	3314      	adds	r3, #20
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d917      	bls.n	801005e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	4b35      	ldr	r3, [pc, #212]	; (8010108 <etharp_output+0x1d4>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	4618      	mov	r0, r3
 8010038:	4934      	ldr	r1, [pc, #208]	; (801010c <etharp_output+0x1d8>)
 801003a:	4603      	mov	r3, r0
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	4403      	add	r3, r0
 8010040:	00db      	lsls	r3, r3, #3
 8010042:	440b      	add	r3, r1
 8010044:	3304      	adds	r3, #4
 8010046:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010048:	429a      	cmp	r2, r3
 801004a:	d108      	bne.n	801005e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801004c:	4b2e      	ldr	r3, [pc, #184]	; (8010108 <etharp_output+0x1d4>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	461a      	mov	r2, r3
 8010052:	68b9      	ldr	r1, [r7, #8]
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f7ff fed3 	bl	800fe00 <etharp_output_to_arp_index>
 801005a:	4603      	mov	r3, r0
 801005c:	e044      	b.n	80100e8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801005e:	2300      	movs	r3, #0
 8010060:	75fb      	strb	r3, [r7, #23]
 8010062:	e02a      	b.n	80100ba <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010064:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010068:	4928      	ldr	r1, [pc, #160]	; (801010c <etharp_output+0x1d8>)
 801006a:	4613      	mov	r3, r2
 801006c:	005b      	lsls	r3, r3, #1
 801006e:	4413      	add	r3, r2
 8010070:	00db      	lsls	r3, r3, #3
 8010072:	440b      	add	r3, r1
 8010074:	3314      	adds	r3, #20
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d918      	bls.n	80100ae <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	6819      	ldr	r1, [r3, #0]
 8010080:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010084:	4821      	ldr	r0, [pc, #132]	; (801010c <etharp_output+0x1d8>)
 8010086:	4613      	mov	r3, r2
 8010088:	005b      	lsls	r3, r3, #1
 801008a:	4413      	add	r3, r2
 801008c:	00db      	lsls	r3, r3, #3
 801008e:	4403      	add	r3, r0
 8010090:	3304      	adds	r3, #4
 8010092:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010094:	4299      	cmp	r1, r3
 8010096:	d10a      	bne.n	80100ae <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010098:	7dfa      	ldrb	r2, [r7, #23]
 801009a:	4b1b      	ldr	r3, [pc, #108]	; (8010108 <etharp_output+0x1d4>)
 801009c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801009e:	7dfb      	ldrb	r3, [r7, #23]
 80100a0:	461a      	mov	r2, r3
 80100a2:	68b9      	ldr	r1, [r7, #8]
 80100a4:	68f8      	ldr	r0, [r7, #12]
 80100a6:	f7ff feab 	bl	800fe00 <etharp_output_to_arp_index>
 80100aa:	4603      	mov	r3, r0
 80100ac:	e01c      	b.n	80100e8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80100ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	3301      	adds	r3, #1
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	75fb      	strb	r3, [r7, #23]
 80100ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100be:	2b09      	cmp	r3, #9
 80100c0:	ddd0      	ble.n	8010064 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	69b9      	ldr	r1, [r7, #24]
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f000 f822 	bl	8010110 <etharp_query>
 80100cc:	4603      	mov	r3, r0
 80100ce:	e00b      	b.n	80100e8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80100d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	68b9      	ldr	r1, [r7, #8]
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f001 fccd 	bl	8011a80 <ethernet_output>
 80100e6:	4603      	mov	r3, r0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3720      	adds	r7, #32
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	08015f14 	.word	0x08015f14
 80100f4:	08016064 	.word	0x08016064
 80100f8:	08015f8c 	.word	0x08015f8c
 80100fc:	080160b4 	.word	0x080160b4
 8010100:	08016054 	.word	0x08016054
 8010104:	080166c4 	.word	0x080166c4
 8010108:	20008f08 	.word	0x20008f08
 801010c:	20008e18 	.word	0x20008e18

08010110 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08c      	sub	sp, #48	; 0x30
 8010114:	af02      	add	r7, sp, #8
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3329      	adds	r3, #41	; 0x29
 8010120:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010122:	23ff      	movs	r3, #255	; 0xff
 8010124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010128:	2300      	movs	r3, #0
 801012a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	68f9      	ldr	r1, [r7, #12]
 8010132:	4618      	mov	r0, r3
 8010134:	f000 fdfe 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d10c      	bne.n	8010158 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010146:	2be0      	cmp	r3, #224	; 0xe0
 8010148:	d006      	beq.n	8010158 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d102      	bne.n	801015e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010158:	f06f 030f 	mvn.w	r3, #15
 801015c:	e10e      	b.n	801037c <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	2101      	movs	r1, #1
 8010162:	68b8      	ldr	r0, [r7, #8]
 8010164:	f7ff fba0 	bl	800f8a8 <etharp_find_entry>
 8010168:	4603      	mov	r3, r0
 801016a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801016c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010170:	2b00      	cmp	r3, #0
 8010172:	da02      	bge.n	801017a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010178:	e100      	b.n	801037c <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801017a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801017e:	4981      	ldr	r1, [pc, #516]	; (8010384 <etharp_query+0x274>)
 8010180:	4613      	mov	r3, r2
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	4413      	add	r3, r2
 8010186:	00db      	lsls	r3, r3, #3
 8010188:	440b      	add	r3, r1
 801018a:	3314      	adds	r3, #20
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d117      	bne.n	80101c2 <etharp_query+0xb2>
    is_new_entry = 1;
 8010192:	2301      	movs	r3, #1
 8010194:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010196:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801019a:	497a      	ldr	r1, [pc, #488]	; (8010384 <etharp_query+0x274>)
 801019c:	4613      	mov	r3, r2
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	440b      	add	r3, r1
 80101a6:	3314      	adds	r3, #20
 80101a8:	2201      	movs	r2, #1
 80101aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80101ac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101b0:	4974      	ldr	r1, [pc, #464]	; (8010384 <etharp_query+0x274>)
 80101b2:	4613      	mov	r3, r2
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	4413      	add	r3, r2
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	440b      	add	r3, r1
 80101bc:	3308      	adds	r3, #8
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80101c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101c6:	496f      	ldr	r1, [pc, #444]	; (8010384 <etharp_query+0x274>)
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	440b      	add	r3, r1
 80101d2:	3314      	adds	r3, #20
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d012      	beq.n	8010200 <etharp_query+0xf0>
 80101da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101de:	4969      	ldr	r1, [pc, #420]	; (8010384 <etharp_query+0x274>)
 80101e0:	4613      	mov	r3, r2
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	4413      	add	r3, r2
 80101e6:	00db      	lsls	r3, r3, #3
 80101e8:	440b      	add	r3, r1
 80101ea:	3314      	adds	r3, #20
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d806      	bhi.n	8010200 <etharp_query+0xf0>
 80101f2:	4b65      	ldr	r3, [pc, #404]	; (8010388 <etharp_query+0x278>)
 80101f4:	f240 32c7 	movw	r2, #967	; 0x3c7
 80101f8:	4964      	ldr	r1, [pc, #400]	; (801038c <etharp_query+0x27c>)
 80101fa:	4865      	ldr	r0, [pc, #404]	; (8010390 <etharp_query+0x280>)
 80101fc:	f003 fb60 	bl	80138c0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d102      	bne.n	801020c <etharp_query+0xfc>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d10c      	bne.n	8010226 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801020c:	68b9      	ldr	r1, [r7, #8]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f974 	bl	80104fc <etharp_request>
 8010214:	4603      	mov	r3, r0
 8010216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d102      	bne.n	8010226 <etharp_query+0x116>
      return result;
 8010220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010224:	e0aa      	b.n	801037c <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d106      	bne.n	801023a <etharp_query+0x12a>
 801022c:	4b56      	ldr	r3, [pc, #344]	; (8010388 <etharp_query+0x278>)
 801022e:	f240 32db 	movw	r2, #987	; 0x3db
 8010232:	4958      	ldr	r1, [pc, #352]	; (8010394 <etharp_query+0x284>)
 8010234:	4856      	ldr	r0, [pc, #344]	; (8010390 <etharp_query+0x280>)
 8010236:	f003 fb43 	bl	80138c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801023a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801023e:	4951      	ldr	r1, [pc, #324]	; (8010384 <etharp_query+0x274>)
 8010240:	4613      	mov	r3, r2
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	4413      	add	r3, r2
 8010246:	00db      	lsls	r3, r3, #3
 8010248:	440b      	add	r3, r1
 801024a:	3314      	adds	r3, #20
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	2b01      	cmp	r3, #1
 8010250:	d918      	bls.n	8010284 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8010252:	7cfa      	ldrb	r2, [r7, #19]
 8010254:	4b50      	ldr	r3, [pc, #320]	; (8010398 <etharp_query+0x288>)
 8010256:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010258:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801025c:	4613      	mov	r3, r2
 801025e:	005b      	lsls	r3, r3, #1
 8010260:	4413      	add	r3, r2
 8010262:	00db      	lsls	r3, r3, #3
 8010264:	3308      	adds	r3, #8
 8010266:	4a47      	ldr	r2, [pc, #284]	; (8010384 <etharp_query+0x274>)
 8010268:	4413      	add	r3, r2
 801026a:	3304      	adds	r3, #4
 801026c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010270:	9200      	str	r2, [sp, #0]
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	6879      	ldr	r1, [r7, #4]
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f001 fc02 	bl	8011a80 <ethernet_output>
 801027c:	4603      	mov	r3, r0
 801027e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010282:	e079      	b.n	8010378 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010284:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010288:	493e      	ldr	r1, [pc, #248]	; (8010384 <etharp_query+0x274>)
 801028a:	4613      	mov	r3, r2
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4413      	add	r3, r2
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	440b      	add	r3, r1
 8010294:	3314      	adds	r3, #20
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	2b01      	cmp	r3, #1
 801029a:	d16d      	bne.n	8010378 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80102a4:	e01a      	b.n	80102dc <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	895a      	ldrh	r2, [r3, #10]
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	891b      	ldrh	r3, [r3, #8]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d10a      	bne.n	80102c8 <etharp_query+0x1b8>
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d006      	beq.n	80102c8 <etharp_query+0x1b8>
 80102ba:	4b33      	ldr	r3, [pc, #204]	; (8010388 <etharp_query+0x278>)
 80102bc:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80102c0:	4936      	ldr	r1, [pc, #216]	; (801039c <etharp_query+0x28c>)
 80102c2:	4833      	ldr	r0, [pc, #204]	; (8010390 <etharp_query+0x280>)
 80102c4:	f003 fafc 	bl	80138c0 <iprintf>
      if (p->type != PBUF_ROM) {
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	7b1b      	ldrb	r3, [r3, #12]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d002      	beq.n	80102d6 <etharp_query+0x1c6>
        copy_needed = 1;
 80102d0:	2301      	movs	r3, #1
 80102d2:	61bb      	str	r3, [r7, #24]
        break;
 80102d4:	e005      	b.n	80102e2 <etharp_query+0x1d2>
      }
      p = p->next;
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1e1      	bne.n	80102a6 <etharp_query+0x196>
    }
    if (copy_needed) {
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d017      	beq.n	8010318 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	891b      	ldrh	r3, [r3, #8]
 80102ec:	2200      	movs	r2, #0
 80102ee:	4619      	mov	r1, r3
 80102f0:	2002      	movs	r0, #2
 80102f2:	f7f8 fc73 	bl	8008bdc <pbuf_alloc>
 80102f6:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d011      	beq.n	8010322 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 80102fe:	6879      	ldr	r1, [r7, #4]
 8010300:	69f8      	ldr	r0, [r7, #28]
 8010302:	f7f9 f915 	bl	8009530 <pbuf_copy>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00a      	beq.n	8010322 <etharp_query+0x212>
          pbuf_free(p);
 801030c:	69f8      	ldr	r0, [r7, #28]
 801030e:	f7f8 ffdd 	bl	80092cc <pbuf_free>
          p = NULL;
 8010312:	2300      	movs	r3, #0
 8010314:	61fb      	str	r3, [r7, #28]
 8010316:	e004      	b.n	8010322 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801031c:	69f8      	ldr	r0, [r7, #28]
 801031e:	f7f9 f87f 	bl	8009420 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d024      	beq.n	8010372 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010328:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801032c:	4915      	ldr	r1, [pc, #84]	; (8010384 <etharp_query+0x274>)
 801032e:	4613      	mov	r3, r2
 8010330:	005b      	lsls	r3, r3, #1
 8010332:	4413      	add	r3, r2
 8010334:	00db      	lsls	r3, r3, #3
 8010336:	440b      	add	r3, r1
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00b      	beq.n	8010356 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801033e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010342:	4910      	ldr	r1, [pc, #64]	; (8010384 <etharp_query+0x274>)
 8010344:	4613      	mov	r3, r2
 8010346:	005b      	lsls	r3, r3, #1
 8010348:	4413      	add	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	440b      	add	r3, r1
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4618      	mov	r0, r3
 8010352:	f7f8 ffbb 	bl	80092cc <pbuf_free>
      }
      arp_table[i].q = p;
 8010356:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801035a:	490a      	ldr	r1, [pc, #40]	; (8010384 <etharp_query+0x274>)
 801035c:	4613      	mov	r3, r2
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	4413      	add	r3, r2
 8010362:	00db      	lsls	r3, r3, #3
 8010364:	440b      	add	r3, r1
 8010366:	69fa      	ldr	r2, [r7, #28]
 8010368:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801036a:	2300      	movs	r3, #0
 801036c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010370:	e002      	b.n	8010378 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010372:	23ff      	movs	r3, #255	; 0xff
 8010374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010378:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801037c:	4618      	mov	r0, r3
 801037e:	3728      	adds	r7, #40	; 0x28
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	20008e18 	.word	0x20008e18
 8010388:	08015f14 	.word	0x08015f14
 801038c:	080160c0 	.word	0x080160c0
 8010390:	08015f8c 	.word	0x08015f8c
 8010394:	080160b4 	.word	0x080160b4
 8010398:	20008f08 	.word	0x20008f08
 801039c:	080160e8 	.word	0x080160e8

080103a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b08a      	sub	sp, #40	; 0x28
 80103a4:	af02      	add	r7, sp, #8
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80103ae:	2300      	movs	r3, #0
 80103b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d106      	bne.n	80103c6 <etharp_raw+0x26>
 80103b8:	4b3a      	ldr	r3, [pc, #232]	; (80104a4 <etharp_raw+0x104>)
 80103ba:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80103be:	493a      	ldr	r1, [pc, #232]	; (80104a8 <etharp_raw+0x108>)
 80103c0:	483a      	ldr	r0, [pc, #232]	; (80104ac <etharp_raw+0x10c>)
 80103c2:	f003 fa7d 	bl	80138c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80103c6:	2200      	movs	r2, #0
 80103c8:	211c      	movs	r1, #28
 80103ca:	2002      	movs	r0, #2
 80103cc:	f7f8 fc06 	bl	8008bdc <pbuf_alloc>
 80103d0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80103d8:	f04f 33ff 	mov.w	r3, #4294967295
 80103dc:	e05d      	b.n	801049a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	895b      	ldrh	r3, [r3, #10]
 80103e2:	2b1b      	cmp	r3, #27
 80103e4:	d806      	bhi.n	80103f4 <etharp_raw+0x54>
 80103e6:	4b2f      	ldr	r3, [pc, #188]	; (80104a4 <etharp_raw+0x104>)
 80103e8:	f240 4263 	movw	r2, #1123	; 0x463
 80103ec:	4930      	ldr	r1, [pc, #192]	; (80104b0 <etharp_raw+0x110>)
 80103ee:	482f      	ldr	r0, [pc, #188]	; (80104ac <etharp_raw+0x10c>)
 80103f0:	f003 fa66 	bl	80138c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80103fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7f7 fb92 	bl	8007b26 <lwip_htons>
 8010402:	4603      	mov	r3, r0
 8010404:	461a      	mov	r2, r3
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010410:	2b06      	cmp	r3, #6
 8010412:	d006      	beq.n	8010422 <etharp_raw+0x82>
 8010414:	4b23      	ldr	r3, [pc, #140]	; (80104a4 <etharp_raw+0x104>)
 8010416:	f240 426a 	movw	r2, #1130	; 0x46a
 801041a:	4926      	ldr	r1, [pc, #152]	; (80104b4 <etharp_raw+0x114>)
 801041c:	4823      	ldr	r0, [pc, #140]	; (80104ac <etharp_raw+0x10c>)
 801041e:	f003 fa4f 	bl	80138c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	3308      	adds	r3, #8
 8010426:	2206      	movs	r2, #6
 8010428:	6839      	ldr	r1, [r7, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	f003 f956 	bl	80136dc <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	3312      	adds	r3, #18
 8010434:	2206      	movs	r2, #6
 8010436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010438:	4618      	mov	r0, r3
 801043a:	f003 f94f 	bl	80136dc <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	330e      	adds	r3, #14
 8010442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010444:	6812      	ldr	r2, [r2, #0]
 8010446:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	3318      	adds	r3, #24
 801044c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801044e:	6812      	ldr	r2, [r2, #0]
 8010450:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	2200      	movs	r2, #0
 8010456:	701a      	strb	r2, [r3, #0]
 8010458:	2200      	movs	r2, #0
 801045a:	f042 0201 	orr.w	r2, r2, #1
 801045e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2200      	movs	r2, #0
 8010464:	f042 0208 	orr.w	r2, r2, #8
 8010468:	709a      	strb	r2, [r3, #2]
 801046a:	2200      	movs	r2, #0
 801046c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	2206      	movs	r2, #6
 8010472:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	2204      	movs	r2, #4
 8010478:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801047a:	f640 0306 	movw	r3, #2054	; 0x806
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	68ba      	ldr	r2, [r7, #8]
 8010484:	69b9      	ldr	r1, [r7, #24]
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f001 fafa 	bl	8011a80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801048c:	69b8      	ldr	r0, [r7, #24]
 801048e:	f7f8 ff1d 	bl	80092cc <pbuf_free>
  p = NULL;
 8010492:	2300      	movs	r3, #0
 8010494:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010496:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3720      	adds	r7, #32
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	08015f14 	.word	0x08015f14
 80104a8:	08016064 	.word	0x08016064
 80104ac:	08015f8c 	.word	0x08015f8c
 80104b0:	08016104 	.word	0x08016104
 80104b4:	08016138 	.word	0x08016138

080104b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b088      	sub	sp, #32
 80104bc:	af04      	add	r7, sp, #16
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80104d4:	2201      	movs	r2, #1
 80104d6:	9203      	str	r2, [sp, #12]
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	9202      	str	r2, [sp, #8]
 80104dc:	4a06      	ldr	r2, [pc, #24]	; (80104f8 <etharp_request_dst+0x40>)
 80104de:	9201      	str	r2, [sp, #4]
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	4603      	mov	r3, r0
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff ff5a 	bl	80103a0 <etharp_raw>
 80104ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	080166cc 	.word	0x080166cc

080104fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010506:	4a05      	ldr	r2, [pc, #20]	; (801051c <etharp_request+0x20>)
 8010508:	6839      	ldr	r1, [r7, #0]
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7ff ffd4 	bl	80104b8 <etharp_request_dst>
 8010510:	4603      	mov	r3, r0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	080166c4 	.word	0x080166c4

08010520 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b08e      	sub	sp, #56	; 0x38
 8010524:	af04      	add	r7, sp, #16
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801052a:	4b7a      	ldr	r3, [pc, #488]	; (8010714 <icmp_input+0x1f4>)
 801052c:	689b      	ldr	r3, [r3, #8]
 801052e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	b29b      	uxth	r3, r3
 8010536:	f003 030f 	and.w	r3, r3, #15
 801053a:	b29b      	uxth	r3, r3
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010542:	2b13      	cmp	r3, #19
 8010544:	f240 80d1 	bls.w	80106ea <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	895b      	ldrh	r3, [r3, #10]
 801054c:	2b03      	cmp	r3, #3
 801054e:	f240 80ce 	bls.w	80106ee <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801055c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 80bb 	beq.w	80106dc <icmp_input+0x1bc>
 8010566:	2b08      	cmp	r3, #8
 8010568:	f040 80bb 	bne.w	80106e2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801056c:	4b6a      	ldr	r3, [pc, #424]	; (8010718 <icmp_input+0x1f8>)
 801056e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010570:	4b68      	ldr	r3, [pc, #416]	; (8010714 <icmp_input+0x1f4>)
 8010572:	695b      	ldr	r3, [r3, #20]
 8010574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010578:	2be0      	cmp	r3, #224	; 0xe0
 801057a:	f000 80bf 	beq.w	80106fc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801057e:	4b65      	ldr	r3, [pc, #404]	; (8010714 <icmp_input+0x1f4>)
 8010580:	695b      	ldr	r3, [r3, #20]
 8010582:	4a64      	ldr	r2, [pc, #400]	; (8010714 <icmp_input+0x1f4>)
 8010584:	6812      	ldr	r2, [r2, #0]
 8010586:	4611      	mov	r1, r2
 8010588:	4618      	mov	r0, r3
 801058a:	f000 fbd3 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 801058e:	4603      	mov	r3, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	f040 80b5 	bne.w	8010700 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	891b      	ldrh	r3, [r3, #8]
 801059a:	2b07      	cmp	r3, #7
 801059c:	f240 80a9 	bls.w	80106f2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80105a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105a2:	330e      	adds	r3, #14
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	b21b      	sxth	r3, r3
 80105a8:	4619      	mov	r1, r3
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7f8 fe6a 	bl	8009284 <pbuf_header>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d046      	beq.n	8010644 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	891a      	ldrh	r2, [r3, #8]
 80105ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105bc:	4413      	add	r3, r2
 80105be:	b29b      	uxth	r3, r3
 80105c0:	2200      	movs	r2, #0
 80105c2:	4619      	mov	r1, r3
 80105c4:	2002      	movs	r0, #2
 80105c6:	f7f8 fb09 	bl	8008bdc <pbuf_alloc>
 80105ca:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 8098 	beq.w	8010704 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	895b      	ldrh	r3, [r3, #10]
 80105d8:	461a      	mov	r2, r3
 80105da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105dc:	3308      	adds	r3, #8
 80105de:	429a      	cmp	r2, r3
 80105e0:	d203      	bcs.n	80105ea <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80105e2:	69b8      	ldr	r0, [r7, #24]
 80105e4:	f7f8 fe72 	bl	80092cc <pbuf_free>
        goto icmperr;
 80105e8:	e08d      	b.n	8010706 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105f2:	4618      	mov	r0, r3
 80105f4:	f003 f872 	bl	80136dc <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80105f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105fa:	425b      	negs	r3, r3
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	b21b      	sxth	r3, r3
 8010600:	4619      	mov	r1, r3
 8010602:	69b8      	ldr	r0, [r7, #24]
 8010604:	f7f8 fe3e 	bl	8009284 <pbuf_header>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d009      	beq.n	8010622 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801060e:	4b43      	ldr	r3, [pc, #268]	; (801071c <icmp_input+0x1fc>)
 8010610:	22af      	movs	r2, #175	; 0xaf
 8010612:	4943      	ldr	r1, [pc, #268]	; (8010720 <icmp_input+0x200>)
 8010614:	4843      	ldr	r0, [pc, #268]	; (8010724 <icmp_input+0x204>)
 8010616:	f003 f953 	bl	80138c0 <iprintf>
        pbuf_free(r);
 801061a:	69b8      	ldr	r0, [r7, #24]
 801061c:	f7f8 fe56 	bl	80092cc <pbuf_free>
        goto icmperr;
 8010620:	e071      	b.n	8010706 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8010622:	6879      	ldr	r1, [r7, #4]
 8010624:	69b8      	ldr	r0, [r7, #24]
 8010626:	f7f8 ff83 	bl	8009530 <pbuf_copy>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d003      	beq.n	8010638 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8010630:	69b8      	ldr	r0, [r7, #24]
 8010632:	f7f8 fe4b 	bl	80092cc <pbuf_free>
        goto icmperr;
 8010636:	e066      	b.n	8010706 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f7f8 fe47 	bl	80092cc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	607b      	str	r3, [r7, #4]
 8010642:	e015      	b.n	8010670 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010646:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801064a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801064e:	33f2      	adds	r3, #242	; 0xf2
 8010650:	b29b      	uxth	r3, r3
 8010652:	b21b      	sxth	r3, r3
 8010654:	4619      	mov	r1, r3
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f7f8 fe14 	bl	8009284 <pbuf_header>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d006      	beq.n	8010670 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010662:	4b2e      	ldr	r3, [pc, #184]	; (801071c <icmp_input+0x1fc>)
 8010664:	22c0      	movs	r2, #192	; 0xc0
 8010666:	4930      	ldr	r1, [pc, #192]	; (8010728 <icmp_input+0x208>)
 8010668:	482e      	ldr	r0, [pc, #184]	; (8010724 <icmp_input+0x204>)
 801066a:	f003 f929 	bl	80138c0 <iprintf>
        goto icmperr;
 801066e:	e04a      	b.n	8010706 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8010676:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801067a:	4619      	mov	r1, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7f8 fe01 	bl	8009284 <pbuf_header>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d12b      	bne.n	80106e0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010696:	4b1f      	ldr	r3, [pc, #124]	; (8010714 <icmp_input+0x1f4>)
 8010698:	691a      	ldr	r2, [r3, #16]
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2200      	movs	r2, #0
 80106a2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	2200      	movs	r2, #0
 80106a8:	709a      	strb	r2, [r3, #2]
 80106aa:	2200      	movs	r2, #0
 80106ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	22ff      	movs	r2, #255	; 0xff
 80106b2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	2200      	movs	r2, #0
 80106b8:	729a      	strb	r2, [r3, #10]
 80106ba:	2200      	movs	r2, #0
 80106bc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	9302      	str	r3, [sp, #8]
 80106c2:	2301      	movs	r3, #1
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	2300      	movs	r3, #0
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	23ff      	movs	r3, #255	; 0xff
 80106cc:	2200      	movs	r2, #0
 80106ce:	69f9      	ldr	r1, [r7, #28]
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f000 fa5d 	bl	8010b90 <ip4_output_if>
 80106d6:	4603      	mov	r3, r0
 80106d8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80106da:	e001      	b.n	80106e0 <icmp_input+0x1c0>
    break;
 80106dc:	bf00      	nop
 80106de:	e000      	b.n	80106e2 <icmp_input+0x1c2>
    break;
 80106e0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f7f8 fdf2 	bl	80092cc <pbuf_free>
  return;
 80106e8:	e011      	b.n	801070e <icmp_input+0x1ee>
    goto lenerr;
 80106ea:	bf00      	nop
 80106ec:	e002      	b.n	80106f4 <icmp_input+0x1d4>
    goto lenerr;
 80106ee:	bf00      	nop
 80106f0:	e000      	b.n	80106f4 <icmp_input+0x1d4>
      goto lenerr;
 80106f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7f8 fde9 	bl	80092cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80106fa:	e008      	b.n	801070e <icmp_input+0x1ee>
      goto icmperr;
 80106fc:	bf00      	nop
 80106fe:	e002      	b.n	8010706 <icmp_input+0x1e6>
      goto icmperr;
 8010700:	bf00      	nop
 8010702:	e000      	b.n	8010706 <icmp_input+0x1e6>
        goto icmperr;
 8010704:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7f8 fde0 	bl	80092cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801070c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801070e:	3728      	adds	r7, #40	; 0x28
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	200057cc 	.word	0x200057cc
 8010718:	200057e0 	.word	0x200057e0
 801071c:	0801617c 	.word	0x0801617c
 8010720:	080161b4 	.word	0x080161b4
 8010724:	080161ec 	.word	0x080161ec
 8010728:	08016214 	.word	0x08016214

0801072c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010738:	78fb      	ldrb	r3, [r7, #3]
 801073a:	461a      	mov	r2, r3
 801073c:	2103      	movs	r1, #3
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f814 	bl	801076c <icmp_send_response>
}
 8010744:	bf00      	nop
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	460b      	mov	r3, r1
 8010756:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010758:	78fb      	ldrb	r3, [r7, #3]
 801075a:	461a      	mov	r2, r3
 801075c:	210b      	movs	r1, #11
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f804 	bl	801076c <icmp_send_response>
}
 8010764:	bf00      	nop
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b08c      	sub	sp, #48	; 0x30
 8010770:	af04      	add	r7, sp, #16
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	460b      	mov	r3, r1
 8010776:	70fb      	strb	r3, [r7, #3]
 8010778:	4613      	mov	r3, r2
 801077a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801077c:	2200      	movs	r2, #0
 801077e:	2124      	movs	r1, #36	; 0x24
 8010780:	2001      	movs	r0, #1
 8010782:	f7f8 fa2b 	bl	8008bdc <pbuf_alloc>
 8010786:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d04c      	beq.n	8010828 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	895b      	ldrh	r3, [r3, #10]
 8010792:	2b23      	cmp	r3, #35	; 0x23
 8010794:	d806      	bhi.n	80107a4 <icmp_send_response+0x38>
 8010796:	4b26      	ldr	r3, [pc, #152]	; (8010830 <icmp_send_response+0xc4>)
 8010798:	f240 1261 	movw	r2, #353	; 0x161
 801079c:	4925      	ldr	r1, [pc, #148]	; (8010834 <icmp_send_response+0xc8>)
 801079e:	4826      	ldr	r0, [pc, #152]	; (8010838 <icmp_send_response+0xcc>)
 80107a0:	f003 f88e 	bl	80138c0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	78fa      	ldrb	r2, [r7, #3]
 80107b4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	78ba      	ldrb	r2, [r7, #2]
 80107ba:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2200      	movs	r2, #0
 80107c0:	711a      	strb	r2, [r3, #4]
 80107c2:	2200      	movs	r2, #0
 80107c4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	2200      	movs	r2, #0
 80107ca:	719a      	strb	r2, [r3, #6]
 80107cc:	2200      	movs	r2, #0
 80107ce:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	f103 0008 	add.w	r0, r3, #8
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	221c      	movs	r2, #28
 80107de:	4619      	mov	r1, r3
 80107e0:	f002 ff7c 	bl	80136dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80107ea:	f107 030c 	add.w	r3, r7, #12
 80107ee:	4618      	mov	r0, r3
 80107f0:	f000 f824 	bl	801083c <ip4_route>
 80107f4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d011      	beq.n	8010820 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	2200      	movs	r2, #0
 8010800:	709a      	strb	r2, [r3, #2]
 8010802:	2200      	movs	r2, #0
 8010804:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010806:	f107 020c 	add.w	r2, r7, #12
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	9302      	str	r3, [sp, #8]
 801080e:	2301      	movs	r3, #1
 8010810:	9301      	str	r3, [sp, #4]
 8010812:	2300      	movs	r3, #0
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	23ff      	movs	r3, #255	; 0xff
 8010818:	2100      	movs	r1, #0
 801081a:	69f8      	ldr	r0, [r7, #28]
 801081c:	f000 f9b8 	bl	8010b90 <ip4_output_if>
  }
  pbuf_free(q);
 8010820:	69f8      	ldr	r0, [r7, #28]
 8010822:	f7f8 fd53 	bl	80092cc <pbuf_free>
 8010826:	e000      	b.n	801082a <icmp_send_response+0xbe>
    return;
 8010828:	bf00      	nop
}
 801082a:	3720      	adds	r7, #32
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	0801617c 	.word	0x0801617c
 8010834:	08016248 	.word	0x08016248
 8010838:	080161ec 	.word	0x080161ec

0801083c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010844:	4b30      	ldr	r3, [pc, #192]	; (8010908 <ip4_route+0xcc>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	e036      	b.n	80108ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010852:	f003 0301 	and.w	r3, r3, #1
 8010856:	b2db      	uxtb	r3, r3
 8010858:	2b00      	cmp	r3, #0
 801085a:	d02b      	beq.n	80108b4 <ip4_route+0x78>
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010862:	089b      	lsrs	r3, r3, #2
 8010864:	f003 0301 	and.w	r3, r3, #1
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	d022      	beq.n	80108b4 <ip4_route+0x78>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	3304      	adds	r3, #4
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d01d      	beq.n	80108b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	3304      	adds	r3, #4
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	405a      	eors	r2, r3
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	3308      	adds	r3, #8
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4013      	ands	r3, r2
 801088c:	2b00      	cmp	r3, #0
 801088e:	d101      	bne.n	8010894 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	e033      	b.n	80108fc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801089a:	f003 0302 	and.w	r3, r3, #2
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d108      	bne.n	80108b4 <ip4_route+0x78>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	330c      	adds	r3, #12
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d101      	bne.n	80108b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	e023      	b.n	80108fc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	60fb      	str	r3, [r7, #12]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1c5      	bne.n	801084c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80108c0:	4b12      	ldr	r3, [pc, #72]	; (801090c <ip4_route+0xd0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d015      	beq.n	80108f4 <ip4_route+0xb8>
 80108c8:	4b10      	ldr	r3, [pc, #64]	; (801090c <ip4_route+0xd0>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80108d0:	f003 0301 	and.w	r3, r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00d      	beq.n	80108f4 <ip4_route+0xb8>
 80108d8:	4b0c      	ldr	r3, [pc, #48]	; (801090c <ip4_route+0xd0>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80108e0:	f003 0304 	and.w	r3, r3, #4
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d005      	beq.n	80108f4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80108e8:	4b08      	ldr	r3, [pc, #32]	; (801090c <ip4_route+0xd0>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	3304      	adds	r3, #4
 80108ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80108f4:	2300      	movs	r3, #0
 80108f6:	e001      	b.n	80108fc <ip4_route+0xc0>
  }

  return netif_default;
 80108f8:	4b04      	ldr	r3, [pc, #16]	; (801090c <ip4_route+0xd0>)
 80108fa:	681b      	ldr	r3, [r3, #0]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	bc80      	pop	{r7}
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	20008dac 	.word	0x20008dac
 801090c:	20008db0 	.word	0x20008db0

08010910 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	091b      	lsrs	r3, r3, #4
 8010926:	b2db      	uxtb	r3, r3
 8010928:	2b04      	cmp	r3, #4
 801092a:	d004      	beq.n	8010936 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7f8 fccd 	bl	80092cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010932:	2300      	movs	r3, #0
 8010934:	e124      	b.n	8010b80 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	b29b      	uxth	r3, r3
 801093c:	f003 030f 	and.w	r3, r3, #15
 8010940:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8010942:	897b      	ldrh	r3, [r7, #10]
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	885b      	ldrh	r3, [r3, #2]
 801094c:	b29b      	uxth	r3, r3
 801094e:	4618      	mov	r0, r3
 8010950:	f7f7 f8e9 	bl	8007b26 <lwip_htons>
 8010954:	4603      	mov	r3, r0
 8010956:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	891b      	ldrh	r3, [r3, #8]
 801095c:	893a      	ldrh	r2, [r7, #8]
 801095e:	429a      	cmp	r2, r3
 8010960:	d204      	bcs.n	801096c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8010962:	893b      	ldrh	r3, [r7, #8]
 8010964:	4619      	mov	r1, r3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7f8 fb3c 	bl	8008fe4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	895b      	ldrh	r3, [r3, #10]
 8010970:	897a      	ldrh	r2, [r7, #10]
 8010972:	429a      	cmp	r2, r3
 8010974:	d807      	bhi.n	8010986 <ip4_input+0x76>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	891b      	ldrh	r3, [r3, #8]
 801097a:	893a      	ldrh	r2, [r7, #8]
 801097c:	429a      	cmp	r2, r3
 801097e:	d802      	bhi.n	8010986 <ip4_input+0x76>
 8010980:	897b      	ldrh	r3, [r7, #10]
 8010982:	2b13      	cmp	r3, #19
 8010984:	d804      	bhi.n	8010990 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7f8 fca0 	bl	80092cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801098c:	2300      	movs	r3, #0
 801098e:	e0f7      	b.n	8010b80 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	4a7c      	ldr	r2, [pc, #496]	; (8010b88 <ip4_input+0x278>)
 8010996:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	4a7a      	ldr	r2, [pc, #488]	; (8010b88 <ip4_input+0x278>)
 801099e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80109a0:	4b79      	ldr	r3, [pc, #484]	; (8010b88 <ip4_input+0x278>)
 80109a2:	695b      	ldr	r3, [r3, #20]
 80109a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109a8:	2be0      	cmp	r3, #224	; 0xe0
 80109aa:	d112      	bne.n	80109d2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80109b2:	f003 0301 	and.w	r3, r3, #1
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d007      	beq.n	80109cc <ip4_input+0xbc>
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	3304      	adds	r3, #4
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d002      	beq.n	80109cc <ip4_input+0xbc>
      netif = inp;
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	613b      	str	r3, [r7, #16]
 80109ca:	e041      	b.n	8010a50 <ip4_input+0x140>
    } else {
      netif = NULL;
 80109cc:	2300      	movs	r3, #0
 80109ce:	613b      	str	r3, [r7, #16]
 80109d0:	e03e      	b.n	8010a50 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80109d2:	2301      	movs	r3, #1
 80109d4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80109e0:	f003 0301 	and.w	r3, r3, #1
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d014      	beq.n	8010a14 <ip4_input+0x104>
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	3304      	adds	r3, #4
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00f      	beq.n	8010a14 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80109f4:	4b64      	ldr	r3, [pc, #400]	; (8010b88 <ip4_input+0x278>)
 80109f6:	695a      	ldr	r2, [r3, #20]
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	3304      	adds	r3, #4
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d026      	beq.n	8010a50 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010a02:	4b61      	ldr	r3, [pc, #388]	; (8010b88 <ip4_input+0x278>)
 8010a04:	695b      	ldr	r3, [r3, #20]
 8010a06:	6939      	ldr	r1, [r7, #16]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 f993 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 8010a0e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d11d      	bne.n	8010a50 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00d      	beq.n	8010a36 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8010a1a:	4b5b      	ldr	r3, [pc, #364]	; (8010b88 <ip4_input+0x278>)
 8010a1c:	695b      	ldr	r3, [r3, #20]
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b7f      	cmp	r3, #127	; 0x7f
 8010a22:	d102      	bne.n	8010a2a <ip4_input+0x11a>
          netif = NULL;
 8010a24:	2300      	movs	r3, #0
 8010a26:	613b      	str	r3, [r7, #16]
          break;
 8010a28:	e012      	b.n	8010a50 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8010a2e:	4b57      	ldr	r3, [pc, #348]	; (8010b8c <ip4_input+0x27c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	613b      	str	r3, [r7, #16]
 8010a34:	e002      	b.n	8010a3c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d102      	bne.n	8010a4a <ip4_input+0x13a>
        netif = netif->next;
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1c4      	bne.n	80109da <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010a50:	4b4d      	ldr	r3, [pc, #308]	; (8010b88 <ip4_input+0x278>)
 8010a52:	691b      	ldr	r3, [r3, #16]
 8010a54:	6839      	ldr	r1, [r7, #0]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 f96c 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d105      	bne.n	8010a6e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010a62:	4b49      	ldr	r3, [pc, #292]	; (8010b88 <ip4_input+0x278>)
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010a6a:	2be0      	cmp	r3, #224	; 0xe0
 8010a6c:	d104      	bne.n	8010a78 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7f8 fc2c 	bl	80092cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	e083      	b.n	8010b80 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d104      	bne.n	8010a88 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7f8 fc24 	bl	80092cc <pbuf_free>
    return ERR_OK;
 8010a84:	2300      	movs	r3, #0
 8010a86:	e07b      	b.n	8010b80 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	88db      	ldrh	r3, [r3, #6]
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	461a      	mov	r2, r3
 8010a90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010a94:	4013      	ands	r3, r2
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00b      	beq.n	8010ab2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fc8e 	bl	80113bc <ip4_reass>
 8010aa0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d101      	bne.n	8010aac <ip4_input+0x19c>
      return ERR_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e069      	b.n	8010b80 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010ab2:	4a35      	ldr	r2, [pc, #212]	; (8010b88 <ip4_input+0x278>)
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010ab8:	4a33      	ldr	r2, [pc, #204]	; (8010b88 <ip4_input+0x278>)
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010abe:	4a32      	ldr	r2, [pc, #200]	; (8010b88 <ip4_input+0x278>)
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	f003 030f 	and.w	r3, r3, #15
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	009b      	lsls	r3, r3, #2
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	4b2c      	ldr	r3, [pc, #176]	; (8010b88 <ip4_input+0x278>)
 8010ad6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8010ad8:	897b      	ldrh	r3, [r7, #10]
 8010ada:	425b      	negs	r3, r3
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	b21b      	sxth	r3, r3
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7f8 fbce 	bl	8009284 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	7a5b      	ldrb	r3, [r3, #9]
 8010aec:	2b11      	cmp	r3, #17
 8010aee:	d006      	beq.n	8010afe <ip4_input+0x1ee>
 8010af0:	2b11      	cmp	r3, #17
 8010af2:	dc13      	bgt.n	8010b1c <ip4_input+0x20c>
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d00c      	beq.n	8010b12 <ip4_input+0x202>
 8010af8:	2b06      	cmp	r3, #6
 8010afa:	d005      	beq.n	8010b08 <ip4_input+0x1f8>
 8010afc:	e00e      	b.n	8010b1c <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8010afe:	6839      	ldr	r1, [r7, #0]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7fe fb3f 	bl	800f184 <udp_input>
      break;
 8010b06:	e028      	b.n	8010b5a <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8010b08:	6839      	ldr	r1, [r7, #0]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7fa fbc0 	bl	800b290 <tcp_input>
      break;
 8010b10:	e023      	b.n	8010b5a <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8010b12:	6839      	ldr	r1, [r7, #0]
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff fd03 	bl	8010520 <icmp_input>
      break;
 8010b1a:	e01e      	b.n	8010b5a <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010b1c:	4b1a      	ldr	r3, [pc, #104]	; (8010b88 <ip4_input+0x278>)
 8010b1e:	695b      	ldr	r3, [r3, #20]
 8010b20:	6939      	ldr	r1, [r7, #16]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 f906 	bl	8010d34 <ip4_addr_isbroadcast_u32>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d112      	bne.n	8010b54 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010b2e:	4b16      	ldr	r3, [pc, #88]	; (8010b88 <ip4_input+0x278>)
 8010b30:	695b      	ldr	r3, [r3, #20]
 8010b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010b36:	2be0      	cmp	r3, #224	; 0xe0
 8010b38:	d00c      	beq.n	8010b54 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8010b3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7f8 fbb1 	bl	80092a8 <pbuf_header_force>
        p->payload = iphdr;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	697a      	ldr	r2, [r7, #20]
 8010b4a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010b4c:	2102      	movs	r1, #2
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff fdec 	bl	801072c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7f8 fbb9 	bl	80092cc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010b5a:	4b0b      	ldr	r3, [pc, #44]	; (8010b88 <ip4_input+0x278>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010b60:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <ip4_input+0x278>)
 8010b62:	2200      	movs	r2, #0
 8010b64:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010b66:	4b08      	ldr	r3, [pc, #32]	; (8010b88 <ip4_input+0x278>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <ip4_input+0x278>)
 8010b6e:	2200      	movs	r2, #0
 8010b70:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <ip4_input+0x278>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010b78:	4b03      	ldr	r3, [pc, #12]	; (8010b88 <ip4_input+0x278>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3718      	adds	r7, #24
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	200057cc 	.word	0x200057cc
 8010b8c:	20008dac 	.word	0x20008dac

08010b90 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b08a      	sub	sp, #40	; 0x28
 8010b94:	af04      	add	r7, sp, #16
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	607a      	str	r2, [r7, #4]
 8010b9c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d009      	beq.n	8010bbc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d003      	beq.n	8010bb6 <ip4_output_if+0x26>
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d102      	bne.n	8010bbc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb8:	3304      	adds	r3, #4
 8010bba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010bbc:	78fa      	ldrb	r2, [r7, #3]
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	9302      	str	r3, [sp, #8]
 8010bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	6979      	ldr	r1, [r7, #20]
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f000 f805 	bl	8010be4 <ip4_output_if_src>
 8010bda:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3718      	adds	r7, #24
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	607a      	str	r2, [r7, #4]
 8010bf0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	89db      	ldrh	r3, [r3, #14]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d006      	beq.n	8010c08 <ip4_output_if_src+0x24>
 8010bfa:	4b48      	ldr	r3, [pc, #288]	; (8010d1c <ip4_output_if_src+0x138>)
 8010bfc:	f240 3233 	movw	r2, #819	; 0x333
 8010c00:	4947      	ldr	r1, [pc, #284]	; (8010d20 <ip4_output_if_src+0x13c>)
 8010c02:	4848      	ldr	r0, [pc, #288]	; (8010d24 <ip4_output_if_src+0x140>)
 8010c04:	f002 fe5c 	bl	80138c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d060      	beq.n	8010cd0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010c0e:	2314      	movs	r3, #20
 8010c10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8010c12:	2114      	movs	r1, #20
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7f8 fb35 	bl	8009284 <pbuf_header>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d002      	beq.n	8010c26 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010c20:	f06f 0301 	mvn.w	r3, #1
 8010c24:	e075      	b.n	8010d12 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	895b      	ldrh	r3, [r3, #10]
 8010c30:	2b13      	cmp	r3, #19
 8010c32:	d806      	bhi.n	8010c42 <ip4_output_if_src+0x5e>
 8010c34:	4b39      	ldr	r3, [pc, #228]	; (8010d1c <ip4_output_if_src+0x138>)
 8010c36:	f44f 7258 	mov.w	r2, #864	; 0x360
 8010c3a:	493b      	ldr	r1, [pc, #236]	; (8010d28 <ip4_output_if_src+0x144>)
 8010c3c:	4839      	ldr	r0, [pc, #228]	; (8010d24 <ip4_output_if_src+0x140>)
 8010c3e:	f002 fe3f 	bl	80138c0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	78fa      	ldrb	r2, [r7, #3]
 8010c46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010c4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010c58:	8b7b      	ldrh	r3, [r7, #26]
 8010c5a:	089b      	lsrs	r3, r3, #2
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c64:	b2da      	uxtb	r2, r3
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010c70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	891b      	ldrh	r3, [r3, #8]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7f6 ff55 	bl	8007b26 <lwip_htons>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	461a      	mov	r2, r3
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	2200      	movs	r2, #0
 8010c88:	719a      	strb	r2, [r3, #6]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010c8e:	4b27      	ldr	r3, [pc, #156]	; (8010d2c <ip4_output_if_src+0x148>)
 8010c90:	881b      	ldrh	r3, [r3, #0]
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7f6 ff47 	bl	8007b26 <lwip_htons>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010ca0:	4b22      	ldr	r3, [pc, #136]	; (8010d2c <ip4_output_if_src+0x148>)
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	4b20      	ldr	r3, [pc, #128]	; (8010d2c <ip4_output_if_src+0x148>)
 8010caa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d104      	bne.n	8010cbc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010cb2:	4b1f      	ldr	r3, [pc, #124]	; (8010d30 <ip4_output_if_src+0x14c>)
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	60da      	str	r2, [r3, #12]
 8010cba:	e003      	b.n	8010cc4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	729a      	strb	r2, [r3, #10]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	72da      	strb	r2, [r3, #11]
 8010cce:	e008      	b.n	8010ce2 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010cdc:	f107 0314 	add.w	r3, r7, #20
 8010ce0:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00c      	beq.n	8010d04 <ip4_output_if_src+0x120>
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	891a      	ldrh	r2, [r3, #8]
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d906      	bls.n	8010d04 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f000 fd0a 	bl	8011714 <ip4_frag>
 8010d00:	4603      	mov	r3, r0
 8010d02:	e006      	b.n	8010d12 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	695b      	ldr	r3, [r3, #20]
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	68f9      	ldr	r1, [r7, #12]
 8010d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d0e:	4798      	blx	r3
 8010d10:	4603      	mov	r3, r0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3720      	adds	r7, #32
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	08016274 	.word	0x08016274
 8010d20:	080162a8 	.word	0x080162a8
 8010d24:	080162b4 	.word	0x080162b4
 8010d28:	080162dc 	.word	0x080162dc
 8010d2c:	20008f0a 	.word	0x20008f0a
 8010d30:	080166c0 	.word	0x080166c0

08010d34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d48:	d002      	beq.n	8010d50 <ip4_addr_isbroadcast_u32+0x1c>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d101      	bne.n	8010d54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010d50:	2301      	movs	r3, #1
 8010d52:	e02a      	b.n	8010daa <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010d5a:	f003 0302 	and.w	r3, r3, #2
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	e021      	b.n	8010daa <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	3304      	adds	r3, #4
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d101      	bne.n	8010d76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	e019      	b.n	8010daa <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	3304      	adds	r3, #4
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	405a      	eors	r2, r3
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	3308      	adds	r3, #8
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4013      	ands	r3, r2
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10d      	bne.n	8010da8 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	3308      	adds	r3, #8
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	43da      	mvns	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	3308      	adds	r3, #8
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d101      	bne.n	8010da8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010da4:	2301      	movs	r3, #1
 8010da6:	e000      	b.n	8010daa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010da8:	2300      	movs	r3, #0
  }
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bc80      	pop	{r7}
 8010db2:	4770      	bx	lr

08010db4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010dbe:	4b12      	ldr	r3, [pc, #72]	; (8010e08 <ip_reass_tmr+0x54>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010dc4:	e018      	b.n	8010df8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	7fdb      	ldrb	r3, [r3, #31]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00b      	beq.n	8010de6 <ip_reass_tmr+0x32>
      r->timer--;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	7fdb      	ldrb	r3, [r3, #31]
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	60fb      	str	r3, [r7, #12]
 8010de4:	e008      	b.n	8010df8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010df0:	68b9      	ldr	r1, [r7, #8]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f80a 	bl	8010e0c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1e3      	bne.n	8010dc6 <ip_reass_tmr+0x12>
     }
   }
}
 8010dfe:	bf00      	nop
 8010e00:	bf00      	nop
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20008f0c 	.word	0x20008f0c

08010e0c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d105      	bne.n	8010e2e <ip_reass_free_complete_datagram+0x22>
 8010e22:	4b45      	ldr	r3, [pc, #276]	; (8010f38 <ip_reass_free_complete_datagram+0x12c>)
 8010e24:	22ab      	movs	r2, #171	; 0xab
 8010e26:	4945      	ldr	r1, [pc, #276]	; (8010f3c <ip_reass_free_complete_datagram+0x130>)
 8010e28:	4845      	ldr	r0, [pc, #276]	; (8010f40 <ip_reass_free_complete_datagram+0x134>)
 8010e2a:	f002 fd49 	bl	80138c0 <iprintf>
  if (prev != NULL) {
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d00a      	beq.n	8010e4a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d005      	beq.n	8010e4a <ip_reass_free_complete_datagram+0x3e>
 8010e3e:	4b3e      	ldr	r3, [pc, #248]	; (8010f38 <ip_reass_free_complete_datagram+0x12c>)
 8010e40:	22ad      	movs	r2, #173	; 0xad
 8010e42:	4940      	ldr	r1, [pc, #256]	; (8010f44 <ip_reass_free_complete_datagram+0x138>)
 8010e44:	483e      	ldr	r0, [pc, #248]	; (8010f40 <ip_reass_free_complete_datagram+0x134>)
 8010e46:	f002 fd3b 	bl	80138c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	889b      	ldrh	r3, [r3, #4]
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d12a      	bne.n	8010eb2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010e6a:	69bb      	ldr	r3, [r7, #24]
 8010e6c:	6858      	ldr	r0, [r3, #4]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	3308      	adds	r3, #8
 8010e72:	2214      	movs	r2, #20
 8010e74:	4619      	mov	r1, r3
 8010e76:	f002 fc31 	bl	80136dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	69b8      	ldr	r0, [r7, #24]
 8010e7e:	f7ff fc65 	bl	801074c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010e82:	69b8      	ldr	r0, [r7, #24]
 8010e84:	f7f8 fab6 	bl	80093f4 <pbuf_clen>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010e8c:	8bfa      	ldrh	r2, [r7, #30]
 8010e8e:	8a7b      	ldrh	r3, [r7, #18]
 8010e90:	4413      	add	r3, r2
 8010e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e96:	db05      	blt.n	8010ea4 <ip_reass_free_complete_datagram+0x98>
 8010e98:	4b27      	ldr	r3, [pc, #156]	; (8010f38 <ip_reass_free_complete_datagram+0x12c>)
 8010e9a:	22bc      	movs	r2, #188	; 0xbc
 8010e9c:	492a      	ldr	r1, [pc, #168]	; (8010f48 <ip_reass_free_complete_datagram+0x13c>)
 8010e9e:	4828      	ldr	r0, [pc, #160]	; (8010f40 <ip_reass_free_complete_datagram+0x134>)
 8010ea0:	f002 fd0e 	bl	80138c0 <iprintf>
    pbufs_freed += clen;
 8010ea4:	8bfa      	ldrh	r2, [r7, #30]
 8010ea6:	8a7b      	ldrh	r3, [r7, #18]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010eac:	69b8      	ldr	r0, [r7, #24]
 8010eae:	f7f8 fa0d 	bl	80092cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010eb8:	e01f      	b.n	8010efa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7f8 fa92 	bl	80093f4 <pbuf_clen>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010ed4:	8bfa      	ldrh	r2, [r7, #30]
 8010ed6:	8a7b      	ldrh	r3, [r7, #18]
 8010ed8:	4413      	add	r3, r2
 8010eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ede:	db05      	blt.n	8010eec <ip_reass_free_complete_datagram+0xe0>
 8010ee0:	4b15      	ldr	r3, [pc, #84]	; (8010f38 <ip_reass_free_complete_datagram+0x12c>)
 8010ee2:	22cc      	movs	r2, #204	; 0xcc
 8010ee4:	4918      	ldr	r1, [pc, #96]	; (8010f48 <ip_reass_free_complete_datagram+0x13c>)
 8010ee6:	4816      	ldr	r0, [pc, #88]	; (8010f40 <ip_reass_free_complete_datagram+0x134>)
 8010ee8:	f002 fcea 	bl	80138c0 <iprintf>
    pbufs_freed += clen;
 8010eec:	8bfa      	ldrh	r2, [r7, #30]
 8010eee:	8a7b      	ldrh	r3, [r7, #18]
 8010ef0:	4413      	add	r3, r2
 8010ef2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f7f8 f9e9 	bl	80092cc <pbuf_free>
  while (p != NULL) {
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d1dc      	bne.n	8010eba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010f00:	6839      	ldr	r1, [r7, #0]
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f8c2 	bl	801108c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8010f08:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <ip_reass_free_complete_datagram+0x140>)
 8010f0a:	881b      	ldrh	r3, [r3, #0]
 8010f0c:	8bfa      	ldrh	r2, [r7, #30]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d905      	bls.n	8010f1e <ip_reass_free_complete_datagram+0x112>
 8010f12:	4b09      	ldr	r3, [pc, #36]	; (8010f38 <ip_reass_free_complete_datagram+0x12c>)
 8010f14:	22d2      	movs	r2, #210	; 0xd2
 8010f16:	490e      	ldr	r1, [pc, #56]	; (8010f50 <ip_reass_free_complete_datagram+0x144>)
 8010f18:	4809      	ldr	r0, [pc, #36]	; (8010f40 <ip_reass_free_complete_datagram+0x134>)
 8010f1a:	f002 fcd1 	bl	80138c0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8010f1e:	4b0b      	ldr	r3, [pc, #44]	; (8010f4c <ip_reass_free_complete_datagram+0x140>)
 8010f20:	881a      	ldrh	r2, [r3, #0]
 8010f22:	8bfb      	ldrh	r3, [r7, #30]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	4b08      	ldr	r3, [pc, #32]	; (8010f4c <ip_reass_free_complete_datagram+0x140>)
 8010f2a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010f2c:	8bfb      	ldrh	r3, [r7, #30]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3720      	adds	r7, #32
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	0801630c 	.word	0x0801630c
 8010f3c:	08016348 	.word	0x08016348
 8010f40:	08016354 	.word	0x08016354
 8010f44:	0801637c 	.word	0x0801637c
 8010f48:	08016390 	.word	0x08016390
 8010f4c:	20008f10 	.word	0x20008f10
 8010f50:	080163b0 	.word	0x080163b0

08010f54 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b08a      	sub	sp, #40	; 0x28
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010f62:	2300      	movs	r3, #0
 8010f64:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010f66:	2300      	movs	r3, #0
 8010f68:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010f72:	4b28      	ldr	r3, [pc, #160]	; (8011014 <ip_reass_remove_oldest_datagram+0xc0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010f78:	e030      	b.n	8010fdc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	695a      	ldr	r2, [r3, #20]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d10c      	bne.n	8010fa0 <ip_reass_remove_oldest_datagram+0x4c>
 8010f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f88:	699a      	ldr	r2, [r3, #24]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d106      	bne.n	8010fa0 <ip_reass_remove_oldest_datagram+0x4c>
 8010f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f94:	899a      	ldrh	r2, [r3, #12]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	889b      	ldrh	r3, [r3, #4]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d014      	beq.n	8010fca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010fa6:	6a3b      	ldr	r3, [r7, #32]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d104      	bne.n	8010fb6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	61bb      	str	r3, [r7, #24]
 8010fb4:	e009      	b.n	8010fca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	7fda      	ldrb	r2, [r3, #31]
 8010fba:	6a3b      	ldr	r3, [r7, #32]
 8010fbc:	7fdb      	ldrb	r3, [r3, #31]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d803      	bhi.n	8010fca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1cb      	bne.n	8010f7a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010fe2:	6a3b      	ldr	r3, [r7, #32]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d008      	beq.n	8010ffa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010fe8:	69b9      	ldr	r1, [r7, #24]
 8010fea:	6a38      	ldr	r0, [r7, #32]
 8010fec:	f7ff ff0e 	bl	8010e0c <ip_reass_free_complete_datagram>
 8010ff0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010ff2:	697a      	ldr	r2, [r7, #20]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010ffa:	697a      	ldr	r2, [r7, #20]
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	da02      	bge.n	8011008 <ip_reass_remove_oldest_datagram+0xb4>
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	2b01      	cmp	r3, #1
 8011006:	dcac      	bgt.n	8010f62 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011008:	697b      	ldr	r3, [r7, #20]
}
 801100a:	4618      	mov	r0, r3
 801100c:	3728      	adds	r7, #40	; 0x28
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	20008f0c 	.word	0x20008f0c

08011018 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011022:	2004      	movs	r0, #4
 8011024:	f7f7 fbc8 	bl	80087b8 <memp_malloc>
 8011028:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d110      	bne.n	8011052 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7ff ff8e 	bl	8010f54 <ip_reass_remove_oldest_datagram>
 8011038:	4602      	mov	r2, r0
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	4293      	cmp	r3, r2
 801103e:	dc03      	bgt.n	8011048 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011040:	2004      	movs	r0, #4
 8011042:	f7f7 fbb9 	bl	80087b8 <memp_malloc>
 8011046:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d101      	bne.n	8011052 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801104e:	2300      	movs	r3, #0
 8011050:	e016      	b.n	8011080 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011052:	2220      	movs	r2, #32
 8011054:	2100      	movs	r1, #0
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f002 fb4e 	bl	80136f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2203      	movs	r2, #3
 8011060:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011062:	4b09      	ldr	r3, [pc, #36]	; (8011088 <ip_reass_enqueue_new_datagram+0x70>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801106a:	4a07      	ldr	r2, [pc, #28]	; (8011088 <ip_reass_enqueue_new_datagram+0x70>)
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	3308      	adds	r3, #8
 8011074:	2214      	movs	r2, #20
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	f002 fb2f 	bl	80136dc <memcpy>
  return ipr;
 801107e:	68fb      	ldr	r3, [r7, #12]
}
 8011080:	4618      	mov	r0, r3
 8011082:	3710      	adds	r7, #16
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	20008f0c 	.word	0x20008f0c

0801108c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011096:	4b10      	ldr	r3, [pc, #64]	; (80110d8 <ip_reass_dequeue_datagram+0x4c>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	429a      	cmp	r2, r3
 801109e:	d104      	bne.n	80110aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a0c      	ldr	r2, [pc, #48]	; (80110d8 <ip_reass_dequeue_datagram+0x4c>)
 80110a6:	6013      	str	r3, [r2, #0]
 80110a8:	e00d      	b.n	80110c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d106      	bne.n	80110be <ip_reass_dequeue_datagram+0x32>
 80110b0:	4b0a      	ldr	r3, [pc, #40]	; (80110dc <ip_reass_dequeue_datagram+0x50>)
 80110b2:	f240 1245 	movw	r2, #325	; 0x145
 80110b6:	490a      	ldr	r1, [pc, #40]	; (80110e0 <ip_reass_dequeue_datagram+0x54>)
 80110b8:	480a      	ldr	r0, [pc, #40]	; (80110e4 <ip_reass_dequeue_datagram+0x58>)
 80110ba:	f002 fc01 	bl	80138c0 <iprintf>
    prev->next = ipr->next;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80110c6:	6879      	ldr	r1, [r7, #4]
 80110c8:	2004      	movs	r0, #4
 80110ca:	f7f7 fbc1 	bl	8008850 <memp_free>
}
 80110ce:	bf00      	nop
 80110d0:	3708      	adds	r7, #8
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	20008f0c 	.word	0x20008f0c
 80110dc:	0801630c 	.word	0x0801630c
 80110e0:	080163cc 	.word	0x080163cc
 80110e4:	08016354 	.word	0x08016354

080110e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b08c      	sub	sp, #48	; 0x30
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80110f4:	2300      	movs	r3, #0
 80110f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80110f8:	2301      	movs	r3, #1
 80110fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	885b      	ldrh	r3, [r3, #2]
 8011106:	b29b      	uxth	r3, r3
 8011108:	4618      	mov	r0, r3
 801110a:	f7f6 fd0c 	bl	8007b26 <lwip_htons>
 801110e:	4603      	mov	r3, r0
 8011110:	461a      	mov	r2, r3
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	b29b      	uxth	r3, r3
 8011118:	f003 030f 	and.w	r3, r3, #15
 801111c:	b29b      	uxth	r3, r3
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	b29b      	uxth	r3, r3
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	88db      	ldrh	r3, [r3, #6]
 801112a:	b29b      	uxth	r3, r3
 801112c:	4618      	mov	r0, r3
 801112e:	f7f6 fcfa 	bl	8007b26 <lwip_htons>
 8011132:	4603      	mov	r3, r0
 8011134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011138:	b29b      	uxth	r3, r3
 801113a:	00db      	lsls	r3, r3, #3
 801113c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011146:	2200      	movs	r2, #0
 8011148:	701a      	strb	r2, [r3, #0]
 801114a:	2200      	movs	r2, #0
 801114c:	705a      	strb	r2, [r3, #1]
 801114e:	2200      	movs	r2, #0
 8011150:	709a      	strb	r2, [r3, #2]
 8011152:	2200      	movs	r2, #0
 8011154:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011158:	8b3a      	ldrh	r2, [r7, #24]
 801115a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801115c:	8b3a      	ldrh	r2, [r7, #24]
 801115e:	8b7b      	ldrh	r3, [r7, #26]
 8011160:	4413      	add	r3, r2
 8011162:	b29a      	uxth	r2, r3
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	627b      	str	r3, [r7, #36]	; 0x24
 801116e:	e061      	b.n	8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8011176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011178:	889b      	ldrh	r3, [r3, #4]
 801117a:	b29a      	uxth	r2, r3
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	889b      	ldrh	r3, [r3, #4]
 8011180:	b29b      	uxth	r3, r3
 8011182:	429a      	cmp	r2, r3
 8011184:	d232      	bcs.n	80111ec <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801118a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118e:	2b00      	cmp	r3, #0
 8011190:	d01f      	beq.n	80111d2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011194:	889b      	ldrh	r3, [r3, #4]
 8011196:	b29a      	uxth	r2, r3
 8011198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119a:	88db      	ldrh	r3, [r3, #6]
 801119c:	b29b      	uxth	r3, r3
 801119e:	429a      	cmp	r2, r3
 80111a0:	f0c0 80e3 	bcc.w	801136a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	88db      	ldrh	r3, [r3, #6]
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	889b      	ldrh	r3, [r3, #4]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	429a      	cmp	r2, r3
 80111b2:	f200 80da 	bhi.w	801136a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80111b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80111bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111be:	88db      	ldrh	r3, [r3, #6]
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c4:	889b      	ldrh	r3, [r3, #4]
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d037      	beq.n	801123c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80111d0:	e034      	b.n	801123c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80111d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d4:	88db      	ldrh	r3, [r3, #6]
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	889b      	ldrh	r3, [r3, #4]
 80111dc:	b29b      	uxth	r3, r3
 80111de:	429a      	cmp	r2, r3
 80111e0:	f200 80c5 	bhi.w	801136e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	605a      	str	r2, [r3, #4]
      break;
 80111ea:	e027      	b.n	801123c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	889b      	ldrh	r3, [r3, #4]
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	889b      	ldrh	r3, [r3, #4]
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	429a      	cmp	r2, r3
 80111fa:	f000 80ba 	beq.w	8011372 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80111fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011200:	889b      	ldrh	r3, [r3, #4]
 8011202:	b29a      	uxth	r2, r3
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	88db      	ldrh	r3, [r3, #6]
 8011208:	b29b      	uxth	r3, r3
 801120a:	429a      	cmp	r2, r3
 801120c:	f0c0 80b3 	bcc.w	8011376 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011212:	2b00      	cmp	r3, #0
 8011214:	d009      	beq.n	801122a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8011216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011218:	88db      	ldrh	r3, [r3, #6]
 801121a:	b29a      	uxth	r2, r3
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	889b      	ldrh	r3, [r3, #4]
 8011220:	b29b      	uxth	r3, r3
 8011222:	429a      	cmp	r2, r3
 8011224:	d001      	beq.n	801122a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011226:	2300      	movs	r3, #0
 8011228:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	2b00      	cmp	r3, #0
 8011238:	d19a      	bne.n	8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801123a:	e000      	b.n	801123e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801123c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	2b00      	cmp	r3, #0
 8011242:	d12d      	bne.n	80112a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8011244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011246:	2b00      	cmp	r3, #0
 8011248:	d01c      	beq.n	8011284 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124c:	88db      	ldrh	r3, [r3, #6]
 801124e:	b29a      	uxth	r2, r3
 8011250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011252:	889b      	ldrh	r3, [r3, #4]
 8011254:	b29b      	uxth	r3, r3
 8011256:	429a      	cmp	r2, r3
 8011258:	d906      	bls.n	8011268 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801125a:	4b51      	ldr	r3, [pc, #324]	; (80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801125c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011260:	4950      	ldr	r1, [pc, #320]	; (80113a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011262:	4851      	ldr	r0, [pc, #324]	; (80113a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011264:	f002 fb2c 	bl	80138c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011270:	88db      	ldrh	r3, [r3, #6]
 8011272:	b29a      	uxth	r2, r3
 8011274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011276:	889b      	ldrh	r3, [r3, #4]
 8011278:	b29b      	uxth	r3, r3
 801127a:	429a      	cmp	r2, r3
 801127c:	d010      	beq.n	80112a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801127e:	2300      	movs	r3, #0
 8011280:	623b      	str	r3, [r7, #32]
 8011282:	e00d      	b.n	80112a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d006      	beq.n	801129a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801128c:	4b44      	ldr	r3, [pc, #272]	; (80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801128e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8011292:	4946      	ldr	r1, [pc, #280]	; (80113ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011294:	4844      	ldr	r0, [pc, #272]	; (80113a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011296:	f002 fb13 	bl	80138c0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d105      	bne.n	80112b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	7f9b      	ldrb	r3, [r3, #30]
 80112aa:	f003 0301 	and.w	r3, r3, #1
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d059      	beq.n	8011366 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d04f      	beq.n	8011358 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d006      	beq.n	80112ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	889b      	ldrh	r3, [r3, #4]
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80112ce:	2300      	movs	r3, #0
 80112d0:	623b      	str	r3, [r7, #32]
 80112d2:	e041      	b.n	8011358 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80112d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80112d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80112de:	e012      	b.n	8011306 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80112e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80112e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e8:	88db      	ldrh	r3, [r3, #6]
 80112ea:	b29a      	uxth	r2, r3
 80112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ee:	889b      	ldrh	r3, [r3, #4]
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d002      	beq.n	80112fc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80112f6:	2300      	movs	r3, #0
 80112f8:	623b      	str	r3, [r7, #32]
            break;
 80112fa:	e007      	b.n	801130c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80112fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1e9      	bne.n	80112e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d022      	beq.n	8011358 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d106      	bne.n	8011328 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801131a:	4b21      	ldr	r3, [pc, #132]	; (80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801131c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8011320:	4923      	ldr	r1, [pc, #140]	; (80113b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011322:	4821      	ldr	r0, [pc, #132]	; (80113a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011324:	f002 facc 	bl	80138c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011330:	429a      	cmp	r2, r3
 8011332:	d106      	bne.n	8011342 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8011334:	4b1a      	ldr	r3, [pc, #104]	; (80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011336:	f240 12d5 	movw	r2, #469	; 0x1d5
 801133a:	491d      	ldr	r1, [pc, #116]	; (80113b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801133c:	481a      	ldr	r0, [pc, #104]	; (80113a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801133e:	f002 fabf 	bl	80138c0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d006      	beq.n	8011358 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801134a:	4b15      	ldr	r3, [pc, #84]	; (80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801134c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8011350:	4918      	ldr	r1, [pc, #96]	; (80113b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011352:	4815      	ldr	r0, [pc, #84]	; (80113a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011354:	f002 fab4 	bl	80138c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011358:	6a3b      	ldr	r3, [r7, #32]
 801135a:	2b00      	cmp	r3, #0
 801135c:	bf14      	ite	ne
 801135e:	2301      	movne	r3, #1
 8011360:	2300      	moveq	r3, #0
 8011362:	b2db      	uxtb	r3, r3
 8011364:	e018      	b.n	8011398 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011366:	2300      	movs	r3, #0
 8011368:	e016      	b.n	8011398 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 801136a:	bf00      	nop
 801136c:	e004      	b.n	8011378 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801136e:	bf00      	nop
 8011370:	e002      	b.n	8011378 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011372:	bf00      	nop
 8011374:	e000      	b.n	8011378 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011376:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8011378:	68b8      	ldr	r0, [r7, #8]
 801137a:	f7f8 f83b 	bl	80093f4 <pbuf_clen>
 801137e:	4603      	mov	r3, r0
 8011380:	461a      	mov	r2, r3
 8011382:	4b0d      	ldr	r3, [pc, #52]	; (80113b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	1a9b      	subs	r3, r3, r2
 8011388:	b29a      	uxth	r2, r3
 801138a:	4b0b      	ldr	r3, [pc, #44]	; (80113b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801138c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801138e:	68b8      	ldr	r0, [r7, #8]
 8011390:	f7f7 ff9c 	bl	80092cc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8011398:	4618      	mov	r0, r3
 801139a:	3730      	adds	r7, #48	; 0x30
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	0801630c 	.word	0x0801630c
 80113a4:	080163e8 	.word	0x080163e8
 80113a8:	08016354 	.word	0x08016354
 80113ac:	08016408 	.word	0x08016408
 80113b0:	08016440 	.word	0x08016440
 80113b4:	08016450 	.word	0x08016450
 80113b8:	20008f10 	.word	0x20008f10

080113bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b08e      	sub	sp, #56	; 0x38
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	f003 030f 	and.w	r3, r3, #15
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	2b14      	cmp	r3, #20
 80113d6:	f040 8131 	bne.w	801163c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80113da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113dc:	88db      	ldrh	r3, [r3, #6]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f6 fba0 	bl	8007b26 <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	00db      	lsls	r3, r3, #3
 80113f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80113f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f4:	885b      	ldrh	r3, [r3, #2]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7f6 fb94 	bl	8007b26 <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	461a      	mov	r2, r3
 8011402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	b29b      	uxth	r3, r3
 8011408:	f003 030f 	and.w	r3, r3, #15
 801140c:	b29b      	uxth	r3, r3
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	b29b      	uxth	r3, r3
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7f7 ffec 	bl	80093f4 <pbuf_clen>
 801141c:	4603      	mov	r3, r0
 801141e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011420:	4b8e      	ldr	r3, [pc, #568]	; (801165c <ip4_reass+0x2a0>)
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	461a      	mov	r2, r3
 8011426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011428:	4413      	add	r3, r2
 801142a:	2b0a      	cmp	r3, #10
 801142c:	dd10      	ble.n	8011450 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801142e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011430:	4619      	mov	r1, r3
 8011432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011434:	f7ff fd8e 	bl	8010f54 <ip_reass_remove_oldest_datagram>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 8100 	beq.w	8011640 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011440:	4b86      	ldr	r3, [pc, #536]	; (801165c <ip4_reass+0x2a0>)
 8011442:	881b      	ldrh	r3, [r3, #0]
 8011444:	461a      	mov	r2, r3
 8011446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011448:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801144a:	2b0a      	cmp	r3, #10
 801144c:	f300 80f8 	bgt.w	8011640 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011450:	4b83      	ldr	r3, [pc, #524]	; (8011660 <ip4_reass+0x2a4>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	633b      	str	r3, [r7, #48]	; 0x30
 8011456:	e015      	b.n	8011484 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145a:	695a      	ldr	r2, [r3, #20]
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	429a      	cmp	r2, r3
 8011462:	d10c      	bne.n	801147e <ip4_reass+0xc2>
 8011464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011466:	699a      	ldr	r2, [r3, #24]
 8011468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146a:	691b      	ldr	r3, [r3, #16]
 801146c:	429a      	cmp	r2, r3
 801146e:	d106      	bne.n	801147e <ip4_reass+0xc2>
 8011470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011472:	899a      	ldrh	r2, [r3, #12]
 8011474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011476:	889b      	ldrh	r3, [r3, #4]
 8011478:	b29b      	uxth	r3, r3
 801147a:	429a      	cmp	r2, r3
 801147c:	d006      	beq.n	801148c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	633b      	str	r3, [r7, #48]	; 0x30
 8011484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011486:	2b00      	cmp	r3, #0
 8011488:	d1e6      	bne.n	8011458 <ip4_reass+0x9c>
 801148a:	e000      	b.n	801148e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801148c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011490:	2b00      	cmp	r3, #0
 8011492:	d109      	bne.n	80114a8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011494:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011496:	4619      	mov	r1, r3
 8011498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801149a:	f7ff fdbd 	bl	8011018 <ip_reass_enqueue_new_datagram>
 801149e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80114a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d11c      	bne.n	80114e0 <ip4_reass+0x124>
      goto nullreturn;
 80114a6:	e0d0      	b.n	801164a <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80114a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114aa:	88db      	ldrh	r3, [r3, #6]
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f6 fb39 	bl	8007b26 <lwip_htons>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d110      	bne.n	80114e0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80114be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c0:	89db      	ldrh	r3, [r3, #14]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7f6 fb2f 	bl	8007b26 <lwip_htons>
 80114c8:	4603      	mov	r3, r0
 80114ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d006      	beq.n	80114e0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80114d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d4:	3308      	adds	r3, #8
 80114d6:	2214      	movs	r2, #20
 80114d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114da:	4618      	mov	r0, r3
 80114dc:	f002 f8fe 	bl	80136dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80114e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e2:	88db      	ldrh	r3, [r3, #6]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	f003 0320 	and.w	r3, r3, #32
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	bf0c      	ite	eq
 80114ee:	2301      	moveq	r3, #1
 80114f0:	2300      	movne	r3, #0
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00e      	beq.n	801151a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80114fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80114fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011500:	4413      	add	r3, r2
 8011502:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011504:	8b7a      	ldrh	r2, [r7, #26]
 8011506:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011508:	429a      	cmp	r2, r3
 801150a:	f0c0 809b 	bcc.w	8011644 <ip4_reass+0x288>
 801150e:	8b7b      	ldrh	r3, [r7, #26]
 8011510:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011514:	4293      	cmp	r3, r2
 8011516:	f200 8095 	bhi.w	8011644 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801151a:	69fa      	ldr	r2, [r7, #28]
 801151c:	6879      	ldr	r1, [r7, #4]
 801151e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011520:	f7ff fde2 	bl	80110e8 <ip_reass_chain_frag_into_datagram_and_validate>
 8011524:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	f1b3 3fff 	cmp.w	r3, #4294967295
 801152c:	f000 808c 	beq.w	8011648 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011530:	4b4a      	ldr	r3, [pc, #296]	; (801165c <ip4_reass+0x2a0>)
 8011532:	881a      	ldrh	r2, [r3, #0]
 8011534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011536:	4413      	add	r3, r2
 8011538:	b29a      	uxth	r2, r3
 801153a:	4b48      	ldr	r3, [pc, #288]	; (801165c <ip4_reass+0x2a0>)
 801153c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00d      	beq.n	8011560 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8011544:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011548:	4413      	add	r3, r2
 801154a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154e:	8a7a      	ldrh	r2, [r7, #18]
 8011550:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011554:	7f9b      	ldrb	r3, [r3, #30]
 8011556:	f043 0301 	orr.w	r3, r3, #1
 801155a:	b2da      	uxtb	r2, r3
 801155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	2b01      	cmp	r3, #1
 8011564:	d168      	bne.n	8011638 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8011566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011568:	8b9b      	ldrh	r3, [r3, #28]
 801156a:	3314      	adds	r3, #20
 801156c:	b29a      	uxth	r2, r3
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8011572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011586:	3308      	adds	r3, #8
 8011588:	2214      	movs	r2, #20
 801158a:	4619      	mov	r1, r3
 801158c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801158e:	f002 f8a5 	bl	80136dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8011592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011594:	8b9b      	ldrh	r3, [r3, #28]
 8011596:	4618      	mov	r0, r3
 8011598:	f7f6 fac5 	bl	8007b26 <lwip_htons>
 801159c:	4603      	mov	r3, r0
 801159e:	461a      	mov	r2, r3
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	2200      	movs	r2, #0
 80115a8:	719a      	strb	r2, [r3, #6]
 80115aa:	2200      	movs	r2, #0
 80115ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	2200      	movs	r2, #0
 80115b2:	729a      	strb	r2, [r3, #10]
 80115b4:	2200      	movs	r2, #0
 80115b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80115b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80115be:	e00e      	b.n	80115de <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80115c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80115c6:	f06f 0113 	mvn.w	r1, #19
 80115ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80115cc:	f7f7 fe5a 	bl	8009284 <pbuf_header>
      pbuf_cat(p, r);
 80115d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7f7 ff46 	bl	8009464 <pbuf_cat>
      r = iprh->next_pbuf;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80115de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d1ed      	bne.n	80115c0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80115e4:	4b1e      	ldr	r3, [pc, #120]	; (8011660 <ip4_reass+0x2a4>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d102      	bne.n	80115f4 <ip4_reass+0x238>
      ipr_prev = NULL;
 80115ee:	2300      	movs	r3, #0
 80115f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115f2:	e010      	b.n	8011616 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80115f4:	4b1a      	ldr	r3, [pc, #104]	; (8011660 <ip4_reass+0x2a4>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115fa:	e007      	b.n	801160c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80115fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011602:	429a      	cmp	r2, r3
 8011604:	d006      	beq.n	8011614 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	2b00      	cmp	r3, #0
 8011610:	d1f4      	bne.n	80115fc <ip4_reass+0x240>
 8011612:	e000      	b.n	8011616 <ip4_reass+0x25a>
          break;
 8011614:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801161a:	f7ff fd37 	bl	801108c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7f7 fee8 	bl	80093f4 <pbuf_clen>
 8011624:	4603      	mov	r3, r0
 8011626:	461a      	mov	r2, r3
 8011628:	4b0c      	ldr	r3, [pc, #48]	; (801165c <ip4_reass+0x2a0>)
 801162a:	881b      	ldrh	r3, [r3, #0]
 801162c:	1a9b      	subs	r3, r3, r2
 801162e:	b29a      	uxth	r2, r3
 8011630:	4b0a      	ldr	r3, [pc, #40]	; (801165c <ip4_reass+0x2a0>)
 8011632:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	e00c      	b.n	8011652 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011638:	2300      	movs	r3, #0
 801163a:	e00a      	b.n	8011652 <ip4_reass+0x296>
    goto nullreturn;
 801163c:	bf00      	nop
 801163e:	e004      	b.n	801164a <ip4_reass+0x28e>
      goto nullreturn;
 8011640:	bf00      	nop
 8011642:	e002      	b.n	801164a <ip4_reass+0x28e>
      goto nullreturn;
 8011644:	bf00      	nop
 8011646:	e000      	b.n	801164a <ip4_reass+0x28e>
    goto nullreturn;
 8011648:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7f7 fe3e 	bl	80092cc <pbuf_free>
  return NULL;
 8011650:	2300      	movs	r3, #0
}
 8011652:	4618      	mov	r0, r3
 8011654:	3738      	adds	r7, #56	; 0x38
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	20008f10 	.word	0x20008f10
 8011660:	20008f0c 	.word	0x20008f0c

08011664 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8011668:	2005      	movs	r0, #5
 801166a:	f7f7 f8a5 	bl	80087b8 <memp_malloc>
 801166e:	4603      	mov	r3, r0
}
 8011670:	4618      	mov	r0, r3
 8011672:	bd80      	pop	{r7, pc}

08011674 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d106      	bne.n	8011690 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011682:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011684:	f240 22ae 	movw	r2, #686	; 0x2ae
 8011688:	4906      	ldr	r1, [pc, #24]	; (80116a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801168a:	4807      	ldr	r0, [pc, #28]	; (80116a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801168c:	f002 f918 	bl	80138c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011690:	6879      	ldr	r1, [r7, #4]
 8011692:	2005      	movs	r0, #5
 8011694:	f7f7 f8dc 	bl	8008850 <memp_free>
}
 8011698:	bf00      	nop
 801169a:	3708      	adds	r7, #8
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	0801630c 	.word	0x0801630c
 80116a4:	08016474 	.word	0x08016474
 80116a8:	08016354 	.word	0x08016354

080116ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b084      	sub	sp, #16
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d106      	bne.n	80116cc <ipfrag_free_pbuf_custom+0x20>
 80116be:	4b11      	ldr	r3, [pc, #68]	; (8011704 <ipfrag_free_pbuf_custom+0x58>)
 80116c0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80116c4:	4910      	ldr	r1, [pc, #64]	; (8011708 <ipfrag_free_pbuf_custom+0x5c>)
 80116c6:	4811      	ldr	r0, [pc, #68]	; (801170c <ipfrag_free_pbuf_custom+0x60>)
 80116c8:	f002 f8fa 	bl	80138c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d006      	beq.n	80116e2 <ipfrag_free_pbuf_custom+0x36>
 80116d4:	4b0b      	ldr	r3, [pc, #44]	; (8011704 <ipfrag_free_pbuf_custom+0x58>)
 80116d6:	f240 22b9 	movw	r2, #697	; 0x2b9
 80116da:	490d      	ldr	r1, [pc, #52]	; (8011710 <ipfrag_free_pbuf_custom+0x64>)
 80116dc:	480b      	ldr	r0, [pc, #44]	; (801170c <ipfrag_free_pbuf_custom+0x60>)
 80116de:	f002 f8ef 	bl	80138c0 <iprintf>
  if (pcr->original != NULL) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	695b      	ldr	r3, [r3, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d004      	beq.n	80116f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	695b      	ldr	r3, [r3, #20]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7f7 fdec 	bl	80092cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7ff ffbd 	bl	8011674 <ip_frag_free_pbuf_custom_ref>
}
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	0801630c 	.word	0x0801630c
 8011708:	08016480 	.word	0x08016480
 801170c:	08016354 	.word	0x08016354
 8011710:	0801648c 	.word	0x0801648c

08011714 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b092      	sub	sp, #72	; 0x48
 8011718:	af02      	add	r7, sp, #8
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011728:	3b14      	subs	r3, #20
 801172a:	2b00      	cmp	r3, #0
 801172c:	da00      	bge.n	8011730 <ip4_frag+0x1c>
 801172e:	3307      	adds	r3, #7
 8011730:	10db      	asrs	r3, r3, #3
 8011732:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011734:	2314      	movs	r3, #20
 8011736:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011740:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8011742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	f003 030f 	and.w	r3, r3, #15
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	2b14      	cmp	r3, #20
 801174e:	d009      	beq.n	8011764 <ip4_frag+0x50>
 8011750:	4b7a      	ldr	r3, [pc, #488]	; (801193c <ip4_frag+0x228>)
 8011752:	f240 22e1 	movw	r2, #737	; 0x2e1
 8011756:	497a      	ldr	r1, [pc, #488]	; (8011940 <ip4_frag+0x22c>)
 8011758:	487a      	ldr	r0, [pc, #488]	; (8011944 <ip4_frag+0x230>)
 801175a:	f002 f8b1 	bl	80138c0 <iprintf>
 801175e:	f06f 0305 	mvn.w	r3, #5
 8011762:	e0e6      	b.n	8011932 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011766:	88db      	ldrh	r3, [r3, #6]
 8011768:	b29b      	uxth	r3, r3
 801176a:	4618      	mov	r0, r3
 801176c:	f7f6 f9db 	bl	8007b26 <lwip_htons>
 8011770:	4603      	mov	r3, r0
 8011772:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8011774:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011776:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801177a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801177c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801177e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011782:	2b00      	cmp	r3, #0
 8011784:	d009      	beq.n	801179a <ip4_frag+0x86>
 8011786:	4b6d      	ldr	r3, [pc, #436]	; (801193c <ip4_frag+0x228>)
 8011788:	f240 22e6 	movw	r2, #742	; 0x2e6
 801178c:	496e      	ldr	r1, [pc, #440]	; (8011948 <ip4_frag+0x234>)
 801178e:	486d      	ldr	r0, [pc, #436]	; (8011944 <ip4_frag+0x230>)
 8011790:	f002 f896 	bl	80138c0 <iprintf>
 8011794:	f06f 0305 	mvn.w	r3, #5
 8011798:	e0cb      	b.n	8011932 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	891b      	ldrh	r3, [r3, #8]
 801179e:	3b14      	subs	r3, #20
 80117a0:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80117a2:	e0bd      	b.n	8011920 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80117a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80117a6:	00da      	lsls	r2, r3, #3
 80117a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80117aa:	4293      	cmp	r3, r2
 80117ac:	bfa8      	it	ge
 80117ae:	4613      	movge	r3, r2
 80117b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80117b2:	2200      	movs	r2, #0
 80117b4:	2114      	movs	r1, #20
 80117b6:	2002      	movs	r0, #2
 80117b8:	f7f7 fa10 	bl	8008bdc <pbuf_alloc>
 80117bc:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80117be:	6a3b      	ldr	r3, [r7, #32]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 80b3 	beq.w	801192c <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	895b      	ldrh	r3, [r3, #10]
 80117ca:	2b13      	cmp	r3, #19
 80117cc:	d806      	bhi.n	80117dc <ip4_frag+0xc8>
 80117ce:	4b5b      	ldr	r3, [pc, #364]	; (801193c <ip4_frag+0x228>)
 80117d0:	f44f 7242 	mov.w	r2, #776	; 0x308
 80117d4:	495d      	ldr	r1, [pc, #372]	; (801194c <ip4_frag+0x238>)
 80117d6:	485b      	ldr	r0, [pc, #364]	; (8011944 <ip4_frag+0x230>)
 80117d8:	f002 f872 	bl	80138c0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	685b      	ldr	r3, [r3, #4]
 80117e0:	2214      	movs	r2, #20
 80117e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117e4:	4618      	mov	r0, r3
 80117e6:	f001 ff79 	bl	80136dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80117f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80117f4:	e04f      	b.n	8011896 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	895a      	ldrh	r2, [r3, #10]
 80117fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011800:	8b7a      	ldrh	r2, [r7, #26]
 8011802:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011804:	4293      	cmp	r3, r2
 8011806:	bf28      	it	cs
 8011808:	4613      	movcs	r3, r2
 801180a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801180c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801180e:	2b00      	cmp	r3, #0
 8011810:	d105      	bne.n	801181e <ip4_frag+0x10a>
        poff = 0;
 8011812:	2300      	movs	r3, #0
 8011814:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	60fb      	str	r3, [r7, #12]
        continue;
 801181c:	e03b      	b.n	8011896 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801181e:	f7ff ff21 	bl	8011664 <ip_frag_alloc_pbuf_custom_ref>
 8011822:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d103      	bne.n	8011832 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801182a:	6a38      	ldr	r0, [r7, #32]
 801182c:	f7f7 fd4e 	bl	80092cc <pbuf_free>
        goto memerr;
 8011830:	e07d      	b.n	801192e <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011832:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801183a:	4413      	add	r3, r2
 801183c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801183e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011840:	9201      	str	r2, [sp, #4]
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	4603      	mov	r3, r0
 8011846:	2202      	movs	r2, #2
 8011848:	2004      	movs	r0, #4
 801184a:	f7f7 fb61 	bl	8008f10 <pbuf_alloced_custom>
 801184e:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d106      	bne.n	8011864 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011856:	6978      	ldr	r0, [r7, #20]
 8011858:	f7ff ff0c 	bl	8011674 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801185c:	6a38      	ldr	r0, [r7, #32]
 801185e:	f7f7 fd35 	bl	80092cc <pbuf_free>
        goto memerr;
 8011862:	e064      	b.n	801192e <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f7f7 fddb 	bl	8009420 <pbuf_ref>
      pcr->original = p;
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	4a37      	ldr	r2, [pc, #220]	; (8011950 <ip4_frag+0x23c>)
 8011874:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011876:	6939      	ldr	r1, [r7, #16]
 8011878:	6a38      	ldr	r0, [r7, #32]
 801187a:	f7f7 fdf3 	bl	8009464 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801187e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8011880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011882:	1ad3      	subs	r3, r2, r3
 8011884:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8011886:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011888:	2b00      	cmp	r3, #0
 801188a:	d004      	beq.n	8011896 <ip4_frag+0x182>
        poff = 0;
 801188c:	2300      	movs	r3, #0
 801188e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011896:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1ac      	bne.n	80117f6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 801189c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801189e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118a0:	4413      	add	r3, r2
 80118a2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80118a8:	f1a3 0213 	sub.w	r2, r3, #19
 80118ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80118ae:	429a      	cmp	r2, r3
 80118b0:	bfcc      	ite	gt
 80118b2:	2301      	movgt	r3, #1
 80118b4:	2300      	movle	r3, #0
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80118ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80118bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118c0:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d103      	bne.n	80118d0 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 80118c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80118ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80118ce:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80118d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7f6 f927 	bl	8007b26 <lwip_htons>
 80118d8:	4603      	mov	r3, r0
 80118da:	461a      	mov	r2, r3
 80118dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118de:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80118e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118e2:	3314      	adds	r3, #20
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7f6 f91d 	bl	8007b26 <lwip_htons>
 80118ec:	4603      	mov	r3, r0
 80118ee:	461a      	mov	r2, r3
 80118f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80118f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f6:	2200      	movs	r2, #0
 80118f8:	729a      	strb	r2, [r3, #10]
 80118fa:	2200      	movs	r2, #0
 80118fc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	695b      	ldr	r3, [r3, #20]
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	6a39      	ldr	r1, [r7, #32]
 8011906:	68b8      	ldr	r0, [r7, #8]
 8011908:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801190a:	6a38      	ldr	r0, [r7, #32]
 801190c:	f7f7 fcde 	bl	80092cc <pbuf_free>
    left -= fragsize;
 8011910:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011912:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8011918:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801191a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801191c:	4413      	add	r3, r2
 801191e:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8011920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011922:	2b00      	cmp	r3, #0
 8011924:	f47f af3e 	bne.w	80117a4 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011928:	2300      	movs	r3, #0
 801192a:	e002      	b.n	8011932 <ip4_frag+0x21e>
      goto memerr;
 801192c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011932:	4618      	mov	r0, r3
 8011934:	3740      	adds	r7, #64	; 0x40
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	0801630c 	.word	0x0801630c
 8011940:	08016498 	.word	0x08016498
 8011944:	08016354 	.word	0x08016354
 8011948:	080164c0 	.word	0x080164c0
 801194c:	080164dc 	.word	0x080164dc
 8011950:	080116ad 	.word	0x080116ad

08011954 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801195e:	230e      	movs	r3, #14
 8011960:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	895b      	ldrh	r3, [r3, #10]
 8011966:	2b0e      	cmp	r3, #14
 8011968:	d977      	bls.n	8011a5a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	7b1a      	ldrb	r2, [r3, #12]
 8011974:	7b5b      	ldrb	r3, [r3, #13]
 8011976:	021b      	lsls	r3, r3, #8
 8011978:	4313      	orrs	r3, r2
 801197a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	2b00      	cmp	r3, #0
 8011986:	d023      	beq.n	80119d0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d10f      	bne.n	80119b0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	785b      	ldrb	r3, [r3, #1]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d11b      	bne.n	80119d0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801199c:	2b5e      	cmp	r3, #94	; 0x5e
 801199e:	d117      	bne.n	80119d0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	7b5b      	ldrb	r3, [r3, #13]
 80119a4:	f043 0310 	orr.w	r3, r3, #16
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	735a      	strb	r2, [r3, #13]
 80119ae:	e00f      	b.n	80119d0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	2206      	movs	r2, #6
 80119b4:	4931      	ldr	r1, [pc, #196]	; (8011a7c <ethernet_input+0x128>)
 80119b6:	4618      	mov	r0, r3
 80119b8:	f001 fe80 	bl	80136bc <memcmp>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d106      	bne.n	80119d0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	7b5b      	ldrb	r3, [r3, #13]
 80119c6:	f043 0308 	orr.w	r3, r3, #8
 80119ca:	b2da      	uxtb	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80119d0:	89fb      	ldrh	r3, [r7, #14]
 80119d2:	2b08      	cmp	r3, #8
 80119d4:	d003      	beq.n	80119de <ethernet_input+0x8a>
 80119d6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80119da:	d01e      	beq.n	8011a1a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80119dc:	e046      	b.n	8011a6c <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80119e4:	f003 0308 	and.w	r3, r3, #8
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d038      	beq.n	8011a5e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	895b      	ldrh	r3, [r3, #10]
 80119f0:	461a      	mov	r2, r3
 80119f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	db33      	blt.n	8011a62 <ethernet_input+0x10e>
 80119fa:	8afb      	ldrh	r3, [r7, #22]
 80119fc:	425b      	negs	r3, r3
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	b21b      	sxth	r3, r3
 8011a02:	4619      	mov	r1, r3
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7f7 fc3d 	bl	8009284 <pbuf_header>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d128      	bne.n	8011a62 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8011a10:	6839      	ldr	r1, [r7, #0]
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7fe ff7c 	bl	8010910 <ip4_input>
      break;
 8011a18:	e01d      	b.n	8011a56 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a20:	f003 0308 	and.w	r3, r3, #8
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d01e      	beq.n	8011a66 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	895b      	ldrh	r3, [r3, #10]
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	db19      	blt.n	8011a6a <ethernet_input+0x116>
 8011a36:	8afb      	ldrh	r3, [r7, #22]
 8011a38:	425b      	negs	r3, r3
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	b21b      	sxth	r3, r3
 8011a3e:	4619      	mov	r1, r3
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f7f7 fc1f 	bl	8009284 <pbuf_header>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10e      	bne.n	8011a6a <ethernet_input+0x116>
        etharp_input(p, netif);
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f7fe f94c 	bl	800fcec <etharp_input>
      break;
 8011a54:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011a56:	2300      	movs	r3, #0
 8011a58:	e00c      	b.n	8011a74 <ethernet_input+0x120>
    goto free_and_return;
 8011a5a:	bf00      	nop
 8011a5c:	e006      	b.n	8011a6c <ethernet_input+0x118>
        goto free_and_return;
 8011a5e:	bf00      	nop
 8011a60:	e004      	b.n	8011a6c <ethernet_input+0x118>
        goto free_and_return;
 8011a62:	bf00      	nop
 8011a64:	e002      	b.n	8011a6c <ethernet_input+0x118>
        goto free_and_return;
 8011a66:	bf00      	nop
 8011a68:	e000      	b.n	8011a6c <ethernet_input+0x118>
        goto free_and_return;
 8011a6a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f7f7 fc2d 	bl	80092cc <pbuf_free>
  return ERR_OK;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	080166c4 	.word	0x080166c4

08011a80 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b086      	sub	sp, #24
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011a8e:	8c3b      	ldrh	r3, [r7, #32]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7f6 f848 	bl	8007b26 <lwip_htons>
 8011a96:	4603      	mov	r3, r0
 8011a98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8011a9a:	210e      	movs	r1, #14
 8011a9c:	68b8      	ldr	r0, [r7, #8]
 8011a9e:	f7f7 fbf1 	bl	8009284 <pbuf_header>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d125      	bne.n	8011af4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	8afa      	ldrh	r2, [r7, #22]
 8011ab2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	2206      	movs	r2, #6
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f001 fe0e 	bl	80136dc <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	3306      	adds	r3, #6
 8011ac4:	2206      	movs	r2, #6
 8011ac6:	6879      	ldr	r1, [r7, #4]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f001 fe07 	bl	80136dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ad4:	2b06      	cmp	r3, #6
 8011ad6:	d006      	beq.n	8011ae6 <ethernet_output+0x66>
 8011ad8:	4b0a      	ldr	r3, [pc, #40]	; (8011b04 <ethernet_output+0x84>)
 8011ada:	f240 122b 	movw	r2, #299	; 0x12b
 8011ade:	490a      	ldr	r1, [pc, #40]	; (8011b08 <ethernet_output+0x88>)
 8011ae0:	480a      	ldr	r0, [pc, #40]	; (8011b0c <ethernet_output+0x8c>)
 8011ae2:	f001 feed 	bl	80138c0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	699b      	ldr	r3, [r3, #24]
 8011aea:	68b9      	ldr	r1, [r7, #8]
 8011aec:	68f8      	ldr	r0, [r7, #12]
 8011aee:	4798      	blx	r3
 8011af0:	4603      	mov	r3, r0
 8011af2:	e002      	b.n	8011afa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011af4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011af6:	f06f 0301 	mvn.w	r3, #1
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3718      	adds	r7, #24
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	080164fc 	.word	0x080164fc
 8011b08:	08016534 	.word	0x08016534
 8011b0c:	08016568 	.word	0x08016568

08011b10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011b14:	2200      	movs	r2, #0
 8011b16:	4912      	ldr	r1, [pc, #72]	; (8011b60 <MX_USB_DEVICE_Init+0x50>)
 8011b18:	4812      	ldr	r0, [pc, #72]	; (8011b64 <MX_USB_DEVICE_Init+0x54>)
 8011b1a:	f000 fb71 	bl	8012200 <USBD_Init>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011b24:	f7ef ff23 	bl	800196e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011b28:	490f      	ldr	r1, [pc, #60]	; (8011b68 <MX_USB_DEVICE_Init+0x58>)
 8011b2a:	480e      	ldr	r0, [pc, #56]	; (8011b64 <MX_USB_DEVICE_Init+0x54>)
 8011b2c:	f000 fb93 	bl	8012256 <USBD_RegisterClass>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d001      	beq.n	8011b3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011b36:	f7ef ff1a 	bl	800196e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011b3a:	490c      	ldr	r1, [pc, #48]	; (8011b6c <MX_USB_DEVICE_Init+0x5c>)
 8011b3c:	4809      	ldr	r0, [pc, #36]	; (8011b64 <MX_USB_DEVICE_Init+0x54>)
 8011b3e:	f000 fac9 	bl	80120d4 <USBD_CDC_RegisterInterface>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011b48:	f7ef ff11 	bl	800196e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011b4c:	4805      	ldr	r0, [pc, #20]	; (8011b64 <MX_USB_DEVICE_Init+0x54>)
 8011b4e:	f000 fb9b 	bl	8012288 <USBD_Start>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d001      	beq.n	8011b5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011b58:	f7ef ff09 	bl	800196e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011b5c:	bf00      	nop
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	20000028 	.word	0x20000028
 8011b64:	20008f14 	.word	0x20008f14
 8011b68:	20000084 	.word	0x20000084
 8011b6c:	20000008 	.word	0x20000008

08011b70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	4603      	mov	r3, r0
 8011b78:	6039      	str	r1, [r7, #0]
 8011b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	2212      	movs	r2, #18
 8011b80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011b82:	4b03      	ldr	r3, [pc, #12]	; (8011b90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	370c      	adds	r7, #12
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bc80      	pop	{r7}
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	20000044 	.word	0x20000044

08011b94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	6039      	str	r1, [r7, #0]
 8011b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	2204      	movs	r2, #4
 8011ba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ba6:	4b03      	ldr	r3, [pc, #12]	; (8011bb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	370c      	adds	r7, #12
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bc80      	pop	{r7}
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop
 8011bb4:	20000058 	.word	0x20000058

08011bb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	6039      	str	r1, [r7, #0]
 8011bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011bc4:	79fb      	ldrb	r3, [r7, #7]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d105      	bne.n	8011bd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	4907      	ldr	r1, [pc, #28]	; (8011bec <USBD_FS_ProductStrDescriptor+0x34>)
 8011bce:	4808      	ldr	r0, [pc, #32]	; (8011bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011bd0:	f001 f996 	bl	8012f00 <USBD_GetString>
 8011bd4:	e004      	b.n	8011be0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011bd6:	683a      	ldr	r2, [r7, #0]
 8011bd8:	4904      	ldr	r1, [pc, #16]	; (8011bec <USBD_FS_ProductStrDescriptor+0x34>)
 8011bda:	4805      	ldr	r0, [pc, #20]	; (8011bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011bdc:	f001 f990 	bl	8012f00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011be0:	4b02      	ldr	r3, [pc, #8]	; (8011bec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	20009138 	.word	0x20009138
 8011bf0:	08016590 	.word	0x08016590

08011bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	6039      	str	r1, [r7, #0]
 8011bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	4904      	ldr	r1, [pc, #16]	; (8011c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011c04:	4804      	ldr	r0, [pc, #16]	; (8011c18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011c06:	f001 f97b 	bl	8012f00 <USBD_GetString>
  return USBD_StrDesc;
 8011c0a:	4b02      	ldr	r3, [pc, #8]	; (8011c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3708      	adds	r7, #8
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	20009138 	.word	0x20009138
 8011c18:	080165a8 	.word	0x080165a8

08011c1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	4603      	mov	r3, r0
 8011c24:	6039      	str	r1, [r7, #0]
 8011c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	221a      	movs	r2, #26
 8011c2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011c2e:	f000 f843 	bl	8011cb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011c32:	4b02      	ldr	r3, [pc, #8]	; (8011c3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	2000005c 	.word	0x2000005c

08011c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	6039      	str	r1, [r7, #0]
 8011c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011c4c:	79fb      	ldrb	r3, [r7, #7]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d105      	bne.n	8011c5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c52:	683a      	ldr	r2, [r7, #0]
 8011c54:	4907      	ldr	r1, [pc, #28]	; (8011c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c56:	4808      	ldr	r0, [pc, #32]	; (8011c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c58:	f001 f952 	bl	8012f00 <USBD_GetString>
 8011c5c:	e004      	b.n	8011c68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c5e:	683a      	ldr	r2, [r7, #0]
 8011c60:	4904      	ldr	r1, [pc, #16]	; (8011c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c62:	4805      	ldr	r0, [pc, #20]	; (8011c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c64:	f001 f94c 	bl	8012f00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c68:	4b02      	ldr	r3, [pc, #8]	; (8011c74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	20009138 	.word	0x20009138
 8011c78:	080165bc 	.word	0x080165bc

08011c7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	4603      	mov	r3, r0
 8011c84:	6039      	str	r1, [r7, #0]
 8011c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c88:	79fb      	ldrb	r3, [r7, #7]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d105      	bne.n	8011c9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	4907      	ldr	r1, [pc, #28]	; (8011cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c92:	4808      	ldr	r0, [pc, #32]	; (8011cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c94:	f001 f934 	bl	8012f00 <USBD_GetString>
 8011c98:	e004      	b.n	8011ca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c9a:	683a      	ldr	r2, [r7, #0]
 8011c9c:	4904      	ldr	r1, [pc, #16]	; (8011cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c9e:	4805      	ldr	r0, [pc, #20]	; (8011cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ca0:	f001 f92e 	bl	8012f00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ca4:	4b02      	ldr	r3, [pc, #8]	; (8011cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	20009138 	.word	0x20009138
 8011cb4:	080165c8 	.word	0x080165c8

08011cb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011cbe:	4b0f      	ldr	r3, [pc, #60]	; (8011cfc <Get_SerialNum+0x44>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011cc4:	4b0e      	ldr	r3, [pc, #56]	; (8011d00 <Get_SerialNum+0x48>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011cca:	4b0e      	ldr	r3, [pc, #56]	; (8011d04 <Get_SerialNum+0x4c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011cd0:	68fa      	ldr	r2, [r7, #12]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d009      	beq.n	8011cf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011cde:	2208      	movs	r2, #8
 8011ce0:	4909      	ldr	r1, [pc, #36]	; (8011d08 <Get_SerialNum+0x50>)
 8011ce2:	68f8      	ldr	r0, [r7, #12]
 8011ce4:	f000 f814 	bl	8011d10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011ce8:	2204      	movs	r2, #4
 8011cea:	4908      	ldr	r1, [pc, #32]	; (8011d0c <Get_SerialNum+0x54>)
 8011cec:	68b8      	ldr	r0, [r7, #8]
 8011cee:	f000 f80f 	bl	8011d10 <IntToUnicode>
  }
}
 8011cf2:	bf00      	nop
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	1ffff7e8 	.word	0x1ffff7e8
 8011d00:	1ffff7ec 	.word	0x1ffff7ec
 8011d04:	1ffff7f0 	.word	0x1ffff7f0
 8011d08:	2000005e 	.word	0x2000005e
 8011d0c:	2000006e 	.word	0x2000006e

08011d10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b087      	sub	sp, #28
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011d22:	2300      	movs	r3, #0
 8011d24:	75fb      	strb	r3, [r7, #23]
 8011d26:	e027      	b.n	8011d78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	0f1b      	lsrs	r3, r3, #28
 8011d2c:	2b09      	cmp	r3, #9
 8011d2e:	d80b      	bhi.n	8011d48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	0f1b      	lsrs	r3, r3, #28
 8011d34:	b2da      	uxtb	r2, r3
 8011d36:	7dfb      	ldrb	r3, [r7, #23]
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	440b      	add	r3, r1
 8011d40:	3230      	adds	r2, #48	; 0x30
 8011d42:	b2d2      	uxtb	r2, r2
 8011d44:	701a      	strb	r2, [r3, #0]
 8011d46:	e00a      	b.n	8011d5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	0f1b      	lsrs	r3, r3, #28
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	7dfb      	ldrb	r3, [r7, #23]
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	4619      	mov	r1, r3
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	440b      	add	r3, r1
 8011d58:	3237      	adds	r2, #55	; 0x37
 8011d5a:	b2d2      	uxtb	r2, r2
 8011d5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	011b      	lsls	r3, r3, #4
 8011d62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011d64:	7dfb      	ldrb	r3, [r7, #23]
 8011d66:	005b      	lsls	r3, r3, #1
 8011d68:	3301      	adds	r3, #1
 8011d6a:	68ba      	ldr	r2, [r7, #8]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	2200      	movs	r2, #0
 8011d70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011d72:	7dfb      	ldrb	r3, [r7, #23]
 8011d74:	3301      	adds	r3, #1
 8011d76:	75fb      	strb	r3, [r7, #23]
 8011d78:	7dfa      	ldrb	r2, [r7, #23]
 8011d7a:	79fb      	ldrb	r3, [r7, #7]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d3d3      	bcc.n	8011d28 <IntToUnicode+0x18>
  }
}
 8011d80:	bf00      	nop
 8011d82:	bf00      	nop
 8011d84:	371c      	adds	r7, #28
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bc80      	pop	{r7}
 8011d8a:	4770      	bx	lr

08011d8c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	7c1b      	ldrb	r3, [r3, #16]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d10e      	bne.n	8011dc2 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8011da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011da8:	2202      	movs	r2, #2
 8011daa:	2181      	movs	r1, #129	; 0x81
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f001 faf0 	bl	8013392 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8011db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011db6:	2202      	movs	r2, #2
 8011db8:	2101      	movs	r1, #1
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f001 fae9 	bl	8013392 <USBD_LL_OpenEP>
 8011dc0:	e00b      	b.n	8011dda <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8011dc2:	2340      	movs	r3, #64	; 0x40
 8011dc4:	2202      	movs	r2, #2
 8011dc6:	2181      	movs	r1, #129	; 0x81
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f001 fae2 	bl	8013392 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8011dce:	2340      	movs	r3, #64	; 0x40
 8011dd0:	2202      	movs	r2, #2
 8011dd2:	2101      	movs	r1, #1
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f001 fadc 	bl	8013392 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8011dda:	2308      	movs	r3, #8
 8011ddc:	2203      	movs	r2, #3
 8011dde:	2182      	movs	r1, #130	; 0x82
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f001 fad6 	bl	8013392 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8011de6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011dea:	f001 fbf9 	bl	80135e0 <USBD_static_malloc>
 8011dee:	4602      	mov	r2, r0
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d102      	bne.n	8011e06 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8011e00:	2301      	movs	r3, #1
 8011e02:	73fb      	strb	r3, [r7, #15]
 8011e04:	e026      	b.n	8011e54 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011e0c:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2200      	movs	r2, #0
 8011e24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	7c1b      	ldrb	r3, [r3, #16]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d109      	bne.n	8011e44 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e3a:	2101      	movs	r1, #1
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f001 fb98 	bl	8013572 <USBD_LL_PrepareReceive>
 8011e42:	e007      	b.n	8011e54 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011e4a:	2340      	movs	r3, #64	; 0x40
 8011e4c:	2101      	movs	r1, #1
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f001 fb8f 	bl	8013572 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b084      	sub	sp, #16
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	460b      	mov	r3, r1
 8011e68:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8011e6e:	2181      	movs	r1, #129	; 0x81
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f001 fab4 	bl	80133de <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8011e76:	2101      	movs	r1, #1
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f001 fab0 	bl	80133de <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8011e7e:	2182      	movs	r1, #130	; 0x82
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f001 faac 	bl	80133de <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00e      	beq.n	8011eae <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f001 fba9 	bl	80135f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8011eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ec8:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d039      	beq.n	8011f4a <USBD_CDC_Setup+0x92>
 8011ed6:	2b20      	cmp	r3, #32
 8011ed8:	d145      	bne.n	8011f66 <USBD_CDC_Setup+0xae>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	88db      	ldrh	r3, [r3, #6]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d029      	beq.n	8011f36 <USBD_CDC_Setup+0x7e>
    {
      if (req->bmRequest & 0x80)
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	b25b      	sxtb	r3, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	da11      	bge.n	8011f10 <USBD_CDC_Setup+0x58>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	683a      	ldr	r2, [r7, #0]
 8011ef6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8011ef8:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	88d2      	ldrh	r2, [r2, #6]
 8011efe:	4798      	blx	r3
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8011f00:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	88db      	ldrh	r3, [r3, #6]
 8011f06:	461a      	mov	r2, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f001 f853 	bl	8012fb4 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8011f0e:	e02b      	b.n	8011f68 <USBD_CDC_Setup+0xb0>
        hcdc->CmdOpCode = req->bRequest;
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	785a      	ldrb	r2, [r3, #1]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	88db      	ldrh	r3, [r3, #6]
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8011f26:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	88db      	ldrh	r3, [r3, #6]
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f001 f86e 	bl	8013010 <USBD_CtlPrepareRx>
    break;
 8011f34:	e018      	b.n	8011f68 <USBD_CDC_Setup+0xb0>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	683a      	ldr	r2, [r7, #0]
 8011f40:	7850      	ldrb	r0, [r2, #1]
 8011f42:	2200      	movs	r2, #0
 8011f44:	6839      	ldr	r1, [r7, #0]
 8011f46:	4798      	blx	r3
    break;
 8011f48:	e00e      	b.n	8011f68 <USBD_CDC_Setup+0xb0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	785b      	ldrb	r3, [r3, #1]
 8011f4e:	2b0a      	cmp	r3, #10
 8011f50:	d002      	beq.n	8011f58 <USBD_CDC_Setup+0xa0>
 8011f52:	2b0b      	cmp	r3, #11
 8011f54:	d006      	beq.n	8011f64 <USBD_CDC_Setup+0xac>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8011f56:	e006      	b.n	8011f66 <USBD_CDC_Setup+0xae>
      USBD_CtlSendData (pdev,
 8011f58:	2201      	movs	r2, #1
 8011f5a:	4906      	ldr	r1, [pc, #24]	; (8011f74 <USBD_CDC_Setup+0xbc>)
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f001 f829 	bl	8012fb4 <USBD_CtlSendData>
      break;
 8011f62:	e000      	b.n	8011f66 <USBD_CDC_Setup+0xae>
      break;
 8011f64:	bf00      	nop
    break;
 8011f66:	bf00      	nop
  }
  return USBD_OK;
 8011f68:	2300      	movs	r3, #0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	20009238 	.word	0x20009238

08011f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	460b      	mov	r3, r1
 8011f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f8a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d005      	beq.n	8011fa2 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	e000      	b.n	8011fa4 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8011fa2:	2302      	movs	r3, #2
  }
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3714      	adds	r7, #20
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bc80      	pop	{r7}
 8011fac:	4770      	bx	lr

08011fae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b084      	sub	sp, #16
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011fc0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8011fc2:	78fb      	ldrb	r3, [r7, #3]
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f001 faf6 	bl	80135b8 <USBD_LL_GetRxDataSize>
 8011fcc:	4602      	mov	r2, r0
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00d      	beq.n	8011ffa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	4798      	blx	r3

    return USBD_OK;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	e000      	b.n	8011ffc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8011ffa:	2302      	movs	r3, #2
  }
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012012:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801201a:	2b00      	cmp	r3, #0
 801201c:	d015      	beq.n	801204a <USBD_CDC_EP0_RxReady+0x46>
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012024:	2bff      	cmp	r3, #255	; 0xff
 8012026:	d010      	beq.n	801204a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8012036:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801203e:	b292      	uxth	r2, r2
 8012040:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	22ff      	movs	r2, #255	; 0xff
 8012046:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	3710      	adds	r7, #16
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2243      	movs	r2, #67	; 0x43
 8012060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8012062:	4b03      	ldr	r3, [pc, #12]	; (8012070 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012064:	4618      	mov	r0, r3
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	bc80      	pop	{r7}
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop
 8012070:	20000100 	.word	0x20000100

08012074 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2243      	movs	r2, #67	; 0x43
 8012080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8012082:	4b03      	ldr	r3, [pc, #12]	; (8012090 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012084:	4618      	mov	r0, r3
 8012086:	370c      	adds	r7, #12
 8012088:	46bd      	mov	sp, r7
 801208a:	bc80      	pop	{r7}
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	200000bc 	.word	0x200000bc

08012094 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2243      	movs	r2, #67	; 0x43
 80120a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80120a2:	4b03      	ldr	r3, [pc, #12]	; (80120b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bc80      	pop	{r7}
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop
 80120b0:	20000144 	.word	0x20000144

080120b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	220a      	movs	r2, #10
 80120c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80120c2:	4b03      	ldr	r3, [pc, #12]	; (80120d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bc80      	pop	{r7}
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	20000078 	.word	0x20000078

080120d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80120de:	2302      	movs	r3, #2
 80120e0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d005      	beq.n	80120f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80120f0:	2300      	movs	r3, #0
 80120f2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3714      	adds	r7, #20
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bc80      	pop	{r7}
 80120fe:	4770      	bx	lr

08012100 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8012100:	b480      	push	{r7}
 8012102:	b087      	sub	sp, #28
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	4613      	mov	r3, r2
 801210c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012114:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	68ba      	ldr	r2, [r7, #8]
 801211a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 801211e:	88fa      	ldrh	r2, [r7, #6]
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8012126:	2300      	movs	r3, #0
}
 8012128:	4618      	mov	r0, r3
 801212a:	371c      	adds	r7, #28
 801212c:	46bd      	mov	sp, r7
 801212e:	bc80      	pop	{r7}
 8012130:	4770      	bx	lr

08012132 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8012132:	b480      	push	{r7}
 8012134:	b085      	sub	sp, #20
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
 801213a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012142:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	683a      	ldr	r2, [r7, #0]
 8012148:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	3714      	adds	r7, #20
 8012152:	46bd      	mov	sp, r7
 8012154:	bc80      	pop	{r7}
 8012156:	4770      	bx	lr

08012158 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012166:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801216e:	2b00      	cmp	r3, #0
 8012170:	d017      	beq.n	80121a2 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012178:	2b00      	cmp	r3, #0
 801217a:	d110      	bne.n	801219e <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2201      	movs	r2, #1
 8012180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8012190:	b29b      	uxth	r3, r3
 8012192:	2181      	movs	r1, #129	; 0x81
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f001 f9c9 	bl	801352c <USBD_LL_Transmit>
      
      return USBD_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	e002      	b.n	80121a4 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 801219e:	2301      	movs	r3, #1
 80121a0:	e000      	b.n	80121a4 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 80121a2:	2302      	movs	r3, #2
  }
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3710      	adds	r7, #16
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80121ba:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d017      	beq.n	80121f6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	7c1b      	ldrb	r3, [r3, #16]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d109      	bne.n	80121e2 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80121d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121d8:	2101      	movs	r1, #1
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f001 f9c9 	bl	8013572 <USBD_LL_PrepareReceive>
 80121e0:	e007      	b.n	80121f2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80121e8:	2340      	movs	r3, #64	; 0x40
 80121ea:	2101      	movs	r1, #1
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f001 f9c0 	bl	8013572 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e000      	b.n	80121f8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80121f6:	2302      	movs	r3, #2
  }
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	4613      	mov	r3, r2
 801220c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d101      	bne.n	8012218 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8012214:	2302      	movs	r3, #2
 8012216:	e01a      	b.n	801224e <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801221e:	2b00      	cmp	r3, #0
 8012220:	d003      	beq.n	801222a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2200      	movs	r2, #0
 8012226:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d003      	beq.n	8012238 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	68ba      	ldr	r2, [r7, #8]
 8012234:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2201      	movs	r2, #1
 801223c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	79fa      	ldrb	r2, [r7, #7]
 8012244:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f001 f844 	bl	80132d4 <USBD_LL_Init>
  
  return USBD_OK; 
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012256:	b480      	push	{r7}
 8012258:	b085      	sub	sp, #20
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
 801225e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8012260:	2300      	movs	r3, #0
 8012262:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d006      	beq.n	8012278 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	683a      	ldr	r2, [r7, #0]
 801226e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8012272:	2300      	movs	r3, #0
 8012274:	73fb      	strb	r3, [r7, #15]
 8012276:	e001      	b.n	801227c <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8012278:	2302      	movs	r3, #2
 801227a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 801227c:	7bfb      	ldrb	r3, [r7, #15]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3714      	adds	r7, #20
 8012282:	46bd      	mov	sp, r7
 8012284:	bc80      	pop	{r7}
 8012286:	4770      	bx	lr

08012288 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f001 f863 	bl	801335c <USBD_LL_Start>
  
  return USBD_OK;  
 8012296:	2300      	movs	r3, #0
}
 8012298:	4618      	mov	r0, r3
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bc80      	pop	{r7}
 80122b2:	4770      	bx	lr

080122b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	460b      	mov	r3, r1
 80122be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80122c0:	2302      	movs	r3, #2
 80122c2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00c      	beq.n	80122e8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	78fa      	ldrb	r2, [r7, #3]
 80122d8:	4611      	mov	r1, r2
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	4798      	blx	r3
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d101      	bne.n	80122e8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80122e4:	2300      	movs	r3, #0
 80122e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80122e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b082      	sub	sp, #8
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	460b      	mov	r3, r1
 80122fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	78fa      	ldrb	r2, [r7, #3]
 8012308:	4611      	mov	r1, r2
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	4798      	blx	r3
  return USBD_OK;
 801230e:	2300      	movs	r3, #0
}
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	4618      	mov	r0, r3
 801232c:	f000 fd9b 	bl	8012e66 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2201      	movs	r2, #1
 8012334:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 801233e:	461a      	mov	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 801234c:	f003 031f 	and.w	r3, r3, #31
 8012350:	2b02      	cmp	r3, #2
 8012352:	d016      	beq.n	8012382 <USBD_LL_SetupStage+0x6a>
 8012354:	2b02      	cmp	r3, #2
 8012356:	dc1c      	bgt.n	8012392 <USBD_LL_SetupStage+0x7a>
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <USBD_LL_SetupStage+0x4a>
 801235c:	2b01      	cmp	r3, #1
 801235e:	d008      	beq.n	8012372 <USBD_LL_SetupStage+0x5a>
 8012360:	e017      	b.n	8012392 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012368:	4619      	mov	r1, r3
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 f9c0 	bl	80126f0 <USBD_StdDevReq>
    break;
 8012370:	e01a      	b.n	80123a8 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012378:	4619      	mov	r1, r3
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 fa08 	bl	8012790 <USBD_StdItfReq>
    break;
 8012380:	e012      	b.n	80123a8 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012388:	4619      	mov	r1, r3
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 fa33 	bl	80127f6 <USBD_StdEPReq>
    break;
 8012390:	e00a      	b.n	80123a8 <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8012398:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801239c:	b2db      	uxtb	r3, r3
 801239e:	4619      	mov	r1, r3
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f001 f83b 	bl	801341c <USBD_LL_StallEP>
    break;
 80123a6:	bf00      	nop
  }  
  return USBD_OK;  
 80123a8:	2300      	movs	r3, #0
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b086      	sub	sp, #24
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	60f8      	str	r0, [r7, #12]
 80123ba:	460b      	mov	r3, r1
 80123bc:	607a      	str	r2, [r7, #4]
 80123be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80123c0:	7afb      	ldrb	r3, [r7, #11]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d138      	bne.n	8012438 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80123cc:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d142      	bne.n	801245e <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	689a      	ldr	r2, [r3, #8]
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d914      	bls.n	801240e <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	689a      	ldr	r2, [r3, #8]
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	1ad2      	subs	r2, r2, r3
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	68da      	ldr	r2, [r3, #12]
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	4293      	cmp	r3, r2
 80123fc:	bf28      	it	cs
 80123fe:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8012400:	b29b      	uxth	r3, r3
 8012402:	461a      	mov	r2, r3
 8012404:	6879      	ldr	r1, [r7, #4]
 8012406:	68f8      	ldr	r0, [r7, #12]
 8012408:	f000 fe20 	bl	801304c <USBD_CtlContinueRx>
 801240c:	e027      	b.n	801245e <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012414:	691b      	ldr	r3, [r3, #16]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00a      	beq.n	8012430 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8012420:	2b03      	cmp	r3, #3
 8012422:	d105      	bne.n	8012430 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801242a:	691b      	ldr	r3, [r3, #16]
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f000 fe1d 	bl	8013070 <USBD_CtlSendStatus>
 8012436:	e012      	b.n	801245e <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00c      	beq.n	801245e <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 801244a:	2b03      	cmp	r3, #3
 801244c:	d107      	bne.n	801245e <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012454:	699b      	ldr	r3, [r3, #24]
 8012456:	7afa      	ldrb	r2, [r7, #11]
 8012458:	4611      	mov	r1, r2
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	4798      	blx	r3
  }  
  return USBD_OK;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3718      	adds	r7, #24
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b086      	sub	sp, #24
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	460b      	mov	r3, r1
 8012472:	607a      	str	r2, [r7, #4]
 8012474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8012476:	7afb      	ldrb	r3, [r7, #11]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d16c      	bne.n	8012556 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	3314      	adds	r3, #20
 8012480:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8012488:	2b02      	cmp	r3, #2
 801248a:	d157      	bne.n	801253c <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	689a      	ldr	r2, [r3, #8]
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	429a      	cmp	r2, r3
 8012496:	d915      	bls.n	80124c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	689a      	ldr	r2, [r3, #8]
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	1ad2      	subs	r2, r2, r3
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	461a      	mov	r2, r3
 80124ae:	6879      	ldr	r1, [r7, #4]
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f000 fd9b 	bl	8012fec <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80124b6:	2300      	movs	r3, #0
 80124b8:	2200      	movs	r2, #0
 80124ba:	2100      	movs	r1, #0
 80124bc:	68f8      	ldr	r0, [r7, #12]
 80124be:	f001 f858 	bl	8013572 <USBD_LL_PrepareReceive>
 80124c2:	e03b      	b.n	801253c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	68d2      	ldr	r2, [r2, #12]
 80124cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80124d0:	fb01 f202 	mul.w	r2, r1, r2
 80124d4:	1a9b      	subs	r3, r3, r2
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d11c      	bne.n	8012514 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	685a      	ldr	r2, [r3, #4]
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d316      	bcc.n	8012514 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	685a      	ldr	r2, [r3, #4]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d20f      	bcs.n	8012514 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80124f4:	2200      	movs	r2, #0
 80124f6:	2100      	movs	r1, #0
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	f000 fd77 	bl	8012fec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2200      	movs	r2, #0
 8012502:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8012506:	2300      	movs	r3, #0
 8012508:	2200      	movs	r2, #0
 801250a:	2100      	movs	r1, #0
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f001 f830 	bl	8013572 <USBD_LL_PrepareReceive>
 8012512:	e013      	b.n	801253c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d00a      	beq.n	8012536 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8012526:	2b03      	cmp	r3, #3
 8012528:	d105      	bne.n	8012536 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	68f8      	ldr	r0, [r7, #12]
 8012534:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f000 fdad 	bl	8013096 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012542:	2b01      	cmp	r3, #1
 8012544:	d11a      	bne.n	801257c <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7ff feaa 	bl	80122a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2200      	movs	r2, #0
 8012550:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8012554:	e012      	b.n	801257c <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801255c:	695b      	ldr	r3, [r3, #20]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00c      	beq.n	801257c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8012568:	2b03      	cmp	r3, #3
 801256a:	d107      	bne.n	801257c <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012572:	695b      	ldr	r3, [r3, #20]
 8012574:	7afa      	ldrb	r2, [r7, #11]
 8012576:	4611      	mov	r1, r2
 8012578:	68f8      	ldr	r0, [r7, #12]
 801257a:	4798      	blx	r3
  }  
  return USBD_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3718      	adds	r7, #24
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8012586:	b580      	push	{r7, lr}
 8012588:	b082      	sub	sp, #8
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 801258e:	2340      	movs	r3, #64	; 0x40
 8012590:	2200      	movs	r2, #0
 8012592:	2100      	movs	r1, #0
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 fefc 	bl	8013392 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2240      	movs	r2, #64	; 0x40
 801259e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80125a2:	2340      	movs	r3, #64	; 0x40
 80125a4:	2200      	movs	r2, #0
 80125a6:	2180      	movs	r1, #128	; 0x80
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f000 fef2 	bl	8013392 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2240      	movs	r2, #64	; 0x40
 80125b2:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2201      	movs	r2, #1
 80125b8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d009      	beq.n	80125da <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	6852      	ldr	r2, [r2, #4]
 80125d2:	b2d2      	uxtb	r2, r2
 80125d4:	4611      	mov	r1, r2
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	4798      	blx	r3
 
  
  return USBD_OK;
 80125da:	2300      	movs	r3, #0
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	460b      	mov	r3, r1
 80125ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	78fa      	ldrb	r2, [r7, #3]
 80125f4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	370c      	adds	r7, #12
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bc80      	pop	{r7}
 8012600:	4770      	bx	lr

08012602 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8012602:	b480      	push	{r7}
 8012604:	b083      	sub	sp, #12
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2204      	movs	r2, #4
 801261a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 801261e:	2300      	movs	r3, #0
}
 8012620:	4618      	mov	r0, r3
 8012622:	370c      	adds	r7, #12
 8012624:	46bd      	mov	sp, r7
 8012626:	bc80      	pop	{r7}
 8012628:	4770      	bx	lr

0801262a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 801262a:	b480      	push	{r7}
 801262c:	b083      	sub	sp, #12
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	bc80      	pop	{r7}
 8012648:	4770      	bx	lr

0801264a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 801264a:	b580      	push	{r7, lr}
 801264c:	b082      	sub	sp, #8
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012658:	2b03      	cmp	r3, #3
 801265a:	d10b      	bne.n	8012674 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012662:	69db      	ldr	r3, [r3, #28]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d005      	beq.n	8012674 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801266e:	69db      	ldr	r3, [r3, #28]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8012674:	2300      	movs	r3, #0
}
 8012676:	4618      	mov	r0, r3
 8012678:	3708      	adds	r7, #8
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801267e:	b480      	push	{r7}
 8012680:	b083      	sub	sp, #12
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
 8012686:	460b      	mov	r3, r1
 8012688:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	bc80      	pop	{r7}
 8012694:	4770      	bx	lr

08012696 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8012696:	b480      	push	{r7}
 8012698:	b083      	sub	sp, #12
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
 801269e:	460b      	mov	r3, r1
 80126a0:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bc80      	pop	{r7}
 80126ac:	4770      	bx	lr

080126ae <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80126ae:	b480      	push	{r7}
 80126b0:	b083      	sub	sp, #12
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80126b6:	2300      	movs	r3, #0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	bc80      	pop	{r7}
 80126c0:	4770      	bx	lr

080126c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80126c2:	b580      	push	{r7, lr}
 80126c4:	b082      	sub	sp, #8
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2201      	movs	r2, #1
 80126ce:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	6852      	ldr	r2, [r2, #4]
 80126de:	b2d2      	uxtb	r2, r2
 80126e0:	4611      	mov	r1, r2
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	4798      	blx	r3
   
  return USBD_OK;
 80126e6:	2300      	movs	r3, #0
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80126fa:	2300      	movs	r3, #0
 80126fc:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	785b      	ldrb	r3, [r3, #1]
 8012702:	2b09      	cmp	r3, #9
 8012704:	d839      	bhi.n	801277a <USBD_StdDevReq+0x8a>
 8012706:	a201      	add	r2, pc, #4	; (adr r2, 801270c <USBD_StdDevReq+0x1c>)
 8012708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270c:	0801275d 	.word	0x0801275d
 8012710:	08012771 	.word	0x08012771
 8012714:	0801277b 	.word	0x0801277b
 8012718:	08012767 	.word	0x08012767
 801271c:	0801277b 	.word	0x0801277b
 8012720:	0801273f 	.word	0x0801273f
 8012724:	08012735 	.word	0x08012735
 8012728:	0801277b 	.word	0x0801277b
 801272c:	08012753 	.word	0x08012753
 8012730:	08012749 	.word	0x08012749
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8012734:	6839      	ldr	r1, [r7, #0]
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f000 f93a 	bl	80129b0 <USBD_GetDescriptor>
    break;
 801273c:	e022      	b.n	8012784 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 801273e:	6839      	ldr	r1, [r7, #0]
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f000 fa29 	bl	8012b98 <USBD_SetAddress>
    break;
 8012746:	e01d      	b.n	8012784 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8012748:	6839      	ldr	r1, [r7, #0]
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 fa64 	bl	8012c18 <USBD_SetConfig>
    break;
 8012750:	e018      	b.n	8012784 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8012752:	6839      	ldr	r1, [r7, #0]
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 fae7 	bl	8012d28 <USBD_GetConfig>
    break;
 801275a:	e013      	b.n	8012784 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 801275c:	6839      	ldr	r1, [r7, #0]
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f000 fb14 	bl	8012d8c <USBD_GetStatus>
    break;
 8012764:	e00e      	b.n	8012784 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8012766:	6839      	ldr	r1, [r7, #0]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 fb39 	bl	8012de0 <USBD_SetFeature>
    break;
 801276e:	e009      	b.n	8012784 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fb4f 	bl	8012e16 <USBD_ClrFeature>
    break;
 8012778:	e004      	b.n	8012784 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 801277a:	6839      	ldr	r1, [r7, #0]
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 fbae 	bl	8012ede <USBD_CtlError>
    break;
 8012782:	bf00      	nop
  }
  
  return ret;
 8012784:	7bfb      	ldrb	r3, [r7, #15]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop

08012790 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 801279a:	2300      	movs	r3, #0
 801279c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80127a4:	2b03      	cmp	r3, #3
 80127a6:	d11b      	bne.n	80127e0 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	889b      	ldrh	r3, [r3, #4]
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d811      	bhi.n	80127d6 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127b8:	689b      	ldr	r3, [r3, #8]
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	88db      	ldrh	r3, [r3, #6]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d110      	bne.n	80127ea <USBD_StdItfReq+0x5a>
 80127c8:	7bfb      	ldrb	r3, [r7, #15]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d10d      	bne.n	80127ea <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 fc4e 	bl	8013070 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80127d4:	e009      	b.n	80127ea <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80127d6:	6839      	ldr	r1, [r7, #0]
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 fb80 	bl	8012ede <USBD_CtlError>
    break;
 80127de:	e004      	b.n	80127ea <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 fb7b 	bl	8012ede <USBD_CtlError>
    break;
 80127e8:	e000      	b.n	80127ec <USBD_StdItfReq+0x5c>
    break;
 80127ea:	bf00      	nop
  }
  return USBD_OK;
 80127ec:	2300      	movs	r3, #0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3710      	adds	r7, #16
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}

080127f6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80127f6:	b580      	push	{r7, lr}
 80127f8:	b084      	sub	sp, #16
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
 80127fe:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8012800:	2300      	movs	r3, #0
 8012802:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	889b      	ldrh	r3, [r3, #4]
 8012808:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012812:	2b20      	cmp	r3, #32
 8012814:	d108      	bne.n	8012828 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	6839      	ldr	r1, [r7, #0]
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	4798      	blx	r3
    
    return USBD_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	e0be      	b.n	80129a6 <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	785b      	ldrb	r3, [r3, #1]
 801282c:	2b03      	cmp	r3, #3
 801282e:	d007      	beq.n	8012840 <USBD_StdEPReq+0x4a>
 8012830:	2b03      	cmp	r3, #3
 8012832:	f300 80b6 	bgt.w	80129a2 <USBD_StdEPReq+0x1ac>
 8012836:	2b00      	cmp	r3, #0
 8012838:	d06d      	beq.n	8012916 <USBD_StdEPReq+0x120>
 801283a:	2b01      	cmp	r3, #1
 801283c:	d035      	beq.n	80128aa <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 801283e:	e0b0      	b.n	80129a2 <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012846:	2b02      	cmp	r3, #2
 8012848:	d002      	beq.n	8012850 <USBD_StdEPReq+0x5a>
 801284a:	2b03      	cmp	r3, #3
 801284c:	d00c      	beq.n	8012868 <USBD_StdEPReq+0x72>
 801284e:	e025      	b.n	801289c <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8012850:	7bbb      	ldrb	r3, [r7, #14]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d027      	beq.n	80128a6 <USBD_StdEPReq+0xb0>
 8012856:	7bbb      	ldrb	r3, [r7, #14]
 8012858:	2b80      	cmp	r3, #128	; 0x80
 801285a:	d024      	beq.n	80128a6 <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 801285c:	7bbb      	ldrb	r3, [r7, #14]
 801285e:	4619      	mov	r1, r3
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 fddb 	bl	801341c <USBD_LL_StallEP>
      break;	
 8012866:	e01e      	b.n	80128a6 <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	885b      	ldrh	r3, [r3, #2]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d10a      	bne.n	8012886 <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8012870:	7bbb      	ldrb	r3, [r7, #14]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d007      	beq.n	8012886 <USBD_StdEPReq+0x90>
 8012876:	7bbb      	ldrb	r3, [r7, #14]
 8012878:	2b80      	cmp	r3, #128	; 0x80
 801287a:	d004      	beq.n	8012886 <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 801287c:	7bbb      	ldrb	r3, [r7, #14]
 801287e:	4619      	mov	r1, r3
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 fdcb 	bl	801341c <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	6839      	ldr	r1, [r7, #0]
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 fbeb 	bl	8013070 <USBD_CtlSendStatus>
      break;
 801289a:	e005      	b.n	80128a8 <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 801289c:	6839      	ldr	r1, [r7, #0]
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 fb1d 	bl	8012ede <USBD_CtlError>
      break;    
 80128a4:	e000      	b.n	80128a8 <USBD_StdEPReq+0xb2>
      break;	
 80128a6:	bf00      	nop
    break;
 80128a8:	e07c      	b.n	80129a4 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80128b0:	2b02      	cmp	r3, #2
 80128b2:	d002      	beq.n	80128ba <USBD_StdEPReq+0xc4>
 80128b4:	2b03      	cmp	r3, #3
 80128b6:	d00c      	beq.n	80128d2 <USBD_StdEPReq+0xdc>
 80128b8:	e024      	b.n	8012904 <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80128ba:	7bbb      	ldrb	r3, [r7, #14]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d026      	beq.n	801290e <USBD_StdEPReq+0x118>
 80128c0:	7bbb      	ldrb	r3, [r7, #14]
 80128c2:	2b80      	cmp	r3, #128	; 0x80
 80128c4:	d023      	beq.n	801290e <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 80128c6:	7bbb      	ldrb	r3, [r7, #14]
 80128c8:	4619      	mov	r1, r3
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 fda6 	bl	801341c <USBD_LL_StallEP>
      break;	
 80128d0:	e01d      	b.n	801290e <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	885b      	ldrh	r3, [r3, #2]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d11b      	bne.n	8012912 <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 80128da:	7bbb      	ldrb	r3, [r7, #14]
 80128dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00b      	beq.n	80128fc <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80128e4:	7bbb      	ldrb	r3, [r7, #14]
 80128e6:	4619      	mov	r1, r3
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fdb6 	bl	801345a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80128f4:	689b      	ldr	r3, [r3, #8]
 80128f6:	6839      	ldr	r1, [r7, #0]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 fbb7 	bl	8013070 <USBD_CtlSendStatus>
      break;
 8012902:	e006      	b.n	8012912 <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 8012904:	6839      	ldr	r1, [r7, #0]
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 fae9 	bl	8012ede <USBD_CtlError>
      break;    
 801290c:	e002      	b.n	8012914 <USBD_StdEPReq+0x11e>
      break;	
 801290e:	bf00      	nop
 8012910:	e048      	b.n	80129a4 <USBD_StdEPReq+0x1ae>
      break;
 8012912:	bf00      	nop
    break;
 8012914:	e046      	b.n	80129a4 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801291c:	2b02      	cmp	r3, #2
 801291e:	d002      	beq.n	8012926 <USBD_StdEPReq+0x130>
 8012920:	2b03      	cmp	r3, #3
 8012922:	d00b      	beq.n	801293c <USBD_StdEPReq+0x146>
 8012924:	e036      	b.n	8012994 <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 8012926:	7bbb      	ldrb	r3, [r7, #14]
 8012928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801292c:	2b00      	cmp	r3, #0
 801292e:	d036      	beq.n	801299e <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 8012930:	7bbb      	ldrb	r3, [r7, #14]
 8012932:	4619      	mov	r1, r3
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f000 fd71 	bl	801341c <USBD_LL_StallEP>
      break;	
 801293a:	e030      	b.n	801299e <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 801293c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012940:	2b00      	cmp	r3, #0
 8012942:	da08      	bge.n	8012956 <USBD_StdEPReq+0x160>
 8012944:	7bbb      	ldrb	r3, [r7, #14]
 8012946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801294a:	3301      	adds	r3, #1
 801294c:	011b      	lsls	r3, r3, #4
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	4413      	add	r3, r2
 8012952:	3304      	adds	r3, #4
 8012954:	e007      	b.n	8012966 <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8012956:	7bbb      	ldrb	r3, [r7, #14]
 8012958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 801295c:	3310      	adds	r3, #16
 801295e:	011b      	lsls	r3, r3, #4
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	4413      	add	r3, r2
 8012964:	3304      	adds	r3, #4
 8012966:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8012968:	7bbb      	ldrb	r3, [r7, #14]
 801296a:	4619      	mov	r1, r3
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 fd93 	bl	8013498 <USBD_LL_IsStallEP>
 8012972:	4603      	mov	r3, r0
 8012974:	2b00      	cmp	r3, #0
 8012976:	d003      	beq.n	8012980 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	2201      	movs	r2, #1
 801297c:	601a      	str	r2, [r3, #0]
 801297e:	e002      	b.n	8012986 <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	2200      	movs	r2, #0
 8012984:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8012986:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8012988:	2202      	movs	r2, #2
 801298a:	4619      	mov	r1, r3
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 fb11 	bl	8012fb4 <USBD_CtlSendData>
      break;
 8012992:	e005      	b.n	80129a0 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 8012994:	6839      	ldr	r1, [r7, #0]
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f000 faa1 	bl	8012ede <USBD_CtlError>
      break;
 801299c:	e000      	b.n	80129a0 <USBD_StdEPReq+0x1aa>
      break;	
 801299e:	bf00      	nop
    break;
 80129a0:	e000      	b.n	80129a4 <USBD_StdEPReq+0x1ae>
    break;
 80129a2:	bf00      	nop
  }
  return ret;
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
	...

080129b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	885b      	ldrh	r3, [r3, #2]
 80129be:	0a1b      	lsrs	r3, r3, #8
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	3b01      	subs	r3, #1
 80129c4:	2b06      	cmp	r3, #6
 80129c6:	f200 80c9 	bhi.w	8012b5c <USBD_GetDescriptor+0x1ac>
 80129ca:	a201      	add	r2, pc, #4	; (adr r2, 80129d0 <USBD_GetDescriptor+0x20>)
 80129cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129d0:	080129ed 	.word	0x080129ed
 80129d4:	08012a05 	.word	0x08012a05
 80129d8:	08012a45 	.word	0x08012a45
 80129dc:	08012b5d 	.word	0x08012b5d
 80129e0:	08012b5d 	.word	0x08012b5d
 80129e4:	08012b09 	.word	0x08012b09
 80129e8:	08012b2f 	.word	0x08012b2f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	7c12      	ldrb	r2, [r2, #16]
 80129f8:	f107 010a 	add.w	r1, r7, #10
 80129fc:	4610      	mov	r0, r2
 80129fe:	4798      	blx	r3
 8012a00:	60f8      	str	r0, [r7, #12]
    break;
 8012a02:	e0b0      	b.n	8012b66 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	7c1b      	ldrb	r3, [r3, #16]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d10d      	bne.n	8012a28 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a14:	f107 020a 	add.w	r2, r7, #10
 8012a18:	4610      	mov	r0, r2
 8012a1a:	4798      	blx	r3
 8012a1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3301      	adds	r3, #1
 8012a22:	2202      	movs	r2, #2
 8012a24:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012a26:	e09e      	b.n	8012b66 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a30:	f107 020a 	add.w	r2, r7, #10
 8012a34:	4610      	mov	r0, r2
 8012a36:	4798      	blx	r3
 8012a38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	2202      	movs	r2, #2
 8012a40:	701a      	strb	r2, [r3, #0]
    break;
 8012a42:	e090      	b.n	8012b66 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	885b      	ldrh	r3, [r3, #2]
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	2b05      	cmp	r3, #5
 8012a4c:	d856      	bhi.n	8012afc <USBD_GetDescriptor+0x14c>
 8012a4e:	a201      	add	r2, pc, #4	; (adr r2, 8012a54 <USBD_GetDescriptor+0xa4>)
 8012a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a54:	08012a6d 	.word	0x08012a6d
 8012a58:	08012a85 	.word	0x08012a85
 8012a5c:	08012a9d 	.word	0x08012a9d
 8012a60:	08012ab5 	.word	0x08012ab5
 8012a64:	08012acd 	.word	0x08012acd
 8012a68:	08012ae5 	.word	0x08012ae5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	687a      	ldr	r2, [r7, #4]
 8012a76:	7c12      	ldrb	r2, [r2, #16]
 8012a78:	f107 010a 	add.w	r1, r7, #10
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	4798      	blx	r3
 8012a80:	60f8      	str	r0, [r7, #12]
      break;
 8012a82:	e040      	b.n	8012b06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012a8a:	689b      	ldr	r3, [r3, #8]
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	7c12      	ldrb	r2, [r2, #16]
 8012a90:	f107 010a 	add.w	r1, r7, #10
 8012a94:	4610      	mov	r0, r2
 8012a96:	4798      	blx	r3
 8012a98:	60f8      	str	r0, [r7, #12]
      break;
 8012a9a:	e034      	b.n	8012b06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	7c12      	ldrb	r2, [r2, #16]
 8012aa8:	f107 010a 	add.w	r1, r7, #10
 8012aac:	4610      	mov	r0, r2
 8012aae:	4798      	blx	r3
 8012ab0:	60f8      	str	r0, [r7, #12]
      break;
 8012ab2:	e028      	b.n	8012b06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012aba:	691b      	ldr	r3, [r3, #16]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	7c12      	ldrb	r2, [r2, #16]
 8012ac0:	f107 010a 	add.w	r1, r7, #10
 8012ac4:	4610      	mov	r0, r2
 8012ac6:	4798      	blx	r3
 8012ac8:	60f8      	str	r0, [r7, #12]
      break;
 8012aca:	e01c      	b.n	8012b06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012ad2:	695b      	ldr	r3, [r3, #20]
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	7c12      	ldrb	r2, [r2, #16]
 8012ad8:	f107 010a 	add.w	r1, r7, #10
 8012adc:	4610      	mov	r0, r2
 8012ade:	4798      	blx	r3
 8012ae0:	60f8      	str	r0, [r7, #12]
      break;
 8012ae2:	e010      	b.n	8012b06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	7c12      	ldrb	r2, [r2, #16]
 8012af0:	f107 010a 	add.w	r1, r7, #10
 8012af4:	4610      	mov	r0, r2
 8012af6:	4798      	blx	r3
 8012af8:	60f8      	str	r0, [r7, #12]
      break;
 8012afa:	e004      	b.n	8012b06 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8012afc:	6839      	ldr	r1, [r7, #0]
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 f9ed 	bl	8012ede <USBD_CtlError>
      return;
 8012b04:	e044      	b.n	8012b90 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8012b06:	e02e      	b.n	8012b66 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	7c1b      	ldrb	r3, [r3, #16]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d109      	bne.n	8012b24 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b18:	f107 020a 	add.w	r2, r7, #10
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	4798      	blx	r3
 8012b20:	60f8      	str	r0, [r7, #12]
      break;
 8012b22:	e020      	b.n	8012b66 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 f9d9 	bl	8012ede <USBD_CtlError>
      return;
 8012b2c:	e030      	b.n	8012b90 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	7c1b      	ldrb	r3, [r3, #16]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d10d      	bne.n	8012b52 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b3e:	f107 020a 	add.w	r2, r7, #10
 8012b42:	4610      	mov	r0, r2
 8012b44:	4798      	blx	r3
 8012b46:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	2207      	movs	r2, #7
 8012b4e:	701a      	strb	r2, [r3, #0]
      break; 
 8012b50:	e009      	b.n	8012b66 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8012b52:	6839      	ldr	r1, [r7, #0]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 f9c2 	bl	8012ede <USBD_CtlError>
      return;
 8012b5a:	e019      	b.n	8012b90 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8012b5c:	6839      	ldr	r1, [r7, #0]
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f9bd 	bl	8012ede <USBD_CtlError>
    return;
 8012b64:	e014      	b.n	8012b90 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8012b66:	897b      	ldrh	r3, [r7, #10]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d011      	beq.n	8012b90 <USBD_GetDescriptor+0x1e0>
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	88db      	ldrh	r3, [r3, #6]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00d      	beq.n	8012b90 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	88da      	ldrh	r2, [r3, #6]
 8012b78:	897b      	ldrh	r3, [r7, #10]
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	bf28      	it	cs
 8012b7e:	4613      	movcs	r3, r2
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8012b84:	897b      	ldrh	r3, [r7, #10]
 8012b86:	461a      	mov	r2, r3
 8012b88:	68f9      	ldr	r1, [r7, #12]
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 fa12 	bl	8012fb4 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8012b90:	3710      	adds	r7, #16
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop

08012b98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	889b      	ldrh	r3, [r3, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d12c      	bne.n	8012c04 <USBD_SetAddress+0x6c>
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	88db      	ldrh	r3, [r3, #6]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d128      	bne.n	8012c04 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	885b      	ldrh	r3, [r3, #2]
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bbc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012bc4:	2b03      	cmp	r3, #3
 8012bc6:	d104      	bne.n	8012bd2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8012bc8:	6839      	ldr	r1, [r7, #0]
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f000 f987 	bl	8012ede <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8012bd0:	e01d      	b.n	8012c0e <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	7bfa      	ldrb	r2, [r7, #15]
 8012bd6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8012bda:	7bfb      	ldrb	r3, [r7, #15]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f000 fc85 	bl	80134ee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f000 fa43 	bl	8013070 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8012bea:	7bfb      	ldrb	r3, [r7, #15]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d004      	beq.n	8012bfa <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2202      	movs	r2, #2
 8012bf4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8012bf8:	e009      	b.n	8012c0e <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8012c02:	e004      	b.n	8012c0e <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8012c04:	6839      	ldr	r1, [r7, #0]
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 f969 	bl	8012ede <USBD_CtlError>
  } 
}
 8012c0c:	bf00      	nop
 8012c0e:	bf00      	nop
 8012c10:	3710      	adds	r7, #16
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
	...

08012c18 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	885b      	ldrh	r3, [r3, #2]
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	4b3e      	ldr	r3, [pc, #248]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012c2a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8012c2c:	4b3d      	ldr	r3, [pc, #244]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d904      	bls.n	8012c3e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8012c34:	6839      	ldr	r1, [r7, #0]
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 f951 	bl	8012ede <USBD_CtlError>
 8012c3c:	e06f      	b.n	8012d1e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012c44:	2b02      	cmp	r3, #2
 8012c46:	d002      	beq.n	8012c4e <USBD_SetConfig+0x36>
 8012c48:	2b03      	cmp	r3, #3
 8012c4a:	d023      	beq.n	8012c94 <USBD_SetConfig+0x7c>
 8012c4c:	e062      	b.n	8012d14 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8012c4e:	4b35      	ldr	r3, [pc, #212]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d01a      	beq.n	8012c8c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8012c56:	4b33      	ldr	r3, [pc, #204]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2203      	movs	r2, #3
 8012c64:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8012c68:	4b2e      	ldr	r3, [pc, #184]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7ff fb20 	bl	80122b4 <USBD_SetClassConfig>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b02      	cmp	r3, #2
 8012c78:	d104      	bne.n	8012c84 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8012c7a:	6839      	ldr	r1, [r7, #0]
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 f92e 	bl	8012ede <USBD_CtlError>
          return;
 8012c82:	e04c      	b.n	8012d1e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 f9f3 	bl	8013070 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8012c8a:	e048      	b.n	8012d1e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f9ef 	bl	8013070 <USBD_CtlSendStatus>
      break;
 8012c92:	e044      	b.n	8012d1e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8012c94:	4b23      	ldr	r3, [pc, #140]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d112      	bne.n	8012cc2 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2202      	movs	r2, #2
 8012ca0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8012ca4:	4b1f      	ldr	r3, [pc, #124]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	461a      	mov	r2, r3
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8012cae:	4b1d      	ldr	r3, [pc, #116]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f7ff fb1c 	bl	80122f2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f9d8 	bl	8013070 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8012cc0:	e02d      	b.n	8012d1e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8012cc2:	4b18      	ldr	r3, [pc, #96]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d01d      	beq.n	8012d0c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff fb0a 	bl	80122f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012cde:	4b11      	ldr	r3, [pc, #68]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8012ce8:	4b0e      	ldr	r3, [pc, #56]	; (8012d24 <USBD_SetConfig+0x10c>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	4619      	mov	r1, r3
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7ff fae0 	bl	80122b4 <USBD_SetClassConfig>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b02      	cmp	r3, #2
 8012cf8:	d104      	bne.n	8012d04 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8012cfa:	6839      	ldr	r1, [r7, #0]
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 f8ee 	bl	8012ede <USBD_CtlError>
          return;
 8012d02:	e00c      	b.n	8012d1e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 f9b3 	bl	8013070 <USBD_CtlSendStatus>
      break;
 8012d0a:	e008      	b.n	8012d1e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f000 f9af 	bl	8013070 <USBD_CtlSendStatus>
      break;
 8012d12:	e004      	b.n	8012d1e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8012d14:	6839      	ldr	r1, [r7, #0]
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 f8e1 	bl	8012ede <USBD_CtlError>
      break;
 8012d1c:	bf00      	nop
    }
  }
}
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	20009239 	.word	0x20009239

08012d28 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	88db      	ldrh	r3, [r3, #6]
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d004      	beq.n	8012d44 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8012d3a:	6839      	ldr	r1, [r7, #0]
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f000 f8ce 	bl	8012ede <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8012d42:	e01f      	b.n	8012d84 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012d4a:	2b02      	cmp	r3, #2
 8012d4c:	d002      	beq.n	8012d54 <USBD_GetConfig+0x2c>
 8012d4e:	2b03      	cmp	r3, #3
 8012d50:	d00b      	beq.n	8012d6a <USBD_GetConfig+0x42>
 8012d52:	e012      	b.n	8012d7a <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2200      	movs	r2, #0
 8012d58:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8012d5e:	2201      	movs	r2, #1
 8012d60:	4619      	mov	r1, r3
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f000 f926 	bl	8012fb4 <USBD_CtlSendData>
      break;
 8012d68:	e00c      	b.n	8012d84 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8012d6e:	2201      	movs	r2, #1
 8012d70:	4619      	mov	r1, r3
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 f91e 	bl	8012fb4 <USBD_CtlSendData>
      break;
 8012d78:	e004      	b.n	8012d84 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8012d7a:	6839      	ldr	r1, [r7, #0]
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f000 f8ae 	bl	8012ede <USBD_CtlError>
      break;
 8012d82:	bf00      	nop
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012d9c:	3b02      	subs	r3, #2
 8012d9e:	2b01      	cmp	r3, #1
 8012da0:	d815      	bhi.n	8012dce <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2201      	movs	r2, #1
 8012da6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d005      	beq.n	8012dbe <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	f043 0202 	orr.w	r2, r3, #2
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8012dc2:	2202      	movs	r2, #2
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f000 f8f4 	bl	8012fb4 <USBD_CtlSendData>
                      2);
    break;
 8012dcc:	e004      	b.n	8012dd8 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8012dce:	6839      	ldr	r1, [r7, #0]
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f000 f884 	bl	8012ede <USBD_CtlError>
    break;
 8012dd6:	bf00      	nop
  }
}
 8012dd8:	bf00      	nop
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	885b      	ldrh	r3, [r3, #2]
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d10d      	bne.n	8012e0e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2201      	movs	r2, #1
 8012df6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e00:	689b      	ldr	r3, [r3, #8]
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f000 f931 	bl	8013070 <USBD_CtlSendStatus>
  }

}
 8012e0e:	bf00      	nop
 8012e10:	3708      	adds	r7, #8
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b082      	sub	sp, #8
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012e26:	3b02      	subs	r3, #2
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d812      	bhi.n	8012e52 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	885b      	ldrh	r3, [r3, #2]
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	d113      	bne.n	8012e5c <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e42:	689b      	ldr	r3, [r3, #8]
 8012e44:	6839      	ldr	r1, [r7, #0]
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f000 f910 	bl	8013070 <USBD_CtlSendStatus>
    }
    break;
 8012e50:	e004      	b.n	8012e5c <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8012e52:	6839      	ldr	r1, [r7, #0]
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f000 f842 	bl	8012ede <USBD_CtlError>
    break;
 8012e5a:	e000      	b.n	8012e5e <USBD_ClrFeature+0x48>
    break;
 8012e5c:	bf00      	nop
  }
}
 8012e5e:	bf00      	nop
 8012e60:	3708      	adds	r7, #8
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}

08012e66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012e66:	b480      	push	{r7}
 8012e68:	b083      	sub	sp, #12
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
 8012e6e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	781a      	ldrb	r2, [r3, #0]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	785a      	ldrb	r2, [r3, #1]
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	3302      	adds	r3, #2
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	3303      	adds	r3, #3
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	021b      	lsls	r3, r3, #8
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	4413      	add	r3, r2
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	3304      	adds	r3, #4
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	3305      	adds	r3, #5
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	021b      	lsls	r3, r3, #8
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	4413      	add	r3, r2
 8012eb2:	b29a      	uxth	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	3306      	adds	r3, #6
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	b29a      	uxth	r2, r3
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	3307      	adds	r3, #7
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	021b      	lsls	r3, r3, #8
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	4413      	add	r3, r2
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	80da      	strh	r2, [r3, #6]

}
 8012ed4:	bf00      	nop
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bc80      	pop	{r7}
 8012edc:	4770      	bx	lr

08012ede <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b082      	sub	sp, #8
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8012ee8:	2180      	movs	r1, #128	; 0x80
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 fa96 	bl	801341c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 fa92 	bl	801341c <USBD_LL_StallEP>
}
 8012ef8:	bf00      	nop
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b086      	sub	sp, #24
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d033      	beq.n	8012f7e <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8012f16:	68f8      	ldr	r0, [r7, #12]
 8012f18:	f000 f835 	bl	8012f86 <USBD_GetLen>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	3301      	adds	r3, #1
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	881a      	ldrh	r2, [r3, #0]
 8012f2e:	7dfb      	ldrb	r3, [r7, #23]
 8012f30:	1c59      	adds	r1, r3, #1
 8012f32:	75f9      	strb	r1, [r7, #23]
 8012f34:	4619      	mov	r1, r3
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	440b      	add	r3, r1
 8012f3a:	b2d2      	uxtb	r2, r2
 8012f3c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8012f3e:	7dfb      	ldrb	r3, [r7, #23]
 8012f40:	1c5a      	adds	r2, r3, #1
 8012f42:	75fa      	strb	r2, [r7, #23]
 8012f44:	461a      	mov	r2, r3
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	4413      	add	r3, r2
 8012f4a:	2203      	movs	r2, #3
 8012f4c:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8012f4e:	e012      	b.n	8012f76 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	1c5a      	adds	r2, r3, #1
 8012f54:	60fa      	str	r2, [r7, #12]
 8012f56:	7dfa      	ldrb	r2, [r7, #23]
 8012f58:	1c51      	adds	r1, r2, #1
 8012f5a:	75f9      	strb	r1, [r7, #23]
 8012f5c:	4611      	mov	r1, r2
 8012f5e:	68ba      	ldr	r2, [r7, #8]
 8012f60:	440a      	add	r2, r1
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	75fa      	strb	r2, [r7, #23]
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	4413      	add	r3, r2
 8012f72:	2200      	movs	r2, #0
 8012f74:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d1e8      	bne.n	8012f50 <USBD_GetString+0x50>
    }
  } 
}
 8012f7e:	bf00      	nop
 8012f80:	3718      	adds	r7, #24
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}

08012f86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012f86:	b480      	push	{r7}
 8012f88:	b085      	sub	sp, #20
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8012f92:	e005      	b.n	8012fa0 <USBD_GetLen+0x1a>
    {
        len++;
 8012f94:	7bfb      	ldrb	r3, [r7, #15]
 8012f96:	3301      	adds	r3, #1
 8012f98:	73fb      	strb	r3, [r7, #15]
        buf++;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d1f5      	bne.n	8012f94 <USBD_GetLen+0xe>
    }

    return len;
 8012fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3714      	adds	r7, #20
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bc80      	pop	{r7}
 8012fb2:	4770      	bx	lr

08012fb4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	2202      	movs	r2, #2
 8012fc6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8012fca:	88fa      	ldrh	r2, [r7, #6]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8012fd0:	88fa      	ldrh	r2, [r7, #6]
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8012fd6:	88fb      	ldrh	r3, [r7, #6]
 8012fd8:	68ba      	ldr	r2, [r7, #8]
 8012fda:	2100      	movs	r1, #0
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f000 faa5 	bl	801352c <USBD_LL_Transmit>
  
  return USBD_OK;
 8012fe2:	2300      	movs	r3, #0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	60b9      	str	r1, [r7, #8]
 8012ff6:	4613      	mov	r3, r2
 8012ff8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8012ffa:	88fb      	ldrh	r3, [r7, #6]
 8012ffc:	68ba      	ldr	r2, [r7, #8]
 8012ffe:	2100      	movs	r1, #0
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f000 fa93 	bl	801352c <USBD_LL_Transmit>
  
  return USBD_OK;
 8013006:	2300      	movs	r3, #0
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	60b9      	str	r1, [r7, #8]
 801301a:	4613      	mov	r3, r2
 801301c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2203      	movs	r2, #3
 8013022:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8013026:	88fa      	ldrh	r2, [r7, #6]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 801302e:	88fa      	ldrh	r2, [r7, #6]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8013036:	88fb      	ldrh	r3, [r7, #6]
 8013038:	68ba      	ldr	r2, [r7, #8]
 801303a:	2100      	movs	r1, #0
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f000 fa98 	bl	8013572 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8013042:	2300      	movs	r3, #0
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	4613      	mov	r3, r2
 8013058:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 801305a:	88fb      	ldrh	r3, [r7, #6]
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	2100      	movs	r1, #0
 8013060:	68f8      	ldr	r0, [r7, #12]
 8013062:	f000 fa86 	bl	8013572 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3710      	adds	r7, #16
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2204      	movs	r2, #4
 801307c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8013080:	2300      	movs	r3, #0
 8013082:	2200      	movs	r2, #0
 8013084:	2100      	movs	r1, #0
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 fa50 	bl	801352c <USBD_LL_Transmit>
  
  return USBD_OK;
 801308c:	2300      	movs	r3, #0
}
 801308e:	4618      	mov	r0, r3
 8013090:	3708      	adds	r7, #8
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}

08013096 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8013096:	b580      	push	{r7, lr}
 8013098:	b082      	sub	sp, #8
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2205      	movs	r2, #5
 80130a2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80130a6:	2300      	movs	r3, #0
 80130a8:	2200      	movs	r2, #0
 80130aa:	2100      	movs	r1, #0
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f000 fa60 	bl	8013572 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80130cc:	d113      	bne.n	80130f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80130ce:	4b0c      	ldr	r3, [pc, #48]	; (8013100 <HAL_PCD_MspInit+0x44>)
 80130d0:	695b      	ldr	r3, [r3, #20]
 80130d2:	4a0b      	ldr	r2, [pc, #44]	; (8013100 <HAL_PCD_MspInit+0x44>)
 80130d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80130d8:	6153      	str	r3, [r2, #20]
 80130da:	4b09      	ldr	r3, [pc, #36]	; (8013100 <HAL_PCD_MspInit+0x44>)
 80130dc:	695b      	ldr	r3, [r3, #20]
 80130de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80130e2:	60fb      	str	r3, [r7, #12]
 80130e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80130e6:	2200      	movs	r2, #0
 80130e8:	2100      	movs	r1, #0
 80130ea:	2043      	movs	r0, #67	; 0x43
 80130ec:	f7ef fa39 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80130f0:	2043      	movs	r0, #67	; 0x43
 80130f2:	f7ef fa52 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80130f6:	bf00      	nop
 80130f8:	3710      	adds	r7, #16
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	40021000 	.word	0x40021000

08013104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013118:	4619      	mov	r1, r3
 801311a:	4610      	mov	r0, r2
 801311c:	f7ff f8fc 	bl	8012318 <USBD_LL_SetupStage>
}
 8013120:	bf00      	nop
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	460b      	mov	r3, r1
 8013132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 801313a:	78fa      	ldrb	r2, [r7, #3]
 801313c:	6879      	ldr	r1, [r7, #4]
 801313e:	4613      	mov	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	4413      	add	r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	440b      	add	r3, r1
 8013148:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	78fb      	ldrb	r3, [r7, #3]
 8013150:	4619      	mov	r1, r3
 8013152:	f7ff f92e 	bl	80123b2 <USBD_LL_DataOutStage>
}
 8013156:	bf00      	nop
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b082      	sub	sp, #8
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
 8013166:	460b      	mov	r3, r1
 8013168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8013170:	78fa      	ldrb	r2, [r7, #3]
 8013172:	6879      	ldr	r1, [r7, #4]
 8013174:	4613      	mov	r3, r2
 8013176:	00db      	lsls	r3, r3, #3
 8013178:	4413      	add	r3, r2
 801317a:	009b      	lsls	r3, r3, #2
 801317c:	440b      	add	r3, r1
 801317e:	3348      	adds	r3, #72	; 0x48
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	78fb      	ldrb	r3, [r7, #3]
 8013184:	4619      	mov	r1, r3
 8013186:	f7ff f96f 	bl	8012468 <USBD_LL_DataInStage>
}
 801318a:	bf00      	nop
 801318c:	3708      	adds	r7, #8
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}

08013192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013192:	b580      	push	{r7, lr}
 8013194:	b082      	sub	sp, #8
 8013196:	af00      	add	r7, sp, #0
 8013198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7ff fa52 	bl	801264a <USBD_LL_SOF>
}
 80131a6:	bf00      	nop
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131ae:	b580      	push	{r7, lr}
 80131b0:	b084      	sub	sp, #16
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80131b6:	2301      	movs	r3, #1
 80131b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	691b      	ldr	r3, [r3, #16]
 80131be:	2b02      	cmp	r3, #2
 80131c0:	d001      	beq.n	80131c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80131c2:	f7ee fbd4 	bl	800196e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80131cc:	7bfa      	ldrb	r2, [r7, #15]
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7ff fa07 	bl	80125e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80131dc:	4618      	mov	r0, r3
 80131de:	f7ff f9d2 	bl	8012586 <USBD_LL_Reset>
}
 80131e2:	bf00      	nop
 80131e4:	3710      	adds	r7, #16
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
	...

080131ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7ff fa01 	bl	8012602 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	687a      	ldr	r2, [r7, #4]
 801320c:	6812      	ldr	r2, [r2, #0]
 801320e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013212:	f043 0301 	orr.w	r3, r3, #1
 8013216:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6a1b      	ldr	r3, [r3, #32]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d005      	beq.n	801322c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013220:	4b04      	ldr	r3, [pc, #16]	; (8013234 <HAL_PCD_SuspendCallback+0x48>)
 8013222:	691b      	ldr	r3, [r3, #16]
 8013224:	4a03      	ldr	r2, [pc, #12]	; (8013234 <HAL_PCD_SuspendCallback+0x48>)
 8013226:	f043 0306 	orr.w	r3, r3, #6
 801322a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801322c:	bf00      	nop
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}
 8013234:	e000ed00 	.word	0xe000ed00

08013238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8013246:	4618      	mov	r0, r3
 8013248:	f7ff f9ef 	bl	801262a <USBD_LL_Resume>
}
 801324c:	bf00      	nop
 801324e:	3708      	adds	r7, #8
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	460b      	mov	r3, r1
 801325e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8013266:	78fa      	ldrb	r2, [r7, #3]
 8013268:	4611      	mov	r1, r2
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff fa13 	bl	8012696 <USBD_LL_IsoOUTIncomplete>
}
 8013270:	bf00      	nop
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	460b      	mov	r3, r1
 8013282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 801328a:	78fa      	ldrb	r2, [r7, #3]
 801328c:	4611      	mov	r1, r2
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff f9f5 	bl	801267e <USBD_LL_IsoINIncomplete>
}
 8013294:	bf00      	nop
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff f9ff 	bl	80126ae <USBD_LL_DevConnected>
}
 80132b0:	bf00      	nop
 80132b2:	3708      	adds	r7, #8
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}

080132b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff f9fb 	bl	80126c2 <USBD_LL_DevDisconnected>
}
 80132cc:	bf00      	nop
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d133      	bne.n	801334c <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80132e4:	4a1c      	ldr	r2, [pc, #112]	; (8013358 <USBD_LL_Init+0x84>)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	4a1a      	ldr	r2, [pc, #104]	; (8013358 <USBD_LL_Init+0x84>)
 80132f0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80132f4:	4b18      	ldr	r3, [pc, #96]	; (8013358 <USBD_LL_Init+0x84>)
 80132f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80132fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80132fc:	4b16      	ldr	r3, [pc, #88]	; (8013358 <USBD_LL_Init+0x84>)
 80132fe:	2204      	movs	r2, #4
 8013300:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013302:	4b15      	ldr	r3, [pc, #84]	; (8013358 <USBD_LL_Init+0x84>)
 8013304:	2202      	movs	r2, #2
 8013306:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013308:	4b13      	ldr	r3, [pc, #76]	; (8013358 <USBD_LL_Init+0x84>)
 801330a:	2202      	movs	r2, #2
 801330c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801330e:	4b12      	ldr	r3, [pc, #72]	; (8013358 <USBD_LL_Init+0x84>)
 8013310:	2200      	movs	r2, #0
 8013312:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013314:	4b10      	ldr	r3, [pc, #64]	; (8013358 <USBD_LL_Init+0x84>)
 8013316:	2200      	movs	r2, #0
 8013318:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801331a:	4b0f      	ldr	r3, [pc, #60]	; (8013358 <USBD_LL_Init+0x84>)
 801331c:	2200      	movs	r2, #0
 801331e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013320:	480d      	ldr	r0, [pc, #52]	; (8013358 <USBD_LL_Init+0x84>)
 8013322:	f7f0 fd6d 	bl	8003e00 <HAL_PCD_Init>
 8013326:	4603      	mov	r3, r0
 8013328:	2b00      	cmp	r3, #0
 801332a:	d001      	beq.n	8013330 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801332c:	f7ee fb1f 	bl	800196e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013330:	2180      	movs	r1, #128	; 0x80
 8013332:	4809      	ldr	r0, [pc, #36]	; (8013358 <USBD_LL_Init+0x84>)
 8013334:	f7f1 fe8c 	bl	8005050 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013338:	2240      	movs	r2, #64	; 0x40
 801333a:	2100      	movs	r1, #0
 801333c:	4806      	ldr	r0, [pc, #24]	; (8013358 <USBD_LL_Init+0x84>)
 801333e:	f7f1 fe41 	bl	8004fc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013342:	2280      	movs	r2, #128	; 0x80
 8013344:	2101      	movs	r1, #1
 8013346:	4804      	ldr	r0, [pc, #16]	; (8013358 <USBD_LL_Init+0x84>)
 8013348:	f7f1 fe3c 	bl	8004fc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801334c:	2300      	movs	r3, #0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	2000923c 	.word	0x2000923c

0801335c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013368:	2300      	movs	r3, #0
 801336a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013372:	4618      	mov	r0, r3
 8013374:	f7f0 fe68 	bl	8004048 <HAL_PCD_Start>
 8013378:	4603      	mov	r3, r0
 801337a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801337c:	7bfb      	ldrb	r3, [r7, #15]
 801337e:	4618      	mov	r0, r3
 8013380:	f000 f944 	bl	801360c <USBD_Get_USB_Status>
 8013384:	4603      	mov	r3, r0
 8013386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013388:	7bbb      	ldrb	r3, [r7, #14]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b084      	sub	sp, #16
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
 801339a:	4608      	mov	r0, r1
 801339c:	4611      	mov	r1, r2
 801339e:	461a      	mov	r2, r3
 80133a0:	4603      	mov	r3, r0
 80133a2:	70fb      	strb	r3, [r7, #3]
 80133a4:	460b      	mov	r3, r1
 80133a6:	70bb      	strb	r3, [r7, #2]
 80133a8:	4613      	mov	r3, r2
 80133aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133ac:	2300      	movs	r3, #0
 80133ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133b0:	2300      	movs	r3, #0
 80133b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80133ba:	78bb      	ldrb	r3, [r7, #2]
 80133bc:	883a      	ldrh	r2, [r7, #0]
 80133be:	78f9      	ldrb	r1, [r7, #3]
 80133c0:	f7f1 fae1 	bl	8004986 <HAL_PCD_EP_Open>
 80133c4:	4603      	mov	r3, r0
 80133c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133c8:	7bfb      	ldrb	r3, [r7, #15]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f000 f91e 	bl	801360c <USBD_Get_USB_Status>
 80133d0:	4603      	mov	r3, r0
 80133d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}

080133de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133de:	b580      	push	{r7, lr}
 80133e0:	b084      	sub	sp, #16
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
 80133e6:	460b      	mov	r3, r1
 80133e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133ea:	2300      	movs	r3, #0
 80133ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133ee:	2300      	movs	r3, #0
 80133f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80133f8:	78fa      	ldrb	r2, [r7, #3]
 80133fa:	4611      	mov	r1, r2
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7f1 fb2a 	bl	8004a56 <HAL_PCD_EP_Close>
 8013402:	4603      	mov	r3, r0
 8013404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013406:	7bfb      	ldrb	r3, [r7, #15]
 8013408:	4618      	mov	r0, r3
 801340a:	f000 f8ff 	bl	801360c <USBD_Get_USB_Status>
 801340e:	4603      	mov	r3, r0
 8013410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013412:	7bbb      	ldrb	r3, [r7, #14]
}
 8013414:	4618      	mov	r0, r3
 8013416:	3710      	adds	r7, #16
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	460b      	mov	r3, r1
 8013426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013428:	2300      	movs	r3, #0
 801342a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801342c:	2300      	movs	r3, #0
 801342e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013436:	78fa      	ldrb	r2, [r7, #3]
 8013438:	4611      	mov	r1, r2
 801343a:	4618      	mov	r0, r3
 801343c:	f7f1 fbcf 	bl	8004bde <HAL_PCD_EP_SetStall>
 8013440:	4603      	mov	r3, r0
 8013442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013444:	7bfb      	ldrb	r3, [r7, #15]
 8013446:	4618      	mov	r0, r3
 8013448:	f000 f8e0 	bl	801360c <USBD_Get_USB_Status>
 801344c:	4603      	mov	r3, r0
 801344e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013450:	7bbb      	ldrb	r3, [r7, #14]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}

0801345a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801345a:	b580      	push	{r7, lr}
 801345c:	b084      	sub	sp, #16
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
 8013462:	460b      	mov	r3, r1
 8013464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013466:	2300      	movs	r3, #0
 8013468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801346a:	2300      	movs	r3, #0
 801346c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013474:	78fa      	ldrb	r2, [r7, #3]
 8013476:	4611      	mov	r1, r2
 8013478:	4618      	mov	r0, r3
 801347a:	f7f1 fc12 	bl	8004ca2 <HAL_PCD_EP_ClrStall>
 801347e:	4603      	mov	r3, r0
 8013480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013482:	7bfb      	ldrb	r3, [r7, #15]
 8013484:	4618      	mov	r0, r3
 8013486:	f000 f8c1 	bl	801360c <USBD_Get_USB_Status>
 801348a:	4603      	mov	r3, r0
 801348c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801348e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013490:	4618      	mov	r0, r3
 8013492:	3710      	adds	r7, #16
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	460b      	mov	r3, r1
 80134a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80134aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80134ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	da0b      	bge.n	80134cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80134b4:	78fb      	ldrb	r3, [r7, #3]
 80134b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80134ba:	68f9      	ldr	r1, [r7, #12]
 80134bc:	4613      	mov	r3, r2
 80134be:	00db      	lsls	r3, r3, #3
 80134c0:	4413      	add	r3, r2
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	440b      	add	r3, r1
 80134c6:	333e      	adds	r3, #62	; 0x3e
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	e00b      	b.n	80134e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80134cc:	78fb      	ldrb	r3, [r7, #3]
 80134ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80134d2:	68f9      	ldr	r1, [r7, #12]
 80134d4:	4613      	mov	r3, r2
 80134d6:	00db      	lsls	r3, r3, #3
 80134d8:	4413      	add	r3, r2
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	440b      	add	r3, r1
 80134de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80134e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3714      	adds	r7, #20
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bc80      	pop	{r7}
 80134ec:	4770      	bx	lr

080134ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b084      	sub	sp, #16
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
 80134f6:	460b      	mov	r3, r1
 80134f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134fa:	2300      	movs	r3, #0
 80134fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134fe:	2300      	movs	r3, #0
 8013500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013508:	78fa      	ldrb	r2, [r7, #3]
 801350a:	4611      	mov	r1, r2
 801350c:	4618      	mov	r0, r3
 801350e:	f7f1 fa15 	bl	800493c <HAL_PCD_SetAddress>
 8013512:	4603      	mov	r3, r0
 8013514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013516:	7bfb      	ldrb	r3, [r7, #15]
 8013518:	4618      	mov	r0, r3
 801351a:	f000 f877 	bl	801360c <USBD_Get_USB_Status>
 801351e:	4603      	mov	r3, r0
 8013520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013522:	7bbb      	ldrb	r3, [r7, #14]
}
 8013524:	4618      	mov	r0, r3
 8013526:	3710      	adds	r7, #16
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b086      	sub	sp, #24
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	607a      	str	r2, [r7, #4]
 8013536:	461a      	mov	r2, r3
 8013538:	460b      	mov	r3, r1
 801353a:	72fb      	strb	r3, [r7, #11]
 801353c:	4613      	mov	r3, r2
 801353e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013540:	2300      	movs	r3, #0
 8013542:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013544:	2300      	movs	r3, #0
 8013546:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801354e:	893b      	ldrh	r3, [r7, #8]
 8013550:	7af9      	ldrb	r1, [r7, #11]
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	f7f1 fb12 	bl	8004b7c <HAL_PCD_EP_Transmit>
 8013558:	4603      	mov	r3, r0
 801355a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801355c:	7dfb      	ldrb	r3, [r7, #23]
 801355e:	4618      	mov	r0, r3
 8013560:	f000 f854 	bl	801360c <USBD_Get_USB_Status>
 8013564:	4603      	mov	r3, r0
 8013566:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013568:	7dbb      	ldrb	r3, [r7, #22]
}
 801356a:	4618      	mov	r0, r3
 801356c:	3718      	adds	r7, #24
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}

08013572 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013572:	b580      	push	{r7, lr}
 8013574:	b086      	sub	sp, #24
 8013576:	af00      	add	r7, sp, #0
 8013578:	60f8      	str	r0, [r7, #12]
 801357a:	607a      	str	r2, [r7, #4]
 801357c:	461a      	mov	r2, r3
 801357e:	460b      	mov	r3, r1
 8013580:	72fb      	strb	r3, [r7, #11]
 8013582:	4613      	mov	r3, r2
 8013584:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013586:	2300      	movs	r3, #0
 8013588:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801358a:	2300      	movs	r3, #0
 801358c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013594:	893b      	ldrh	r3, [r7, #8]
 8013596:	7af9      	ldrb	r1, [r7, #11]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	f7f1 faa6 	bl	8004aea <HAL_PCD_EP_Receive>
 801359e:	4603      	mov	r3, r0
 80135a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135a2:	7dfb      	ldrb	r3, [r7, #23]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f000 f831 	bl	801360c <USBD_Get_USB_Status>
 80135aa:	4603      	mov	r3, r0
 80135ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3718      	adds	r7, #24
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	460b      	mov	r3, r1
 80135c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80135ca:	78fa      	ldrb	r2, [r7, #3]
 80135cc:	4611      	mov	r1, r2
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7f1 fabd 	bl	8004b4e <HAL_PCD_EP_GetRxCount>
 80135d4:	4603      	mov	r3, r0
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3708      	adds	r7, #8
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
	...

080135e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80135e8:	4b02      	ldr	r3, [pc, #8]	; (80135f4 <USBD_static_malloc+0x14>)
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	370c      	adds	r7, #12
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bc80      	pop	{r7}
 80135f2:	4770      	bx	lr
 80135f4:	20009740 	.word	0x20009740

080135f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]

}
 8013600:	bf00      	nop
 8013602:	370c      	adds	r7, #12
 8013604:	46bd      	mov	sp, r7
 8013606:	bc80      	pop	{r7}
 8013608:	4770      	bx	lr
	...

0801360c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801360c:	b480      	push	{r7}
 801360e:	b085      	sub	sp, #20
 8013610:	af00      	add	r7, sp, #0
 8013612:	4603      	mov	r3, r0
 8013614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013616:	2300      	movs	r3, #0
 8013618:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801361a:	79fb      	ldrb	r3, [r7, #7]
 801361c:	2b03      	cmp	r3, #3
 801361e:	d817      	bhi.n	8013650 <USBD_Get_USB_Status+0x44>
 8013620:	a201      	add	r2, pc, #4	; (adr r2, 8013628 <USBD_Get_USB_Status+0x1c>)
 8013622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013626:	bf00      	nop
 8013628:	08013639 	.word	0x08013639
 801362c:	0801363f 	.word	0x0801363f
 8013630:	08013645 	.word	0x08013645
 8013634:	0801364b 	.word	0x0801364b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	73fb      	strb	r3, [r7, #15]
    break;
 801363c:	e00b      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801363e:	2302      	movs	r3, #2
 8013640:	73fb      	strb	r3, [r7, #15]
    break;
 8013642:	e008      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013644:	2301      	movs	r3, #1
 8013646:	73fb      	strb	r3, [r7, #15]
    break;
 8013648:	e005      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801364a:	2302      	movs	r3, #2
 801364c:	73fb      	strb	r3, [r7, #15]
    break;
 801364e:	e002      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013650:	2302      	movs	r3, #2
 8013652:	73fb      	strb	r3, [r7, #15]
    break;
 8013654:	bf00      	nop
  }
  return usb_status;
 8013656:	7bfb      	ldrb	r3, [r7, #15]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	bc80      	pop	{r7}
 8013660:	4770      	bx	lr
 8013662:	bf00      	nop

08013664 <__libc_init_array>:
 8013664:	b570      	push	{r4, r5, r6, lr}
 8013666:	2600      	movs	r6, #0
 8013668:	4d0c      	ldr	r5, [pc, #48]	; (801369c <__libc_init_array+0x38>)
 801366a:	4c0d      	ldr	r4, [pc, #52]	; (80136a0 <__libc_init_array+0x3c>)
 801366c:	1b64      	subs	r4, r4, r5
 801366e:	10a4      	asrs	r4, r4, #2
 8013670:	42a6      	cmp	r6, r4
 8013672:	d109      	bne.n	8013688 <__libc_init_array+0x24>
 8013674:	f001 f896 	bl	80147a4 <_init>
 8013678:	2600      	movs	r6, #0
 801367a:	4d0a      	ldr	r5, [pc, #40]	; (80136a4 <__libc_init_array+0x40>)
 801367c:	4c0a      	ldr	r4, [pc, #40]	; (80136a8 <__libc_init_array+0x44>)
 801367e:	1b64      	subs	r4, r4, r5
 8013680:	10a4      	asrs	r4, r4, #2
 8013682:	42a6      	cmp	r6, r4
 8013684:	d105      	bne.n	8013692 <__libc_init_array+0x2e>
 8013686:	bd70      	pop	{r4, r5, r6, pc}
 8013688:	f855 3b04 	ldr.w	r3, [r5], #4
 801368c:	4798      	blx	r3
 801368e:	3601      	adds	r6, #1
 8013690:	e7ee      	b.n	8013670 <__libc_init_array+0xc>
 8013692:	f855 3b04 	ldr.w	r3, [r5], #4
 8013696:	4798      	blx	r3
 8013698:	3601      	adds	r6, #1
 801369a:	e7f2      	b.n	8013682 <__libc_init_array+0x1e>
 801369c:	08016824 	.word	0x08016824
 80136a0:	08016824 	.word	0x08016824
 80136a4:	08016824 	.word	0x08016824
 80136a8:	08016828 	.word	0x08016828

080136ac <malloc>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <malloc+0xc>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f000 b891 	b.w	80137d8 <_malloc_r>
 80136b6:	bf00      	nop
 80136b8:	20000188 	.word	0x20000188

080136bc <memcmp>:
 80136bc:	b510      	push	{r4, lr}
 80136be:	3901      	subs	r1, #1
 80136c0:	4402      	add	r2, r0
 80136c2:	4290      	cmp	r0, r2
 80136c4:	d101      	bne.n	80136ca <memcmp+0xe>
 80136c6:	2000      	movs	r0, #0
 80136c8:	e005      	b.n	80136d6 <memcmp+0x1a>
 80136ca:	7803      	ldrb	r3, [r0, #0]
 80136cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80136d0:	42a3      	cmp	r3, r4
 80136d2:	d001      	beq.n	80136d8 <memcmp+0x1c>
 80136d4:	1b18      	subs	r0, r3, r4
 80136d6:	bd10      	pop	{r4, pc}
 80136d8:	3001      	adds	r0, #1
 80136da:	e7f2      	b.n	80136c2 <memcmp+0x6>

080136dc <memcpy>:
 80136dc:	440a      	add	r2, r1
 80136de:	4291      	cmp	r1, r2
 80136e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80136e4:	d100      	bne.n	80136e8 <memcpy+0xc>
 80136e6:	4770      	bx	lr
 80136e8:	b510      	push	{r4, lr}
 80136ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136ee:	4291      	cmp	r1, r2
 80136f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136f4:	d1f9      	bne.n	80136ea <memcpy+0xe>
 80136f6:	bd10      	pop	{r4, pc}

080136f8 <memset>:
 80136f8:	4603      	mov	r3, r0
 80136fa:	4402      	add	r2, r0
 80136fc:	4293      	cmp	r3, r2
 80136fe:	d100      	bne.n	8013702 <memset+0xa>
 8013700:	4770      	bx	lr
 8013702:	f803 1b01 	strb.w	r1, [r3], #1
 8013706:	e7f9      	b.n	80136fc <memset+0x4>

08013708 <_free_r>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4605      	mov	r5, r0
 801370c:	2900      	cmp	r1, #0
 801370e:	d040      	beq.n	8013792 <_free_r+0x8a>
 8013710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013714:	1f0c      	subs	r4, r1, #4
 8013716:	2b00      	cmp	r3, #0
 8013718:	bfb8      	it	lt
 801371a:	18e4      	addlt	r4, r4, r3
 801371c:	f000 fa5e 	bl	8013bdc <__malloc_lock>
 8013720:	4a1c      	ldr	r2, [pc, #112]	; (8013794 <_free_r+0x8c>)
 8013722:	6813      	ldr	r3, [r2, #0]
 8013724:	b933      	cbnz	r3, 8013734 <_free_r+0x2c>
 8013726:	6063      	str	r3, [r4, #4]
 8013728:	6014      	str	r4, [r2, #0]
 801372a:	4628      	mov	r0, r5
 801372c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013730:	f000 ba5a 	b.w	8013be8 <__malloc_unlock>
 8013734:	42a3      	cmp	r3, r4
 8013736:	d908      	bls.n	801374a <_free_r+0x42>
 8013738:	6820      	ldr	r0, [r4, #0]
 801373a:	1821      	adds	r1, r4, r0
 801373c:	428b      	cmp	r3, r1
 801373e:	bf01      	itttt	eq
 8013740:	6819      	ldreq	r1, [r3, #0]
 8013742:	685b      	ldreq	r3, [r3, #4]
 8013744:	1809      	addeq	r1, r1, r0
 8013746:	6021      	streq	r1, [r4, #0]
 8013748:	e7ed      	b.n	8013726 <_free_r+0x1e>
 801374a:	461a      	mov	r2, r3
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	b10b      	cbz	r3, 8013754 <_free_r+0x4c>
 8013750:	42a3      	cmp	r3, r4
 8013752:	d9fa      	bls.n	801374a <_free_r+0x42>
 8013754:	6811      	ldr	r1, [r2, #0]
 8013756:	1850      	adds	r0, r2, r1
 8013758:	42a0      	cmp	r0, r4
 801375a:	d10b      	bne.n	8013774 <_free_r+0x6c>
 801375c:	6820      	ldr	r0, [r4, #0]
 801375e:	4401      	add	r1, r0
 8013760:	1850      	adds	r0, r2, r1
 8013762:	4283      	cmp	r3, r0
 8013764:	6011      	str	r1, [r2, #0]
 8013766:	d1e0      	bne.n	801372a <_free_r+0x22>
 8013768:	6818      	ldr	r0, [r3, #0]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	4401      	add	r1, r0
 801376e:	6011      	str	r1, [r2, #0]
 8013770:	6053      	str	r3, [r2, #4]
 8013772:	e7da      	b.n	801372a <_free_r+0x22>
 8013774:	d902      	bls.n	801377c <_free_r+0x74>
 8013776:	230c      	movs	r3, #12
 8013778:	602b      	str	r3, [r5, #0]
 801377a:	e7d6      	b.n	801372a <_free_r+0x22>
 801377c:	6820      	ldr	r0, [r4, #0]
 801377e:	1821      	adds	r1, r4, r0
 8013780:	428b      	cmp	r3, r1
 8013782:	bf01      	itttt	eq
 8013784:	6819      	ldreq	r1, [r3, #0]
 8013786:	685b      	ldreq	r3, [r3, #4]
 8013788:	1809      	addeq	r1, r1, r0
 801378a:	6021      	streq	r1, [r4, #0]
 801378c:	6063      	str	r3, [r4, #4]
 801378e:	6054      	str	r4, [r2, #4]
 8013790:	e7cb      	b.n	801372a <_free_r+0x22>
 8013792:	bd38      	pop	{r3, r4, r5, pc}
 8013794:	20009960 	.word	0x20009960

08013798 <sbrk_aligned>:
 8013798:	b570      	push	{r4, r5, r6, lr}
 801379a:	4e0e      	ldr	r6, [pc, #56]	; (80137d4 <sbrk_aligned+0x3c>)
 801379c:	460c      	mov	r4, r1
 801379e:	6831      	ldr	r1, [r6, #0]
 80137a0:	4605      	mov	r5, r0
 80137a2:	b911      	cbnz	r1, 80137aa <sbrk_aligned+0x12>
 80137a4:	f000 f8e2 	bl	801396c <_sbrk_r>
 80137a8:	6030      	str	r0, [r6, #0]
 80137aa:	4621      	mov	r1, r4
 80137ac:	4628      	mov	r0, r5
 80137ae:	f000 f8dd 	bl	801396c <_sbrk_r>
 80137b2:	1c43      	adds	r3, r0, #1
 80137b4:	d00a      	beq.n	80137cc <sbrk_aligned+0x34>
 80137b6:	1cc4      	adds	r4, r0, #3
 80137b8:	f024 0403 	bic.w	r4, r4, #3
 80137bc:	42a0      	cmp	r0, r4
 80137be:	d007      	beq.n	80137d0 <sbrk_aligned+0x38>
 80137c0:	1a21      	subs	r1, r4, r0
 80137c2:	4628      	mov	r0, r5
 80137c4:	f000 f8d2 	bl	801396c <_sbrk_r>
 80137c8:	3001      	adds	r0, #1
 80137ca:	d101      	bne.n	80137d0 <sbrk_aligned+0x38>
 80137cc:	f04f 34ff 	mov.w	r4, #4294967295
 80137d0:	4620      	mov	r0, r4
 80137d2:	bd70      	pop	{r4, r5, r6, pc}
 80137d4:	20009964 	.word	0x20009964

080137d8 <_malloc_r>:
 80137d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137dc:	1ccd      	adds	r5, r1, #3
 80137de:	f025 0503 	bic.w	r5, r5, #3
 80137e2:	3508      	adds	r5, #8
 80137e4:	2d0c      	cmp	r5, #12
 80137e6:	bf38      	it	cc
 80137e8:	250c      	movcc	r5, #12
 80137ea:	2d00      	cmp	r5, #0
 80137ec:	4607      	mov	r7, r0
 80137ee:	db01      	blt.n	80137f4 <_malloc_r+0x1c>
 80137f0:	42a9      	cmp	r1, r5
 80137f2:	d905      	bls.n	8013800 <_malloc_r+0x28>
 80137f4:	230c      	movs	r3, #12
 80137f6:	2600      	movs	r6, #0
 80137f8:	603b      	str	r3, [r7, #0]
 80137fa:	4630      	mov	r0, r6
 80137fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013800:	4e2e      	ldr	r6, [pc, #184]	; (80138bc <_malloc_r+0xe4>)
 8013802:	f000 f9eb 	bl	8013bdc <__malloc_lock>
 8013806:	6833      	ldr	r3, [r6, #0]
 8013808:	461c      	mov	r4, r3
 801380a:	bb34      	cbnz	r4, 801385a <_malloc_r+0x82>
 801380c:	4629      	mov	r1, r5
 801380e:	4638      	mov	r0, r7
 8013810:	f7ff ffc2 	bl	8013798 <sbrk_aligned>
 8013814:	1c43      	adds	r3, r0, #1
 8013816:	4604      	mov	r4, r0
 8013818:	d14d      	bne.n	80138b6 <_malloc_r+0xde>
 801381a:	6834      	ldr	r4, [r6, #0]
 801381c:	4626      	mov	r6, r4
 801381e:	2e00      	cmp	r6, #0
 8013820:	d140      	bne.n	80138a4 <_malloc_r+0xcc>
 8013822:	6823      	ldr	r3, [r4, #0]
 8013824:	4631      	mov	r1, r6
 8013826:	4638      	mov	r0, r7
 8013828:	eb04 0803 	add.w	r8, r4, r3
 801382c:	f000 f89e 	bl	801396c <_sbrk_r>
 8013830:	4580      	cmp	r8, r0
 8013832:	d13a      	bne.n	80138aa <_malloc_r+0xd2>
 8013834:	6821      	ldr	r1, [r4, #0]
 8013836:	3503      	adds	r5, #3
 8013838:	1a6d      	subs	r5, r5, r1
 801383a:	f025 0503 	bic.w	r5, r5, #3
 801383e:	3508      	adds	r5, #8
 8013840:	2d0c      	cmp	r5, #12
 8013842:	bf38      	it	cc
 8013844:	250c      	movcc	r5, #12
 8013846:	4638      	mov	r0, r7
 8013848:	4629      	mov	r1, r5
 801384a:	f7ff ffa5 	bl	8013798 <sbrk_aligned>
 801384e:	3001      	adds	r0, #1
 8013850:	d02b      	beq.n	80138aa <_malloc_r+0xd2>
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	442b      	add	r3, r5
 8013856:	6023      	str	r3, [r4, #0]
 8013858:	e00e      	b.n	8013878 <_malloc_r+0xa0>
 801385a:	6822      	ldr	r2, [r4, #0]
 801385c:	1b52      	subs	r2, r2, r5
 801385e:	d41e      	bmi.n	801389e <_malloc_r+0xc6>
 8013860:	2a0b      	cmp	r2, #11
 8013862:	d916      	bls.n	8013892 <_malloc_r+0xba>
 8013864:	1961      	adds	r1, r4, r5
 8013866:	42a3      	cmp	r3, r4
 8013868:	6025      	str	r5, [r4, #0]
 801386a:	bf18      	it	ne
 801386c:	6059      	strne	r1, [r3, #4]
 801386e:	6863      	ldr	r3, [r4, #4]
 8013870:	bf08      	it	eq
 8013872:	6031      	streq	r1, [r6, #0]
 8013874:	5162      	str	r2, [r4, r5]
 8013876:	604b      	str	r3, [r1, #4]
 8013878:	4638      	mov	r0, r7
 801387a:	f104 060b 	add.w	r6, r4, #11
 801387e:	f000 f9b3 	bl	8013be8 <__malloc_unlock>
 8013882:	f026 0607 	bic.w	r6, r6, #7
 8013886:	1d23      	adds	r3, r4, #4
 8013888:	1af2      	subs	r2, r6, r3
 801388a:	d0b6      	beq.n	80137fa <_malloc_r+0x22>
 801388c:	1b9b      	subs	r3, r3, r6
 801388e:	50a3      	str	r3, [r4, r2]
 8013890:	e7b3      	b.n	80137fa <_malloc_r+0x22>
 8013892:	6862      	ldr	r2, [r4, #4]
 8013894:	42a3      	cmp	r3, r4
 8013896:	bf0c      	ite	eq
 8013898:	6032      	streq	r2, [r6, #0]
 801389a:	605a      	strne	r2, [r3, #4]
 801389c:	e7ec      	b.n	8013878 <_malloc_r+0xa0>
 801389e:	4623      	mov	r3, r4
 80138a0:	6864      	ldr	r4, [r4, #4]
 80138a2:	e7b2      	b.n	801380a <_malloc_r+0x32>
 80138a4:	4634      	mov	r4, r6
 80138a6:	6876      	ldr	r6, [r6, #4]
 80138a8:	e7b9      	b.n	801381e <_malloc_r+0x46>
 80138aa:	230c      	movs	r3, #12
 80138ac:	4638      	mov	r0, r7
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	f000 f99a 	bl	8013be8 <__malloc_unlock>
 80138b4:	e7a1      	b.n	80137fa <_malloc_r+0x22>
 80138b6:	6025      	str	r5, [r4, #0]
 80138b8:	e7de      	b.n	8013878 <_malloc_r+0xa0>
 80138ba:	bf00      	nop
 80138bc:	20009960 	.word	0x20009960

080138c0 <iprintf>:
 80138c0:	b40f      	push	{r0, r1, r2, r3}
 80138c2:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <iprintf+0x2c>)
 80138c4:	b513      	push	{r0, r1, r4, lr}
 80138c6:	681c      	ldr	r4, [r3, #0]
 80138c8:	b124      	cbz	r4, 80138d4 <iprintf+0x14>
 80138ca:	69a3      	ldr	r3, [r4, #24]
 80138cc:	b913      	cbnz	r3, 80138d4 <iprintf+0x14>
 80138ce:	4620      	mov	r0, r4
 80138d0:	f000 f8d2 	bl	8013a78 <__sinit>
 80138d4:	ab05      	add	r3, sp, #20
 80138d6:	4620      	mov	r0, r4
 80138d8:	9a04      	ldr	r2, [sp, #16]
 80138da:	68a1      	ldr	r1, [r4, #8]
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	f000 f9b1 	bl	8013c44 <_vfiprintf_r>
 80138e2:	b002      	add	sp, #8
 80138e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138e8:	b004      	add	sp, #16
 80138ea:	4770      	bx	lr
 80138ec:	20000188 	.word	0x20000188

080138f0 <rand>:
 80138f0:	4b16      	ldr	r3, [pc, #88]	; (801394c <rand+0x5c>)
 80138f2:	b510      	push	{r4, lr}
 80138f4:	681c      	ldr	r4, [r3, #0]
 80138f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80138f8:	b9b3      	cbnz	r3, 8013928 <rand+0x38>
 80138fa:	2018      	movs	r0, #24
 80138fc:	f7ff fed6 	bl	80136ac <malloc>
 8013900:	4602      	mov	r2, r0
 8013902:	63a0      	str	r0, [r4, #56]	; 0x38
 8013904:	b920      	cbnz	r0, 8013910 <rand+0x20>
 8013906:	214e      	movs	r1, #78	; 0x4e
 8013908:	4b11      	ldr	r3, [pc, #68]	; (8013950 <rand+0x60>)
 801390a:	4812      	ldr	r0, [pc, #72]	; (8013954 <rand+0x64>)
 801390c:	f000 f83e 	bl	801398c <__assert_func>
 8013910:	4911      	ldr	r1, [pc, #68]	; (8013958 <rand+0x68>)
 8013912:	4b12      	ldr	r3, [pc, #72]	; (801395c <rand+0x6c>)
 8013914:	e9c0 1300 	strd	r1, r3, [r0]
 8013918:	4b11      	ldr	r3, [pc, #68]	; (8013960 <rand+0x70>)
 801391a:	2100      	movs	r1, #0
 801391c:	6083      	str	r3, [r0, #8]
 801391e:	230b      	movs	r3, #11
 8013920:	8183      	strh	r3, [r0, #12]
 8013922:	2001      	movs	r0, #1
 8013924:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013928:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801392a:	4a0e      	ldr	r2, [pc, #56]	; (8013964 <rand+0x74>)
 801392c:	6920      	ldr	r0, [r4, #16]
 801392e:	6963      	ldr	r3, [r4, #20]
 8013930:	4342      	muls	r2, r0
 8013932:	490d      	ldr	r1, [pc, #52]	; (8013968 <rand+0x78>)
 8013934:	fb01 2203 	mla	r2, r1, r3, r2
 8013938:	fba0 0101 	umull	r0, r1, r0, r1
 801393c:	1c43      	adds	r3, r0, #1
 801393e:	eb42 0001 	adc.w	r0, r2, r1
 8013942:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013946:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801394a:	bd10      	pop	{r4, pc}
 801394c:	20000188 	.word	0x20000188
 8013950:	080166d8 	.word	0x080166d8
 8013954:	080166ef 	.word	0x080166ef
 8013958:	abcd330e 	.word	0xabcd330e
 801395c:	e66d1234 	.word	0xe66d1234
 8013960:	0005deec 	.word	0x0005deec
 8013964:	5851f42d 	.word	0x5851f42d
 8013968:	4c957f2d 	.word	0x4c957f2d

0801396c <_sbrk_r>:
 801396c:	b538      	push	{r3, r4, r5, lr}
 801396e:	2300      	movs	r3, #0
 8013970:	4d05      	ldr	r5, [pc, #20]	; (8013988 <_sbrk_r+0x1c>)
 8013972:	4604      	mov	r4, r0
 8013974:	4608      	mov	r0, r1
 8013976:	602b      	str	r3, [r5, #0]
 8013978:	f7ee f8f4 	bl	8001b64 <_sbrk>
 801397c:	1c43      	adds	r3, r0, #1
 801397e:	d102      	bne.n	8013986 <_sbrk_r+0x1a>
 8013980:	682b      	ldr	r3, [r5, #0]
 8013982:	b103      	cbz	r3, 8013986 <_sbrk_r+0x1a>
 8013984:	6023      	str	r3, [r4, #0]
 8013986:	bd38      	pop	{r3, r4, r5, pc}
 8013988:	20009968 	.word	0x20009968

0801398c <__assert_func>:
 801398c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801398e:	4614      	mov	r4, r2
 8013990:	461a      	mov	r2, r3
 8013992:	4b09      	ldr	r3, [pc, #36]	; (80139b8 <__assert_func+0x2c>)
 8013994:	4605      	mov	r5, r0
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	68d8      	ldr	r0, [r3, #12]
 801399a:	b14c      	cbz	r4, 80139b0 <__assert_func+0x24>
 801399c:	4b07      	ldr	r3, [pc, #28]	; (80139bc <__assert_func+0x30>)
 801399e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139a2:	9100      	str	r1, [sp, #0]
 80139a4:	462b      	mov	r3, r5
 80139a6:	4906      	ldr	r1, [pc, #24]	; (80139c0 <__assert_func+0x34>)
 80139a8:	f000 f8e4 	bl	8013b74 <fiprintf>
 80139ac:	f000 fd26 	bl	80143fc <abort>
 80139b0:	4b04      	ldr	r3, [pc, #16]	; (80139c4 <__assert_func+0x38>)
 80139b2:	461c      	mov	r4, r3
 80139b4:	e7f3      	b.n	801399e <__assert_func+0x12>
 80139b6:	bf00      	nop
 80139b8:	20000188 	.word	0x20000188
 80139bc:	0801674a 	.word	0x0801674a
 80139c0:	08016757 	.word	0x08016757
 80139c4:	08016785 	.word	0x08016785

080139c8 <std>:
 80139c8:	2300      	movs	r3, #0
 80139ca:	b510      	push	{r4, lr}
 80139cc:	4604      	mov	r4, r0
 80139ce:	e9c0 3300 	strd	r3, r3, [r0]
 80139d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139d6:	6083      	str	r3, [r0, #8]
 80139d8:	8181      	strh	r1, [r0, #12]
 80139da:	6643      	str	r3, [r0, #100]	; 0x64
 80139dc:	81c2      	strh	r2, [r0, #14]
 80139de:	6183      	str	r3, [r0, #24]
 80139e0:	4619      	mov	r1, r3
 80139e2:	2208      	movs	r2, #8
 80139e4:	305c      	adds	r0, #92	; 0x5c
 80139e6:	f7ff fe87 	bl	80136f8 <memset>
 80139ea:	4b05      	ldr	r3, [pc, #20]	; (8013a00 <std+0x38>)
 80139ec:	6224      	str	r4, [r4, #32]
 80139ee:	6263      	str	r3, [r4, #36]	; 0x24
 80139f0:	4b04      	ldr	r3, [pc, #16]	; (8013a04 <std+0x3c>)
 80139f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80139f4:	4b04      	ldr	r3, [pc, #16]	; (8013a08 <std+0x40>)
 80139f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139f8:	4b04      	ldr	r3, [pc, #16]	; (8013a0c <std+0x44>)
 80139fa:	6323      	str	r3, [r4, #48]	; 0x30
 80139fc:	bd10      	pop	{r4, pc}
 80139fe:	bf00      	nop
 8013a00:	080141d1 	.word	0x080141d1
 8013a04:	080141f3 	.word	0x080141f3
 8013a08:	0801422b 	.word	0x0801422b
 8013a0c:	0801424f 	.word	0x0801424f

08013a10 <_cleanup_r>:
 8013a10:	4901      	ldr	r1, [pc, #4]	; (8013a18 <_cleanup_r+0x8>)
 8013a12:	f000 b8c1 	b.w	8013b98 <_fwalk_reent>
 8013a16:	bf00      	nop
 8013a18:	08014531 	.word	0x08014531

08013a1c <__sfmoreglue>:
 8013a1c:	2268      	movs	r2, #104	; 0x68
 8013a1e:	b570      	push	{r4, r5, r6, lr}
 8013a20:	1e4d      	subs	r5, r1, #1
 8013a22:	4355      	muls	r5, r2
 8013a24:	460e      	mov	r6, r1
 8013a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a2a:	f7ff fed5 	bl	80137d8 <_malloc_r>
 8013a2e:	4604      	mov	r4, r0
 8013a30:	b140      	cbz	r0, 8013a44 <__sfmoreglue+0x28>
 8013a32:	2100      	movs	r1, #0
 8013a34:	e9c0 1600 	strd	r1, r6, [r0]
 8013a38:	300c      	adds	r0, #12
 8013a3a:	60a0      	str	r0, [r4, #8]
 8013a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a40:	f7ff fe5a 	bl	80136f8 <memset>
 8013a44:	4620      	mov	r0, r4
 8013a46:	bd70      	pop	{r4, r5, r6, pc}

08013a48 <__sfp_lock_acquire>:
 8013a48:	4801      	ldr	r0, [pc, #4]	; (8013a50 <__sfp_lock_acquire+0x8>)
 8013a4a:	f000 b8c5 	b.w	8013bd8 <__retarget_lock_acquire_recursive>
 8013a4e:	bf00      	nop
 8013a50:	2000996d 	.word	0x2000996d

08013a54 <__sfp_lock_release>:
 8013a54:	4801      	ldr	r0, [pc, #4]	; (8013a5c <__sfp_lock_release+0x8>)
 8013a56:	f000 b8c0 	b.w	8013bda <__retarget_lock_release_recursive>
 8013a5a:	bf00      	nop
 8013a5c:	2000996d 	.word	0x2000996d

08013a60 <__sinit_lock_acquire>:
 8013a60:	4801      	ldr	r0, [pc, #4]	; (8013a68 <__sinit_lock_acquire+0x8>)
 8013a62:	f000 b8b9 	b.w	8013bd8 <__retarget_lock_acquire_recursive>
 8013a66:	bf00      	nop
 8013a68:	2000996e 	.word	0x2000996e

08013a6c <__sinit_lock_release>:
 8013a6c:	4801      	ldr	r0, [pc, #4]	; (8013a74 <__sinit_lock_release+0x8>)
 8013a6e:	f000 b8b4 	b.w	8013bda <__retarget_lock_release_recursive>
 8013a72:	bf00      	nop
 8013a74:	2000996e 	.word	0x2000996e

08013a78 <__sinit>:
 8013a78:	b510      	push	{r4, lr}
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	f7ff fff0 	bl	8013a60 <__sinit_lock_acquire>
 8013a80:	69a3      	ldr	r3, [r4, #24]
 8013a82:	b11b      	cbz	r3, 8013a8c <__sinit+0x14>
 8013a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a88:	f7ff bff0 	b.w	8013a6c <__sinit_lock_release>
 8013a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013a90:	6523      	str	r3, [r4, #80]	; 0x50
 8013a92:	4b13      	ldr	r3, [pc, #76]	; (8013ae0 <__sinit+0x68>)
 8013a94:	4a13      	ldr	r2, [pc, #76]	; (8013ae4 <__sinit+0x6c>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8013a9a:	42a3      	cmp	r3, r4
 8013a9c:	bf08      	it	eq
 8013a9e:	2301      	moveq	r3, #1
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	bf08      	it	eq
 8013aa4:	61a3      	streq	r3, [r4, #24]
 8013aa6:	f000 f81f 	bl	8013ae8 <__sfp>
 8013aaa:	6060      	str	r0, [r4, #4]
 8013aac:	4620      	mov	r0, r4
 8013aae:	f000 f81b 	bl	8013ae8 <__sfp>
 8013ab2:	60a0      	str	r0, [r4, #8]
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f000 f817 	bl	8013ae8 <__sfp>
 8013aba:	2200      	movs	r2, #0
 8013abc:	2104      	movs	r1, #4
 8013abe:	60e0      	str	r0, [r4, #12]
 8013ac0:	6860      	ldr	r0, [r4, #4]
 8013ac2:	f7ff ff81 	bl	80139c8 <std>
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	2109      	movs	r1, #9
 8013aca:	68a0      	ldr	r0, [r4, #8]
 8013acc:	f7ff ff7c 	bl	80139c8 <std>
 8013ad0:	2202      	movs	r2, #2
 8013ad2:	2112      	movs	r1, #18
 8013ad4:	68e0      	ldr	r0, [r4, #12]
 8013ad6:	f7ff ff77 	bl	80139c8 <std>
 8013ada:	2301      	movs	r3, #1
 8013adc:	61a3      	str	r3, [r4, #24]
 8013ade:	e7d1      	b.n	8013a84 <__sinit+0xc>
 8013ae0:	080166d4 	.word	0x080166d4
 8013ae4:	08013a11 	.word	0x08013a11

08013ae8 <__sfp>:
 8013ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aea:	4607      	mov	r7, r0
 8013aec:	f7ff ffac 	bl	8013a48 <__sfp_lock_acquire>
 8013af0:	4b1e      	ldr	r3, [pc, #120]	; (8013b6c <__sfp+0x84>)
 8013af2:	681e      	ldr	r6, [r3, #0]
 8013af4:	69b3      	ldr	r3, [r6, #24]
 8013af6:	b913      	cbnz	r3, 8013afe <__sfp+0x16>
 8013af8:	4630      	mov	r0, r6
 8013afa:	f7ff ffbd 	bl	8013a78 <__sinit>
 8013afe:	3648      	adds	r6, #72	; 0x48
 8013b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b04:	3b01      	subs	r3, #1
 8013b06:	d503      	bpl.n	8013b10 <__sfp+0x28>
 8013b08:	6833      	ldr	r3, [r6, #0]
 8013b0a:	b30b      	cbz	r3, 8013b50 <__sfp+0x68>
 8013b0c:	6836      	ldr	r6, [r6, #0]
 8013b0e:	e7f7      	b.n	8013b00 <__sfp+0x18>
 8013b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b14:	b9d5      	cbnz	r5, 8013b4c <__sfp+0x64>
 8013b16:	4b16      	ldr	r3, [pc, #88]	; (8013b70 <__sfp+0x88>)
 8013b18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b1c:	60e3      	str	r3, [r4, #12]
 8013b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8013b20:	f000 f859 	bl	8013bd6 <__retarget_lock_init_recursive>
 8013b24:	f7ff ff96 	bl	8013a54 <__sfp_lock_release>
 8013b28:	2208      	movs	r2, #8
 8013b2a:	4629      	mov	r1, r5
 8013b2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013b30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013b34:	6025      	str	r5, [r4, #0]
 8013b36:	61a5      	str	r5, [r4, #24]
 8013b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013b3c:	f7ff fddc 	bl	80136f8 <memset>
 8013b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013b48:	4620      	mov	r0, r4
 8013b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b4c:	3468      	adds	r4, #104	; 0x68
 8013b4e:	e7d9      	b.n	8013b04 <__sfp+0x1c>
 8013b50:	2104      	movs	r1, #4
 8013b52:	4638      	mov	r0, r7
 8013b54:	f7ff ff62 	bl	8013a1c <__sfmoreglue>
 8013b58:	4604      	mov	r4, r0
 8013b5a:	6030      	str	r0, [r6, #0]
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	d1d5      	bne.n	8013b0c <__sfp+0x24>
 8013b60:	f7ff ff78 	bl	8013a54 <__sfp_lock_release>
 8013b64:	230c      	movs	r3, #12
 8013b66:	603b      	str	r3, [r7, #0]
 8013b68:	e7ee      	b.n	8013b48 <__sfp+0x60>
 8013b6a:	bf00      	nop
 8013b6c:	080166d4 	.word	0x080166d4
 8013b70:	ffff0001 	.word	0xffff0001

08013b74 <fiprintf>:
 8013b74:	b40e      	push	{r1, r2, r3}
 8013b76:	b503      	push	{r0, r1, lr}
 8013b78:	4601      	mov	r1, r0
 8013b7a:	ab03      	add	r3, sp, #12
 8013b7c:	4805      	ldr	r0, [pc, #20]	; (8013b94 <fiprintf+0x20>)
 8013b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b82:	6800      	ldr	r0, [r0, #0]
 8013b84:	9301      	str	r3, [sp, #4]
 8013b86:	f000 f85d 	bl	8013c44 <_vfiprintf_r>
 8013b8a:	b002      	add	sp, #8
 8013b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b90:	b003      	add	sp, #12
 8013b92:	4770      	bx	lr
 8013b94:	20000188 	.word	0x20000188

08013b98 <_fwalk_reent>:
 8013b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b9c:	4606      	mov	r6, r0
 8013b9e:	4688      	mov	r8, r1
 8013ba0:	2700      	movs	r7, #0
 8013ba2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013baa:	f1b9 0901 	subs.w	r9, r9, #1
 8013bae:	d505      	bpl.n	8013bbc <_fwalk_reent+0x24>
 8013bb0:	6824      	ldr	r4, [r4, #0]
 8013bb2:	2c00      	cmp	r4, #0
 8013bb4:	d1f7      	bne.n	8013ba6 <_fwalk_reent+0xe>
 8013bb6:	4638      	mov	r0, r7
 8013bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bbc:	89ab      	ldrh	r3, [r5, #12]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d907      	bls.n	8013bd2 <_fwalk_reent+0x3a>
 8013bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	d003      	beq.n	8013bd2 <_fwalk_reent+0x3a>
 8013bca:	4629      	mov	r1, r5
 8013bcc:	4630      	mov	r0, r6
 8013bce:	47c0      	blx	r8
 8013bd0:	4307      	orrs	r7, r0
 8013bd2:	3568      	adds	r5, #104	; 0x68
 8013bd4:	e7e9      	b.n	8013baa <_fwalk_reent+0x12>

08013bd6 <__retarget_lock_init_recursive>:
 8013bd6:	4770      	bx	lr

08013bd8 <__retarget_lock_acquire_recursive>:
 8013bd8:	4770      	bx	lr

08013bda <__retarget_lock_release_recursive>:
 8013bda:	4770      	bx	lr

08013bdc <__malloc_lock>:
 8013bdc:	4801      	ldr	r0, [pc, #4]	; (8013be4 <__malloc_lock+0x8>)
 8013bde:	f7ff bffb 	b.w	8013bd8 <__retarget_lock_acquire_recursive>
 8013be2:	bf00      	nop
 8013be4:	2000996c 	.word	0x2000996c

08013be8 <__malloc_unlock>:
 8013be8:	4801      	ldr	r0, [pc, #4]	; (8013bf0 <__malloc_unlock+0x8>)
 8013bea:	f7ff bff6 	b.w	8013bda <__retarget_lock_release_recursive>
 8013bee:	bf00      	nop
 8013bf0:	2000996c 	.word	0x2000996c

08013bf4 <__sfputc_r>:
 8013bf4:	6893      	ldr	r3, [r2, #8]
 8013bf6:	b410      	push	{r4}
 8013bf8:	3b01      	subs	r3, #1
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	6093      	str	r3, [r2, #8]
 8013bfe:	da07      	bge.n	8013c10 <__sfputc_r+0x1c>
 8013c00:	6994      	ldr	r4, [r2, #24]
 8013c02:	42a3      	cmp	r3, r4
 8013c04:	db01      	blt.n	8013c0a <__sfputc_r+0x16>
 8013c06:	290a      	cmp	r1, #10
 8013c08:	d102      	bne.n	8013c10 <__sfputc_r+0x1c>
 8013c0a:	bc10      	pop	{r4}
 8013c0c:	f000 bb24 	b.w	8014258 <__swbuf_r>
 8013c10:	6813      	ldr	r3, [r2, #0]
 8013c12:	1c58      	adds	r0, r3, #1
 8013c14:	6010      	str	r0, [r2, #0]
 8013c16:	7019      	strb	r1, [r3, #0]
 8013c18:	4608      	mov	r0, r1
 8013c1a:	bc10      	pop	{r4}
 8013c1c:	4770      	bx	lr

08013c1e <__sfputs_r>:
 8013c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c20:	4606      	mov	r6, r0
 8013c22:	460f      	mov	r7, r1
 8013c24:	4614      	mov	r4, r2
 8013c26:	18d5      	adds	r5, r2, r3
 8013c28:	42ac      	cmp	r4, r5
 8013c2a:	d101      	bne.n	8013c30 <__sfputs_r+0x12>
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	e007      	b.n	8013c40 <__sfputs_r+0x22>
 8013c30:	463a      	mov	r2, r7
 8013c32:	4630      	mov	r0, r6
 8013c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c38:	f7ff ffdc 	bl	8013bf4 <__sfputc_r>
 8013c3c:	1c43      	adds	r3, r0, #1
 8013c3e:	d1f3      	bne.n	8013c28 <__sfputs_r+0xa>
 8013c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c44 <_vfiprintf_r>:
 8013c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c48:	460d      	mov	r5, r1
 8013c4a:	4614      	mov	r4, r2
 8013c4c:	4698      	mov	r8, r3
 8013c4e:	4606      	mov	r6, r0
 8013c50:	b09d      	sub	sp, #116	; 0x74
 8013c52:	b118      	cbz	r0, 8013c5c <_vfiprintf_r+0x18>
 8013c54:	6983      	ldr	r3, [r0, #24]
 8013c56:	b90b      	cbnz	r3, 8013c5c <_vfiprintf_r+0x18>
 8013c58:	f7ff ff0e 	bl	8013a78 <__sinit>
 8013c5c:	4b89      	ldr	r3, [pc, #548]	; (8013e84 <_vfiprintf_r+0x240>)
 8013c5e:	429d      	cmp	r5, r3
 8013c60:	d11b      	bne.n	8013c9a <_vfiprintf_r+0x56>
 8013c62:	6875      	ldr	r5, [r6, #4]
 8013c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c66:	07d9      	lsls	r1, r3, #31
 8013c68:	d405      	bmi.n	8013c76 <_vfiprintf_r+0x32>
 8013c6a:	89ab      	ldrh	r3, [r5, #12]
 8013c6c:	059a      	lsls	r2, r3, #22
 8013c6e:	d402      	bmi.n	8013c76 <_vfiprintf_r+0x32>
 8013c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c72:	f7ff ffb1 	bl	8013bd8 <__retarget_lock_acquire_recursive>
 8013c76:	89ab      	ldrh	r3, [r5, #12]
 8013c78:	071b      	lsls	r3, r3, #28
 8013c7a:	d501      	bpl.n	8013c80 <_vfiprintf_r+0x3c>
 8013c7c:	692b      	ldr	r3, [r5, #16]
 8013c7e:	b9eb      	cbnz	r3, 8013cbc <_vfiprintf_r+0x78>
 8013c80:	4629      	mov	r1, r5
 8013c82:	4630      	mov	r0, r6
 8013c84:	f000 fb4c 	bl	8014320 <__swsetup_r>
 8013c88:	b1c0      	cbz	r0, 8013cbc <_vfiprintf_r+0x78>
 8013c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c8c:	07dc      	lsls	r4, r3, #31
 8013c8e:	d50e      	bpl.n	8013cae <_vfiprintf_r+0x6a>
 8013c90:	f04f 30ff 	mov.w	r0, #4294967295
 8013c94:	b01d      	add	sp, #116	; 0x74
 8013c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c9a:	4b7b      	ldr	r3, [pc, #492]	; (8013e88 <_vfiprintf_r+0x244>)
 8013c9c:	429d      	cmp	r5, r3
 8013c9e:	d101      	bne.n	8013ca4 <_vfiprintf_r+0x60>
 8013ca0:	68b5      	ldr	r5, [r6, #8]
 8013ca2:	e7df      	b.n	8013c64 <_vfiprintf_r+0x20>
 8013ca4:	4b79      	ldr	r3, [pc, #484]	; (8013e8c <_vfiprintf_r+0x248>)
 8013ca6:	429d      	cmp	r5, r3
 8013ca8:	bf08      	it	eq
 8013caa:	68f5      	ldreq	r5, [r6, #12]
 8013cac:	e7da      	b.n	8013c64 <_vfiprintf_r+0x20>
 8013cae:	89ab      	ldrh	r3, [r5, #12]
 8013cb0:	0598      	lsls	r0, r3, #22
 8013cb2:	d4ed      	bmi.n	8013c90 <_vfiprintf_r+0x4c>
 8013cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cb6:	f7ff ff90 	bl	8013bda <__retarget_lock_release_recursive>
 8013cba:	e7e9      	b.n	8013c90 <_vfiprintf_r+0x4c>
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8013cc0:	2320      	movs	r3, #32
 8013cc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013cc6:	2330      	movs	r3, #48	; 0x30
 8013cc8:	f04f 0901 	mov.w	r9, #1
 8013ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013cd0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013e90 <_vfiprintf_r+0x24c>
 8013cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013cd8:	4623      	mov	r3, r4
 8013cda:	469a      	mov	sl, r3
 8013cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ce0:	b10a      	cbz	r2, 8013ce6 <_vfiprintf_r+0xa2>
 8013ce2:	2a25      	cmp	r2, #37	; 0x25
 8013ce4:	d1f9      	bne.n	8013cda <_vfiprintf_r+0x96>
 8013ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8013cea:	d00b      	beq.n	8013d04 <_vfiprintf_r+0xc0>
 8013cec:	465b      	mov	r3, fp
 8013cee:	4622      	mov	r2, r4
 8013cf0:	4629      	mov	r1, r5
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f7ff ff93 	bl	8013c1e <__sfputs_r>
 8013cf8:	3001      	adds	r0, #1
 8013cfa:	f000 80aa 	beq.w	8013e52 <_vfiprintf_r+0x20e>
 8013cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d00:	445a      	add	r2, fp
 8013d02:	9209      	str	r2, [sp, #36]	; 0x24
 8013d04:	f89a 3000 	ldrb.w	r3, [sl]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f000 80a2 	beq.w	8013e52 <_vfiprintf_r+0x20e>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	f04f 32ff 	mov.w	r2, #4294967295
 8013d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d18:	f10a 0a01 	add.w	sl, sl, #1
 8013d1c:	9304      	str	r3, [sp, #16]
 8013d1e:	9307      	str	r3, [sp, #28]
 8013d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d24:	931a      	str	r3, [sp, #104]	; 0x68
 8013d26:	4654      	mov	r4, sl
 8013d28:	2205      	movs	r2, #5
 8013d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d2e:	4858      	ldr	r0, [pc, #352]	; (8013e90 <_vfiprintf_r+0x24c>)
 8013d30:	f000 fcb2 	bl	8014698 <memchr>
 8013d34:	9a04      	ldr	r2, [sp, #16]
 8013d36:	b9d8      	cbnz	r0, 8013d70 <_vfiprintf_r+0x12c>
 8013d38:	06d1      	lsls	r1, r2, #27
 8013d3a:	bf44      	itt	mi
 8013d3c:	2320      	movmi	r3, #32
 8013d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d42:	0713      	lsls	r3, r2, #28
 8013d44:	bf44      	itt	mi
 8013d46:	232b      	movmi	r3, #43	; 0x2b
 8013d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8013d50:	2b2a      	cmp	r3, #42	; 0x2a
 8013d52:	d015      	beq.n	8013d80 <_vfiprintf_r+0x13c>
 8013d54:	4654      	mov	r4, sl
 8013d56:	2000      	movs	r0, #0
 8013d58:	f04f 0c0a 	mov.w	ip, #10
 8013d5c:	9a07      	ldr	r2, [sp, #28]
 8013d5e:	4621      	mov	r1, r4
 8013d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d64:	3b30      	subs	r3, #48	; 0x30
 8013d66:	2b09      	cmp	r3, #9
 8013d68:	d94e      	bls.n	8013e08 <_vfiprintf_r+0x1c4>
 8013d6a:	b1b0      	cbz	r0, 8013d9a <_vfiprintf_r+0x156>
 8013d6c:	9207      	str	r2, [sp, #28]
 8013d6e:	e014      	b.n	8013d9a <_vfiprintf_r+0x156>
 8013d70:	eba0 0308 	sub.w	r3, r0, r8
 8013d74:	fa09 f303 	lsl.w	r3, r9, r3
 8013d78:	4313      	orrs	r3, r2
 8013d7a:	46a2      	mov	sl, r4
 8013d7c:	9304      	str	r3, [sp, #16]
 8013d7e:	e7d2      	b.n	8013d26 <_vfiprintf_r+0xe2>
 8013d80:	9b03      	ldr	r3, [sp, #12]
 8013d82:	1d19      	adds	r1, r3, #4
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	9103      	str	r1, [sp, #12]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	bfbb      	ittet	lt
 8013d8c:	425b      	neglt	r3, r3
 8013d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8013d92:	9307      	strge	r3, [sp, #28]
 8013d94:	9307      	strlt	r3, [sp, #28]
 8013d96:	bfb8      	it	lt
 8013d98:	9204      	strlt	r2, [sp, #16]
 8013d9a:	7823      	ldrb	r3, [r4, #0]
 8013d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8013d9e:	d10c      	bne.n	8013dba <_vfiprintf_r+0x176>
 8013da0:	7863      	ldrb	r3, [r4, #1]
 8013da2:	2b2a      	cmp	r3, #42	; 0x2a
 8013da4:	d135      	bne.n	8013e12 <_vfiprintf_r+0x1ce>
 8013da6:	9b03      	ldr	r3, [sp, #12]
 8013da8:	3402      	adds	r4, #2
 8013daa:	1d1a      	adds	r2, r3, #4
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	9203      	str	r2, [sp, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	bfb8      	it	lt
 8013db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013db8:	9305      	str	r3, [sp, #20]
 8013dba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013e94 <_vfiprintf_r+0x250>
 8013dbe:	2203      	movs	r2, #3
 8013dc0:	4650      	mov	r0, sl
 8013dc2:	7821      	ldrb	r1, [r4, #0]
 8013dc4:	f000 fc68 	bl	8014698 <memchr>
 8013dc8:	b140      	cbz	r0, 8013ddc <_vfiprintf_r+0x198>
 8013dca:	2340      	movs	r3, #64	; 0x40
 8013dcc:	eba0 000a 	sub.w	r0, r0, sl
 8013dd0:	fa03 f000 	lsl.w	r0, r3, r0
 8013dd4:	9b04      	ldr	r3, [sp, #16]
 8013dd6:	3401      	adds	r4, #1
 8013dd8:	4303      	orrs	r3, r0
 8013dda:	9304      	str	r3, [sp, #16]
 8013ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013de0:	2206      	movs	r2, #6
 8013de2:	482d      	ldr	r0, [pc, #180]	; (8013e98 <_vfiprintf_r+0x254>)
 8013de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013de8:	f000 fc56 	bl	8014698 <memchr>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d03f      	beq.n	8013e70 <_vfiprintf_r+0x22c>
 8013df0:	4b2a      	ldr	r3, [pc, #168]	; (8013e9c <_vfiprintf_r+0x258>)
 8013df2:	bb1b      	cbnz	r3, 8013e3c <_vfiprintf_r+0x1f8>
 8013df4:	9b03      	ldr	r3, [sp, #12]
 8013df6:	3307      	adds	r3, #7
 8013df8:	f023 0307 	bic.w	r3, r3, #7
 8013dfc:	3308      	adds	r3, #8
 8013dfe:	9303      	str	r3, [sp, #12]
 8013e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e02:	443b      	add	r3, r7
 8013e04:	9309      	str	r3, [sp, #36]	; 0x24
 8013e06:	e767      	b.n	8013cd8 <_vfiprintf_r+0x94>
 8013e08:	460c      	mov	r4, r1
 8013e0a:	2001      	movs	r0, #1
 8013e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e10:	e7a5      	b.n	8013d5e <_vfiprintf_r+0x11a>
 8013e12:	2300      	movs	r3, #0
 8013e14:	f04f 0c0a 	mov.w	ip, #10
 8013e18:	4619      	mov	r1, r3
 8013e1a:	3401      	adds	r4, #1
 8013e1c:	9305      	str	r3, [sp, #20]
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e24:	3a30      	subs	r2, #48	; 0x30
 8013e26:	2a09      	cmp	r2, #9
 8013e28:	d903      	bls.n	8013e32 <_vfiprintf_r+0x1ee>
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d0c5      	beq.n	8013dba <_vfiprintf_r+0x176>
 8013e2e:	9105      	str	r1, [sp, #20]
 8013e30:	e7c3      	b.n	8013dba <_vfiprintf_r+0x176>
 8013e32:	4604      	mov	r4, r0
 8013e34:	2301      	movs	r3, #1
 8013e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e3a:	e7f0      	b.n	8013e1e <_vfiprintf_r+0x1da>
 8013e3c:	ab03      	add	r3, sp, #12
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	462a      	mov	r2, r5
 8013e42:	4630      	mov	r0, r6
 8013e44:	4b16      	ldr	r3, [pc, #88]	; (8013ea0 <_vfiprintf_r+0x25c>)
 8013e46:	a904      	add	r1, sp, #16
 8013e48:	f3af 8000 	nop.w
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	1c78      	adds	r0, r7, #1
 8013e50:	d1d6      	bne.n	8013e00 <_vfiprintf_r+0x1bc>
 8013e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e54:	07d9      	lsls	r1, r3, #31
 8013e56:	d405      	bmi.n	8013e64 <_vfiprintf_r+0x220>
 8013e58:	89ab      	ldrh	r3, [r5, #12]
 8013e5a:	059a      	lsls	r2, r3, #22
 8013e5c:	d402      	bmi.n	8013e64 <_vfiprintf_r+0x220>
 8013e5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e60:	f7ff febb 	bl	8013bda <__retarget_lock_release_recursive>
 8013e64:	89ab      	ldrh	r3, [r5, #12]
 8013e66:	065b      	lsls	r3, r3, #25
 8013e68:	f53f af12 	bmi.w	8013c90 <_vfiprintf_r+0x4c>
 8013e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e6e:	e711      	b.n	8013c94 <_vfiprintf_r+0x50>
 8013e70:	ab03      	add	r3, sp, #12
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	462a      	mov	r2, r5
 8013e76:	4630      	mov	r0, r6
 8013e78:	4b09      	ldr	r3, [pc, #36]	; (8013ea0 <_vfiprintf_r+0x25c>)
 8013e7a:	a904      	add	r1, sp, #16
 8013e7c:	f000 f882 	bl	8013f84 <_printf_i>
 8013e80:	e7e4      	b.n	8013e4c <_vfiprintf_r+0x208>
 8013e82:	bf00      	nop
 8013e84:	080167a8 	.word	0x080167a8
 8013e88:	080167c8 	.word	0x080167c8
 8013e8c:	08016788 	.word	0x08016788
 8013e90:	080167e8 	.word	0x080167e8
 8013e94:	080167ee 	.word	0x080167ee
 8013e98:	080167f2 	.word	0x080167f2
 8013e9c:	00000000 	.word	0x00000000
 8013ea0:	08013c1f 	.word	0x08013c1f

08013ea4 <_printf_common>:
 8013ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea8:	4616      	mov	r6, r2
 8013eaa:	4699      	mov	r9, r3
 8013eac:	688a      	ldr	r2, [r1, #8]
 8013eae:	690b      	ldr	r3, [r1, #16]
 8013eb0:	4607      	mov	r7, r0
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	bfb8      	it	lt
 8013eb6:	4613      	movlt	r3, r2
 8013eb8:	6033      	str	r3, [r6, #0]
 8013eba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ebe:	460c      	mov	r4, r1
 8013ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ec4:	b10a      	cbz	r2, 8013eca <_printf_common+0x26>
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	6033      	str	r3, [r6, #0]
 8013eca:	6823      	ldr	r3, [r4, #0]
 8013ecc:	0699      	lsls	r1, r3, #26
 8013ece:	bf42      	ittt	mi
 8013ed0:	6833      	ldrmi	r3, [r6, #0]
 8013ed2:	3302      	addmi	r3, #2
 8013ed4:	6033      	strmi	r3, [r6, #0]
 8013ed6:	6825      	ldr	r5, [r4, #0]
 8013ed8:	f015 0506 	ands.w	r5, r5, #6
 8013edc:	d106      	bne.n	8013eec <_printf_common+0x48>
 8013ede:	f104 0a19 	add.w	sl, r4, #25
 8013ee2:	68e3      	ldr	r3, [r4, #12]
 8013ee4:	6832      	ldr	r2, [r6, #0]
 8013ee6:	1a9b      	subs	r3, r3, r2
 8013ee8:	42ab      	cmp	r3, r5
 8013eea:	dc28      	bgt.n	8013f3e <_printf_common+0x9a>
 8013eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ef0:	1e13      	subs	r3, r2, #0
 8013ef2:	6822      	ldr	r2, [r4, #0]
 8013ef4:	bf18      	it	ne
 8013ef6:	2301      	movne	r3, #1
 8013ef8:	0692      	lsls	r2, r2, #26
 8013efa:	d42d      	bmi.n	8013f58 <_printf_common+0xb4>
 8013efc:	4649      	mov	r1, r9
 8013efe:	4638      	mov	r0, r7
 8013f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f04:	47c0      	blx	r8
 8013f06:	3001      	adds	r0, #1
 8013f08:	d020      	beq.n	8013f4c <_printf_common+0xa8>
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	68e5      	ldr	r5, [r4, #12]
 8013f0e:	f003 0306 	and.w	r3, r3, #6
 8013f12:	2b04      	cmp	r3, #4
 8013f14:	bf18      	it	ne
 8013f16:	2500      	movne	r5, #0
 8013f18:	6832      	ldr	r2, [r6, #0]
 8013f1a:	f04f 0600 	mov.w	r6, #0
 8013f1e:	68a3      	ldr	r3, [r4, #8]
 8013f20:	bf08      	it	eq
 8013f22:	1aad      	subeq	r5, r5, r2
 8013f24:	6922      	ldr	r2, [r4, #16]
 8013f26:	bf08      	it	eq
 8013f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	bfc4      	itt	gt
 8013f30:	1a9b      	subgt	r3, r3, r2
 8013f32:	18ed      	addgt	r5, r5, r3
 8013f34:	341a      	adds	r4, #26
 8013f36:	42b5      	cmp	r5, r6
 8013f38:	d11a      	bne.n	8013f70 <_printf_common+0xcc>
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	e008      	b.n	8013f50 <_printf_common+0xac>
 8013f3e:	2301      	movs	r3, #1
 8013f40:	4652      	mov	r2, sl
 8013f42:	4649      	mov	r1, r9
 8013f44:	4638      	mov	r0, r7
 8013f46:	47c0      	blx	r8
 8013f48:	3001      	adds	r0, #1
 8013f4a:	d103      	bne.n	8013f54 <_printf_common+0xb0>
 8013f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f54:	3501      	adds	r5, #1
 8013f56:	e7c4      	b.n	8013ee2 <_printf_common+0x3e>
 8013f58:	2030      	movs	r0, #48	; 0x30
 8013f5a:	18e1      	adds	r1, r4, r3
 8013f5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f66:	4422      	add	r2, r4
 8013f68:	3302      	adds	r3, #2
 8013f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f6e:	e7c5      	b.n	8013efc <_printf_common+0x58>
 8013f70:	2301      	movs	r3, #1
 8013f72:	4622      	mov	r2, r4
 8013f74:	4649      	mov	r1, r9
 8013f76:	4638      	mov	r0, r7
 8013f78:	47c0      	blx	r8
 8013f7a:	3001      	adds	r0, #1
 8013f7c:	d0e6      	beq.n	8013f4c <_printf_common+0xa8>
 8013f7e:	3601      	adds	r6, #1
 8013f80:	e7d9      	b.n	8013f36 <_printf_common+0x92>
	...

08013f84 <_printf_i>:
 8013f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f88:	7e0f      	ldrb	r7, [r1, #24]
 8013f8a:	4691      	mov	r9, r2
 8013f8c:	2f78      	cmp	r7, #120	; 0x78
 8013f8e:	4680      	mov	r8, r0
 8013f90:	460c      	mov	r4, r1
 8013f92:	469a      	mov	sl, r3
 8013f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f9a:	d807      	bhi.n	8013fac <_printf_i+0x28>
 8013f9c:	2f62      	cmp	r7, #98	; 0x62
 8013f9e:	d80a      	bhi.n	8013fb6 <_printf_i+0x32>
 8013fa0:	2f00      	cmp	r7, #0
 8013fa2:	f000 80d9 	beq.w	8014158 <_printf_i+0x1d4>
 8013fa6:	2f58      	cmp	r7, #88	; 0x58
 8013fa8:	f000 80a4 	beq.w	80140f4 <_printf_i+0x170>
 8013fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013fb4:	e03a      	b.n	801402c <_printf_i+0xa8>
 8013fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013fba:	2b15      	cmp	r3, #21
 8013fbc:	d8f6      	bhi.n	8013fac <_printf_i+0x28>
 8013fbe:	a101      	add	r1, pc, #4	; (adr r1, 8013fc4 <_printf_i+0x40>)
 8013fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fc4:	0801401d 	.word	0x0801401d
 8013fc8:	08014031 	.word	0x08014031
 8013fcc:	08013fad 	.word	0x08013fad
 8013fd0:	08013fad 	.word	0x08013fad
 8013fd4:	08013fad 	.word	0x08013fad
 8013fd8:	08013fad 	.word	0x08013fad
 8013fdc:	08014031 	.word	0x08014031
 8013fe0:	08013fad 	.word	0x08013fad
 8013fe4:	08013fad 	.word	0x08013fad
 8013fe8:	08013fad 	.word	0x08013fad
 8013fec:	08013fad 	.word	0x08013fad
 8013ff0:	0801413f 	.word	0x0801413f
 8013ff4:	08014061 	.word	0x08014061
 8013ff8:	08014121 	.word	0x08014121
 8013ffc:	08013fad 	.word	0x08013fad
 8014000:	08013fad 	.word	0x08013fad
 8014004:	08014161 	.word	0x08014161
 8014008:	08013fad 	.word	0x08013fad
 801400c:	08014061 	.word	0x08014061
 8014010:	08013fad 	.word	0x08013fad
 8014014:	08013fad 	.word	0x08013fad
 8014018:	08014129 	.word	0x08014129
 801401c:	682b      	ldr	r3, [r5, #0]
 801401e:	1d1a      	adds	r2, r3, #4
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	602a      	str	r2, [r5, #0]
 8014024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801402c:	2301      	movs	r3, #1
 801402e:	e0a4      	b.n	801417a <_printf_i+0x1f6>
 8014030:	6820      	ldr	r0, [r4, #0]
 8014032:	6829      	ldr	r1, [r5, #0]
 8014034:	0606      	lsls	r6, r0, #24
 8014036:	f101 0304 	add.w	r3, r1, #4
 801403a:	d50a      	bpl.n	8014052 <_printf_i+0xce>
 801403c:	680e      	ldr	r6, [r1, #0]
 801403e:	602b      	str	r3, [r5, #0]
 8014040:	2e00      	cmp	r6, #0
 8014042:	da03      	bge.n	801404c <_printf_i+0xc8>
 8014044:	232d      	movs	r3, #45	; 0x2d
 8014046:	4276      	negs	r6, r6
 8014048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801404c:	230a      	movs	r3, #10
 801404e:	485e      	ldr	r0, [pc, #376]	; (80141c8 <_printf_i+0x244>)
 8014050:	e019      	b.n	8014086 <_printf_i+0x102>
 8014052:	680e      	ldr	r6, [r1, #0]
 8014054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014058:	602b      	str	r3, [r5, #0]
 801405a:	bf18      	it	ne
 801405c:	b236      	sxthne	r6, r6
 801405e:	e7ef      	b.n	8014040 <_printf_i+0xbc>
 8014060:	682b      	ldr	r3, [r5, #0]
 8014062:	6820      	ldr	r0, [r4, #0]
 8014064:	1d19      	adds	r1, r3, #4
 8014066:	6029      	str	r1, [r5, #0]
 8014068:	0601      	lsls	r1, r0, #24
 801406a:	d501      	bpl.n	8014070 <_printf_i+0xec>
 801406c:	681e      	ldr	r6, [r3, #0]
 801406e:	e002      	b.n	8014076 <_printf_i+0xf2>
 8014070:	0646      	lsls	r6, r0, #25
 8014072:	d5fb      	bpl.n	801406c <_printf_i+0xe8>
 8014074:	881e      	ldrh	r6, [r3, #0]
 8014076:	2f6f      	cmp	r7, #111	; 0x6f
 8014078:	bf0c      	ite	eq
 801407a:	2308      	moveq	r3, #8
 801407c:	230a      	movne	r3, #10
 801407e:	4852      	ldr	r0, [pc, #328]	; (80141c8 <_printf_i+0x244>)
 8014080:	2100      	movs	r1, #0
 8014082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014086:	6865      	ldr	r5, [r4, #4]
 8014088:	2d00      	cmp	r5, #0
 801408a:	bfa8      	it	ge
 801408c:	6821      	ldrge	r1, [r4, #0]
 801408e:	60a5      	str	r5, [r4, #8]
 8014090:	bfa4      	itt	ge
 8014092:	f021 0104 	bicge.w	r1, r1, #4
 8014096:	6021      	strge	r1, [r4, #0]
 8014098:	b90e      	cbnz	r6, 801409e <_printf_i+0x11a>
 801409a:	2d00      	cmp	r5, #0
 801409c:	d04d      	beq.n	801413a <_printf_i+0x1b6>
 801409e:	4615      	mov	r5, r2
 80140a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80140a4:	fb03 6711 	mls	r7, r3, r1, r6
 80140a8:	5dc7      	ldrb	r7, [r0, r7]
 80140aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80140ae:	4637      	mov	r7, r6
 80140b0:	42bb      	cmp	r3, r7
 80140b2:	460e      	mov	r6, r1
 80140b4:	d9f4      	bls.n	80140a0 <_printf_i+0x11c>
 80140b6:	2b08      	cmp	r3, #8
 80140b8:	d10b      	bne.n	80140d2 <_printf_i+0x14e>
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	07de      	lsls	r6, r3, #31
 80140be:	d508      	bpl.n	80140d2 <_printf_i+0x14e>
 80140c0:	6923      	ldr	r3, [r4, #16]
 80140c2:	6861      	ldr	r1, [r4, #4]
 80140c4:	4299      	cmp	r1, r3
 80140c6:	bfde      	ittt	le
 80140c8:	2330      	movle	r3, #48	; 0x30
 80140ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80140d2:	1b52      	subs	r2, r2, r5
 80140d4:	6122      	str	r2, [r4, #16]
 80140d6:	464b      	mov	r3, r9
 80140d8:	4621      	mov	r1, r4
 80140da:	4640      	mov	r0, r8
 80140dc:	f8cd a000 	str.w	sl, [sp]
 80140e0:	aa03      	add	r2, sp, #12
 80140e2:	f7ff fedf 	bl	8013ea4 <_printf_common>
 80140e6:	3001      	adds	r0, #1
 80140e8:	d14c      	bne.n	8014184 <_printf_i+0x200>
 80140ea:	f04f 30ff 	mov.w	r0, #4294967295
 80140ee:	b004      	add	sp, #16
 80140f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f4:	4834      	ldr	r0, [pc, #208]	; (80141c8 <_printf_i+0x244>)
 80140f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140fa:	6829      	ldr	r1, [r5, #0]
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8014102:	6029      	str	r1, [r5, #0]
 8014104:	061d      	lsls	r5, r3, #24
 8014106:	d514      	bpl.n	8014132 <_printf_i+0x1ae>
 8014108:	07df      	lsls	r7, r3, #31
 801410a:	bf44      	itt	mi
 801410c:	f043 0320 	orrmi.w	r3, r3, #32
 8014110:	6023      	strmi	r3, [r4, #0]
 8014112:	b91e      	cbnz	r6, 801411c <_printf_i+0x198>
 8014114:	6823      	ldr	r3, [r4, #0]
 8014116:	f023 0320 	bic.w	r3, r3, #32
 801411a:	6023      	str	r3, [r4, #0]
 801411c:	2310      	movs	r3, #16
 801411e:	e7af      	b.n	8014080 <_printf_i+0xfc>
 8014120:	6823      	ldr	r3, [r4, #0]
 8014122:	f043 0320 	orr.w	r3, r3, #32
 8014126:	6023      	str	r3, [r4, #0]
 8014128:	2378      	movs	r3, #120	; 0x78
 801412a:	4828      	ldr	r0, [pc, #160]	; (80141cc <_printf_i+0x248>)
 801412c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014130:	e7e3      	b.n	80140fa <_printf_i+0x176>
 8014132:	0659      	lsls	r1, r3, #25
 8014134:	bf48      	it	mi
 8014136:	b2b6      	uxthmi	r6, r6
 8014138:	e7e6      	b.n	8014108 <_printf_i+0x184>
 801413a:	4615      	mov	r5, r2
 801413c:	e7bb      	b.n	80140b6 <_printf_i+0x132>
 801413e:	682b      	ldr	r3, [r5, #0]
 8014140:	6826      	ldr	r6, [r4, #0]
 8014142:	1d18      	adds	r0, r3, #4
 8014144:	6961      	ldr	r1, [r4, #20]
 8014146:	6028      	str	r0, [r5, #0]
 8014148:	0635      	lsls	r5, r6, #24
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	d501      	bpl.n	8014152 <_printf_i+0x1ce>
 801414e:	6019      	str	r1, [r3, #0]
 8014150:	e002      	b.n	8014158 <_printf_i+0x1d4>
 8014152:	0670      	lsls	r0, r6, #25
 8014154:	d5fb      	bpl.n	801414e <_printf_i+0x1ca>
 8014156:	8019      	strh	r1, [r3, #0]
 8014158:	2300      	movs	r3, #0
 801415a:	4615      	mov	r5, r2
 801415c:	6123      	str	r3, [r4, #16]
 801415e:	e7ba      	b.n	80140d6 <_printf_i+0x152>
 8014160:	682b      	ldr	r3, [r5, #0]
 8014162:	2100      	movs	r1, #0
 8014164:	1d1a      	adds	r2, r3, #4
 8014166:	602a      	str	r2, [r5, #0]
 8014168:	681d      	ldr	r5, [r3, #0]
 801416a:	6862      	ldr	r2, [r4, #4]
 801416c:	4628      	mov	r0, r5
 801416e:	f000 fa93 	bl	8014698 <memchr>
 8014172:	b108      	cbz	r0, 8014178 <_printf_i+0x1f4>
 8014174:	1b40      	subs	r0, r0, r5
 8014176:	6060      	str	r0, [r4, #4]
 8014178:	6863      	ldr	r3, [r4, #4]
 801417a:	6123      	str	r3, [r4, #16]
 801417c:	2300      	movs	r3, #0
 801417e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014182:	e7a8      	b.n	80140d6 <_printf_i+0x152>
 8014184:	462a      	mov	r2, r5
 8014186:	4649      	mov	r1, r9
 8014188:	4640      	mov	r0, r8
 801418a:	6923      	ldr	r3, [r4, #16]
 801418c:	47d0      	blx	sl
 801418e:	3001      	adds	r0, #1
 8014190:	d0ab      	beq.n	80140ea <_printf_i+0x166>
 8014192:	6823      	ldr	r3, [r4, #0]
 8014194:	079b      	lsls	r3, r3, #30
 8014196:	d413      	bmi.n	80141c0 <_printf_i+0x23c>
 8014198:	68e0      	ldr	r0, [r4, #12]
 801419a:	9b03      	ldr	r3, [sp, #12]
 801419c:	4298      	cmp	r0, r3
 801419e:	bfb8      	it	lt
 80141a0:	4618      	movlt	r0, r3
 80141a2:	e7a4      	b.n	80140ee <_printf_i+0x16a>
 80141a4:	2301      	movs	r3, #1
 80141a6:	4632      	mov	r2, r6
 80141a8:	4649      	mov	r1, r9
 80141aa:	4640      	mov	r0, r8
 80141ac:	47d0      	blx	sl
 80141ae:	3001      	adds	r0, #1
 80141b0:	d09b      	beq.n	80140ea <_printf_i+0x166>
 80141b2:	3501      	adds	r5, #1
 80141b4:	68e3      	ldr	r3, [r4, #12]
 80141b6:	9903      	ldr	r1, [sp, #12]
 80141b8:	1a5b      	subs	r3, r3, r1
 80141ba:	42ab      	cmp	r3, r5
 80141bc:	dcf2      	bgt.n	80141a4 <_printf_i+0x220>
 80141be:	e7eb      	b.n	8014198 <_printf_i+0x214>
 80141c0:	2500      	movs	r5, #0
 80141c2:	f104 0619 	add.w	r6, r4, #25
 80141c6:	e7f5      	b.n	80141b4 <_printf_i+0x230>
 80141c8:	080167f9 	.word	0x080167f9
 80141cc:	0801680a 	.word	0x0801680a

080141d0 <__sread>:
 80141d0:	b510      	push	{r4, lr}
 80141d2:	460c      	mov	r4, r1
 80141d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141d8:	f000 fa6c 	bl	80146b4 <_read_r>
 80141dc:	2800      	cmp	r0, #0
 80141de:	bfab      	itete	ge
 80141e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141e2:	89a3      	ldrhlt	r3, [r4, #12]
 80141e4:	181b      	addge	r3, r3, r0
 80141e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80141ea:	bfac      	ite	ge
 80141ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80141ee:	81a3      	strhlt	r3, [r4, #12]
 80141f0:	bd10      	pop	{r4, pc}

080141f2 <__swrite>:
 80141f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141f6:	461f      	mov	r7, r3
 80141f8:	898b      	ldrh	r3, [r1, #12]
 80141fa:	4605      	mov	r5, r0
 80141fc:	05db      	lsls	r3, r3, #23
 80141fe:	460c      	mov	r4, r1
 8014200:	4616      	mov	r6, r2
 8014202:	d505      	bpl.n	8014210 <__swrite+0x1e>
 8014204:	2302      	movs	r3, #2
 8014206:	2200      	movs	r2, #0
 8014208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801420c:	f000 f9cc 	bl	80145a8 <_lseek_r>
 8014210:	89a3      	ldrh	r3, [r4, #12]
 8014212:	4632      	mov	r2, r6
 8014214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014218:	81a3      	strh	r3, [r4, #12]
 801421a:	4628      	mov	r0, r5
 801421c:	463b      	mov	r3, r7
 801421e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014226:	f000 b869 	b.w	80142fc <_write_r>

0801422a <__sseek>:
 801422a:	b510      	push	{r4, lr}
 801422c:	460c      	mov	r4, r1
 801422e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014232:	f000 f9b9 	bl	80145a8 <_lseek_r>
 8014236:	1c43      	adds	r3, r0, #1
 8014238:	89a3      	ldrh	r3, [r4, #12]
 801423a:	bf15      	itete	ne
 801423c:	6560      	strne	r0, [r4, #84]	; 0x54
 801423e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014246:	81a3      	strheq	r3, [r4, #12]
 8014248:	bf18      	it	ne
 801424a:	81a3      	strhne	r3, [r4, #12]
 801424c:	bd10      	pop	{r4, pc}

0801424e <__sclose>:
 801424e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014252:	f000 b8db 	b.w	801440c <_close_r>
	...

08014258 <__swbuf_r>:
 8014258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425a:	460e      	mov	r6, r1
 801425c:	4614      	mov	r4, r2
 801425e:	4605      	mov	r5, r0
 8014260:	b118      	cbz	r0, 801426a <__swbuf_r+0x12>
 8014262:	6983      	ldr	r3, [r0, #24]
 8014264:	b90b      	cbnz	r3, 801426a <__swbuf_r+0x12>
 8014266:	f7ff fc07 	bl	8013a78 <__sinit>
 801426a:	4b21      	ldr	r3, [pc, #132]	; (80142f0 <__swbuf_r+0x98>)
 801426c:	429c      	cmp	r4, r3
 801426e:	d12b      	bne.n	80142c8 <__swbuf_r+0x70>
 8014270:	686c      	ldr	r4, [r5, #4]
 8014272:	69a3      	ldr	r3, [r4, #24]
 8014274:	60a3      	str	r3, [r4, #8]
 8014276:	89a3      	ldrh	r3, [r4, #12]
 8014278:	071a      	lsls	r2, r3, #28
 801427a:	d52f      	bpl.n	80142dc <__swbuf_r+0x84>
 801427c:	6923      	ldr	r3, [r4, #16]
 801427e:	b36b      	cbz	r3, 80142dc <__swbuf_r+0x84>
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	6820      	ldr	r0, [r4, #0]
 8014284:	b2f6      	uxtb	r6, r6
 8014286:	1ac0      	subs	r0, r0, r3
 8014288:	6963      	ldr	r3, [r4, #20]
 801428a:	4637      	mov	r7, r6
 801428c:	4283      	cmp	r3, r0
 801428e:	dc04      	bgt.n	801429a <__swbuf_r+0x42>
 8014290:	4621      	mov	r1, r4
 8014292:	4628      	mov	r0, r5
 8014294:	f000 f94c 	bl	8014530 <_fflush_r>
 8014298:	bb30      	cbnz	r0, 80142e8 <__swbuf_r+0x90>
 801429a:	68a3      	ldr	r3, [r4, #8]
 801429c:	3001      	adds	r0, #1
 801429e:	3b01      	subs	r3, #1
 80142a0:	60a3      	str	r3, [r4, #8]
 80142a2:	6823      	ldr	r3, [r4, #0]
 80142a4:	1c5a      	adds	r2, r3, #1
 80142a6:	6022      	str	r2, [r4, #0]
 80142a8:	701e      	strb	r6, [r3, #0]
 80142aa:	6963      	ldr	r3, [r4, #20]
 80142ac:	4283      	cmp	r3, r0
 80142ae:	d004      	beq.n	80142ba <__swbuf_r+0x62>
 80142b0:	89a3      	ldrh	r3, [r4, #12]
 80142b2:	07db      	lsls	r3, r3, #31
 80142b4:	d506      	bpl.n	80142c4 <__swbuf_r+0x6c>
 80142b6:	2e0a      	cmp	r6, #10
 80142b8:	d104      	bne.n	80142c4 <__swbuf_r+0x6c>
 80142ba:	4621      	mov	r1, r4
 80142bc:	4628      	mov	r0, r5
 80142be:	f000 f937 	bl	8014530 <_fflush_r>
 80142c2:	b988      	cbnz	r0, 80142e8 <__swbuf_r+0x90>
 80142c4:	4638      	mov	r0, r7
 80142c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142c8:	4b0a      	ldr	r3, [pc, #40]	; (80142f4 <__swbuf_r+0x9c>)
 80142ca:	429c      	cmp	r4, r3
 80142cc:	d101      	bne.n	80142d2 <__swbuf_r+0x7a>
 80142ce:	68ac      	ldr	r4, [r5, #8]
 80142d0:	e7cf      	b.n	8014272 <__swbuf_r+0x1a>
 80142d2:	4b09      	ldr	r3, [pc, #36]	; (80142f8 <__swbuf_r+0xa0>)
 80142d4:	429c      	cmp	r4, r3
 80142d6:	bf08      	it	eq
 80142d8:	68ec      	ldreq	r4, [r5, #12]
 80142da:	e7ca      	b.n	8014272 <__swbuf_r+0x1a>
 80142dc:	4621      	mov	r1, r4
 80142de:	4628      	mov	r0, r5
 80142e0:	f000 f81e 	bl	8014320 <__swsetup_r>
 80142e4:	2800      	cmp	r0, #0
 80142e6:	d0cb      	beq.n	8014280 <__swbuf_r+0x28>
 80142e8:	f04f 37ff 	mov.w	r7, #4294967295
 80142ec:	e7ea      	b.n	80142c4 <__swbuf_r+0x6c>
 80142ee:	bf00      	nop
 80142f0:	080167a8 	.word	0x080167a8
 80142f4:	080167c8 	.word	0x080167c8
 80142f8:	08016788 	.word	0x08016788

080142fc <_write_r>:
 80142fc:	b538      	push	{r3, r4, r5, lr}
 80142fe:	4604      	mov	r4, r0
 8014300:	4608      	mov	r0, r1
 8014302:	4611      	mov	r1, r2
 8014304:	2200      	movs	r2, #0
 8014306:	4d05      	ldr	r5, [pc, #20]	; (801431c <_write_r+0x20>)
 8014308:	602a      	str	r2, [r5, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	f7ed fbdd 	bl	8001aca <_write>
 8014310:	1c43      	adds	r3, r0, #1
 8014312:	d102      	bne.n	801431a <_write_r+0x1e>
 8014314:	682b      	ldr	r3, [r5, #0]
 8014316:	b103      	cbz	r3, 801431a <_write_r+0x1e>
 8014318:	6023      	str	r3, [r4, #0]
 801431a:	bd38      	pop	{r3, r4, r5, pc}
 801431c:	20009968 	.word	0x20009968

08014320 <__swsetup_r>:
 8014320:	4b32      	ldr	r3, [pc, #200]	; (80143ec <__swsetup_r+0xcc>)
 8014322:	b570      	push	{r4, r5, r6, lr}
 8014324:	681d      	ldr	r5, [r3, #0]
 8014326:	4606      	mov	r6, r0
 8014328:	460c      	mov	r4, r1
 801432a:	b125      	cbz	r5, 8014336 <__swsetup_r+0x16>
 801432c:	69ab      	ldr	r3, [r5, #24]
 801432e:	b913      	cbnz	r3, 8014336 <__swsetup_r+0x16>
 8014330:	4628      	mov	r0, r5
 8014332:	f7ff fba1 	bl	8013a78 <__sinit>
 8014336:	4b2e      	ldr	r3, [pc, #184]	; (80143f0 <__swsetup_r+0xd0>)
 8014338:	429c      	cmp	r4, r3
 801433a:	d10f      	bne.n	801435c <__swsetup_r+0x3c>
 801433c:	686c      	ldr	r4, [r5, #4]
 801433e:	89a3      	ldrh	r3, [r4, #12]
 8014340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014344:	0719      	lsls	r1, r3, #28
 8014346:	d42c      	bmi.n	80143a2 <__swsetup_r+0x82>
 8014348:	06dd      	lsls	r5, r3, #27
 801434a:	d411      	bmi.n	8014370 <__swsetup_r+0x50>
 801434c:	2309      	movs	r3, #9
 801434e:	6033      	str	r3, [r6, #0]
 8014350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014354:	f04f 30ff 	mov.w	r0, #4294967295
 8014358:	81a3      	strh	r3, [r4, #12]
 801435a:	e03e      	b.n	80143da <__swsetup_r+0xba>
 801435c:	4b25      	ldr	r3, [pc, #148]	; (80143f4 <__swsetup_r+0xd4>)
 801435e:	429c      	cmp	r4, r3
 8014360:	d101      	bne.n	8014366 <__swsetup_r+0x46>
 8014362:	68ac      	ldr	r4, [r5, #8]
 8014364:	e7eb      	b.n	801433e <__swsetup_r+0x1e>
 8014366:	4b24      	ldr	r3, [pc, #144]	; (80143f8 <__swsetup_r+0xd8>)
 8014368:	429c      	cmp	r4, r3
 801436a:	bf08      	it	eq
 801436c:	68ec      	ldreq	r4, [r5, #12]
 801436e:	e7e6      	b.n	801433e <__swsetup_r+0x1e>
 8014370:	0758      	lsls	r0, r3, #29
 8014372:	d512      	bpl.n	801439a <__swsetup_r+0x7a>
 8014374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014376:	b141      	cbz	r1, 801438a <__swsetup_r+0x6a>
 8014378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801437c:	4299      	cmp	r1, r3
 801437e:	d002      	beq.n	8014386 <__swsetup_r+0x66>
 8014380:	4630      	mov	r0, r6
 8014382:	f7ff f9c1 	bl	8013708 <_free_r>
 8014386:	2300      	movs	r3, #0
 8014388:	6363      	str	r3, [r4, #52]	; 0x34
 801438a:	89a3      	ldrh	r3, [r4, #12]
 801438c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014390:	81a3      	strh	r3, [r4, #12]
 8014392:	2300      	movs	r3, #0
 8014394:	6063      	str	r3, [r4, #4]
 8014396:	6923      	ldr	r3, [r4, #16]
 8014398:	6023      	str	r3, [r4, #0]
 801439a:	89a3      	ldrh	r3, [r4, #12]
 801439c:	f043 0308 	orr.w	r3, r3, #8
 80143a0:	81a3      	strh	r3, [r4, #12]
 80143a2:	6923      	ldr	r3, [r4, #16]
 80143a4:	b94b      	cbnz	r3, 80143ba <__swsetup_r+0x9a>
 80143a6:	89a3      	ldrh	r3, [r4, #12]
 80143a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143b0:	d003      	beq.n	80143ba <__swsetup_r+0x9a>
 80143b2:	4621      	mov	r1, r4
 80143b4:	4630      	mov	r0, r6
 80143b6:	f000 f92f 	bl	8014618 <__smakebuf_r>
 80143ba:	89a0      	ldrh	r0, [r4, #12]
 80143bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80143c0:	f010 0301 	ands.w	r3, r0, #1
 80143c4:	d00a      	beq.n	80143dc <__swsetup_r+0xbc>
 80143c6:	2300      	movs	r3, #0
 80143c8:	60a3      	str	r3, [r4, #8]
 80143ca:	6963      	ldr	r3, [r4, #20]
 80143cc:	425b      	negs	r3, r3
 80143ce:	61a3      	str	r3, [r4, #24]
 80143d0:	6923      	ldr	r3, [r4, #16]
 80143d2:	b943      	cbnz	r3, 80143e6 <__swsetup_r+0xc6>
 80143d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80143d8:	d1ba      	bne.n	8014350 <__swsetup_r+0x30>
 80143da:	bd70      	pop	{r4, r5, r6, pc}
 80143dc:	0781      	lsls	r1, r0, #30
 80143de:	bf58      	it	pl
 80143e0:	6963      	ldrpl	r3, [r4, #20]
 80143e2:	60a3      	str	r3, [r4, #8]
 80143e4:	e7f4      	b.n	80143d0 <__swsetup_r+0xb0>
 80143e6:	2000      	movs	r0, #0
 80143e8:	e7f7      	b.n	80143da <__swsetup_r+0xba>
 80143ea:	bf00      	nop
 80143ec:	20000188 	.word	0x20000188
 80143f0:	080167a8 	.word	0x080167a8
 80143f4:	080167c8 	.word	0x080167c8
 80143f8:	08016788 	.word	0x08016788

080143fc <abort>:
 80143fc:	2006      	movs	r0, #6
 80143fe:	b508      	push	{r3, lr}
 8014400:	f000 f992 	bl	8014728 <raise>
 8014404:	2001      	movs	r0, #1
 8014406:	f7ed fb39 	bl	8001a7c <_exit>
	...

0801440c <_close_r>:
 801440c:	b538      	push	{r3, r4, r5, lr}
 801440e:	2300      	movs	r3, #0
 8014410:	4d05      	ldr	r5, [pc, #20]	; (8014428 <_close_r+0x1c>)
 8014412:	4604      	mov	r4, r0
 8014414:	4608      	mov	r0, r1
 8014416:	602b      	str	r3, [r5, #0]
 8014418:	f7ed fb73 	bl	8001b02 <_close>
 801441c:	1c43      	adds	r3, r0, #1
 801441e:	d102      	bne.n	8014426 <_close_r+0x1a>
 8014420:	682b      	ldr	r3, [r5, #0]
 8014422:	b103      	cbz	r3, 8014426 <_close_r+0x1a>
 8014424:	6023      	str	r3, [r4, #0]
 8014426:	bd38      	pop	{r3, r4, r5, pc}
 8014428:	20009968 	.word	0x20009968

0801442c <__sflush_r>:
 801442c:	898a      	ldrh	r2, [r1, #12]
 801442e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014430:	4605      	mov	r5, r0
 8014432:	0710      	lsls	r0, r2, #28
 8014434:	460c      	mov	r4, r1
 8014436:	d457      	bmi.n	80144e8 <__sflush_r+0xbc>
 8014438:	684b      	ldr	r3, [r1, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	dc04      	bgt.n	8014448 <__sflush_r+0x1c>
 801443e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014440:	2b00      	cmp	r3, #0
 8014442:	dc01      	bgt.n	8014448 <__sflush_r+0x1c>
 8014444:	2000      	movs	r0, #0
 8014446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801444a:	2e00      	cmp	r6, #0
 801444c:	d0fa      	beq.n	8014444 <__sflush_r+0x18>
 801444e:	2300      	movs	r3, #0
 8014450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014454:	682f      	ldr	r7, [r5, #0]
 8014456:	602b      	str	r3, [r5, #0]
 8014458:	d032      	beq.n	80144c0 <__sflush_r+0x94>
 801445a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801445c:	89a3      	ldrh	r3, [r4, #12]
 801445e:	075a      	lsls	r2, r3, #29
 8014460:	d505      	bpl.n	801446e <__sflush_r+0x42>
 8014462:	6863      	ldr	r3, [r4, #4]
 8014464:	1ac0      	subs	r0, r0, r3
 8014466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014468:	b10b      	cbz	r3, 801446e <__sflush_r+0x42>
 801446a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801446c:	1ac0      	subs	r0, r0, r3
 801446e:	2300      	movs	r3, #0
 8014470:	4602      	mov	r2, r0
 8014472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014474:	4628      	mov	r0, r5
 8014476:	6a21      	ldr	r1, [r4, #32]
 8014478:	47b0      	blx	r6
 801447a:	1c43      	adds	r3, r0, #1
 801447c:	89a3      	ldrh	r3, [r4, #12]
 801447e:	d106      	bne.n	801448e <__sflush_r+0x62>
 8014480:	6829      	ldr	r1, [r5, #0]
 8014482:	291d      	cmp	r1, #29
 8014484:	d82c      	bhi.n	80144e0 <__sflush_r+0xb4>
 8014486:	4a29      	ldr	r2, [pc, #164]	; (801452c <__sflush_r+0x100>)
 8014488:	40ca      	lsrs	r2, r1
 801448a:	07d6      	lsls	r6, r2, #31
 801448c:	d528      	bpl.n	80144e0 <__sflush_r+0xb4>
 801448e:	2200      	movs	r2, #0
 8014490:	6062      	str	r2, [r4, #4]
 8014492:	6922      	ldr	r2, [r4, #16]
 8014494:	04d9      	lsls	r1, r3, #19
 8014496:	6022      	str	r2, [r4, #0]
 8014498:	d504      	bpl.n	80144a4 <__sflush_r+0x78>
 801449a:	1c42      	adds	r2, r0, #1
 801449c:	d101      	bne.n	80144a2 <__sflush_r+0x76>
 801449e:	682b      	ldr	r3, [r5, #0]
 80144a0:	b903      	cbnz	r3, 80144a4 <__sflush_r+0x78>
 80144a2:	6560      	str	r0, [r4, #84]	; 0x54
 80144a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144a6:	602f      	str	r7, [r5, #0]
 80144a8:	2900      	cmp	r1, #0
 80144aa:	d0cb      	beq.n	8014444 <__sflush_r+0x18>
 80144ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144b0:	4299      	cmp	r1, r3
 80144b2:	d002      	beq.n	80144ba <__sflush_r+0x8e>
 80144b4:	4628      	mov	r0, r5
 80144b6:	f7ff f927 	bl	8013708 <_free_r>
 80144ba:	2000      	movs	r0, #0
 80144bc:	6360      	str	r0, [r4, #52]	; 0x34
 80144be:	e7c2      	b.n	8014446 <__sflush_r+0x1a>
 80144c0:	6a21      	ldr	r1, [r4, #32]
 80144c2:	2301      	movs	r3, #1
 80144c4:	4628      	mov	r0, r5
 80144c6:	47b0      	blx	r6
 80144c8:	1c41      	adds	r1, r0, #1
 80144ca:	d1c7      	bne.n	801445c <__sflush_r+0x30>
 80144cc:	682b      	ldr	r3, [r5, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d0c4      	beq.n	801445c <__sflush_r+0x30>
 80144d2:	2b1d      	cmp	r3, #29
 80144d4:	d001      	beq.n	80144da <__sflush_r+0xae>
 80144d6:	2b16      	cmp	r3, #22
 80144d8:	d101      	bne.n	80144de <__sflush_r+0xb2>
 80144da:	602f      	str	r7, [r5, #0]
 80144dc:	e7b2      	b.n	8014444 <__sflush_r+0x18>
 80144de:	89a3      	ldrh	r3, [r4, #12]
 80144e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144e4:	81a3      	strh	r3, [r4, #12]
 80144e6:	e7ae      	b.n	8014446 <__sflush_r+0x1a>
 80144e8:	690f      	ldr	r7, [r1, #16]
 80144ea:	2f00      	cmp	r7, #0
 80144ec:	d0aa      	beq.n	8014444 <__sflush_r+0x18>
 80144ee:	0793      	lsls	r3, r2, #30
 80144f0:	bf18      	it	ne
 80144f2:	2300      	movne	r3, #0
 80144f4:	680e      	ldr	r6, [r1, #0]
 80144f6:	bf08      	it	eq
 80144f8:	694b      	ldreq	r3, [r1, #20]
 80144fa:	1bf6      	subs	r6, r6, r7
 80144fc:	600f      	str	r7, [r1, #0]
 80144fe:	608b      	str	r3, [r1, #8]
 8014500:	2e00      	cmp	r6, #0
 8014502:	dd9f      	ble.n	8014444 <__sflush_r+0x18>
 8014504:	4633      	mov	r3, r6
 8014506:	463a      	mov	r2, r7
 8014508:	4628      	mov	r0, r5
 801450a:	6a21      	ldr	r1, [r4, #32]
 801450c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8014510:	47e0      	blx	ip
 8014512:	2800      	cmp	r0, #0
 8014514:	dc06      	bgt.n	8014524 <__sflush_r+0xf8>
 8014516:	89a3      	ldrh	r3, [r4, #12]
 8014518:	f04f 30ff 	mov.w	r0, #4294967295
 801451c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014520:	81a3      	strh	r3, [r4, #12]
 8014522:	e790      	b.n	8014446 <__sflush_r+0x1a>
 8014524:	4407      	add	r7, r0
 8014526:	1a36      	subs	r6, r6, r0
 8014528:	e7ea      	b.n	8014500 <__sflush_r+0xd4>
 801452a:	bf00      	nop
 801452c:	20400001 	.word	0x20400001

08014530 <_fflush_r>:
 8014530:	b538      	push	{r3, r4, r5, lr}
 8014532:	690b      	ldr	r3, [r1, #16]
 8014534:	4605      	mov	r5, r0
 8014536:	460c      	mov	r4, r1
 8014538:	b913      	cbnz	r3, 8014540 <_fflush_r+0x10>
 801453a:	2500      	movs	r5, #0
 801453c:	4628      	mov	r0, r5
 801453e:	bd38      	pop	{r3, r4, r5, pc}
 8014540:	b118      	cbz	r0, 801454a <_fflush_r+0x1a>
 8014542:	6983      	ldr	r3, [r0, #24]
 8014544:	b90b      	cbnz	r3, 801454a <_fflush_r+0x1a>
 8014546:	f7ff fa97 	bl	8013a78 <__sinit>
 801454a:	4b14      	ldr	r3, [pc, #80]	; (801459c <_fflush_r+0x6c>)
 801454c:	429c      	cmp	r4, r3
 801454e:	d11b      	bne.n	8014588 <_fflush_r+0x58>
 8014550:	686c      	ldr	r4, [r5, #4]
 8014552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d0ef      	beq.n	801453a <_fflush_r+0xa>
 801455a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801455c:	07d0      	lsls	r0, r2, #31
 801455e:	d404      	bmi.n	801456a <_fflush_r+0x3a>
 8014560:	0599      	lsls	r1, r3, #22
 8014562:	d402      	bmi.n	801456a <_fflush_r+0x3a>
 8014564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014566:	f7ff fb37 	bl	8013bd8 <__retarget_lock_acquire_recursive>
 801456a:	4628      	mov	r0, r5
 801456c:	4621      	mov	r1, r4
 801456e:	f7ff ff5d 	bl	801442c <__sflush_r>
 8014572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014574:	4605      	mov	r5, r0
 8014576:	07da      	lsls	r2, r3, #31
 8014578:	d4e0      	bmi.n	801453c <_fflush_r+0xc>
 801457a:	89a3      	ldrh	r3, [r4, #12]
 801457c:	059b      	lsls	r3, r3, #22
 801457e:	d4dd      	bmi.n	801453c <_fflush_r+0xc>
 8014580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014582:	f7ff fb2a 	bl	8013bda <__retarget_lock_release_recursive>
 8014586:	e7d9      	b.n	801453c <_fflush_r+0xc>
 8014588:	4b05      	ldr	r3, [pc, #20]	; (80145a0 <_fflush_r+0x70>)
 801458a:	429c      	cmp	r4, r3
 801458c:	d101      	bne.n	8014592 <_fflush_r+0x62>
 801458e:	68ac      	ldr	r4, [r5, #8]
 8014590:	e7df      	b.n	8014552 <_fflush_r+0x22>
 8014592:	4b04      	ldr	r3, [pc, #16]	; (80145a4 <_fflush_r+0x74>)
 8014594:	429c      	cmp	r4, r3
 8014596:	bf08      	it	eq
 8014598:	68ec      	ldreq	r4, [r5, #12]
 801459a:	e7da      	b.n	8014552 <_fflush_r+0x22>
 801459c:	080167a8 	.word	0x080167a8
 80145a0:	080167c8 	.word	0x080167c8
 80145a4:	08016788 	.word	0x08016788

080145a8 <_lseek_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4604      	mov	r4, r0
 80145ac:	4608      	mov	r0, r1
 80145ae:	4611      	mov	r1, r2
 80145b0:	2200      	movs	r2, #0
 80145b2:	4d05      	ldr	r5, [pc, #20]	; (80145c8 <_lseek_r+0x20>)
 80145b4:	602a      	str	r2, [r5, #0]
 80145b6:	461a      	mov	r2, r3
 80145b8:	f7ed fac7 	bl	8001b4a <_lseek>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	d102      	bne.n	80145c6 <_lseek_r+0x1e>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	b103      	cbz	r3, 80145c6 <_lseek_r+0x1e>
 80145c4:	6023      	str	r3, [r4, #0]
 80145c6:	bd38      	pop	{r3, r4, r5, pc}
 80145c8:	20009968 	.word	0x20009968

080145cc <__swhatbuf_r>:
 80145cc:	b570      	push	{r4, r5, r6, lr}
 80145ce:	460e      	mov	r6, r1
 80145d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145d4:	4614      	mov	r4, r2
 80145d6:	2900      	cmp	r1, #0
 80145d8:	461d      	mov	r5, r3
 80145da:	b096      	sub	sp, #88	; 0x58
 80145dc:	da08      	bge.n	80145f0 <__swhatbuf_r+0x24>
 80145de:	2200      	movs	r2, #0
 80145e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80145e4:	602a      	str	r2, [r5, #0]
 80145e6:	061a      	lsls	r2, r3, #24
 80145e8:	d410      	bmi.n	801460c <__swhatbuf_r+0x40>
 80145ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145ee:	e00e      	b.n	801460e <__swhatbuf_r+0x42>
 80145f0:	466a      	mov	r2, sp
 80145f2:	f000 f8b5 	bl	8014760 <_fstat_r>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	dbf1      	blt.n	80145de <__swhatbuf_r+0x12>
 80145fa:	9a01      	ldr	r2, [sp, #4]
 80145fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014600:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014604:	425a      	negs	r2, r3
 8014606:	415a      	adcs	r2, r3
 8014608:	602a      	str	r2, [r5, #0]
 801460a:	e7ee      	b.n	80145ea <__swhatbuf_r+0x1e>
 801460c:	2340      	movs	r3, #64	; 0x40
 801460e:	2000      	movs	r0, #0
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	b016      	add	sp, #88	; 0x58
 8014614:	bd70      	pop	{r4, r5, r6, pc}
	...

08014618 <__smakebuf_r>:
 8014618:	898b      	ldrh	r3, [r1, #12]
 801461a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801461c:	079d      	lsls	r5, r3, #30
 801461e:	4606      	mov	r6, r0
 8014620:	460c      	mov	r4, r1
 8014622:	d507      	bpl.n	8014634 <__smakebuf_r+0x1c>
 8014624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014628:	6023      	str	r3, [r4, #0]
 801462a:	6123      	str	r3, [r4, #16]
 801462c:	2301      	movs	r3, #1
 801462e:	6163      	str	r3, [r4, #20]
 8014630:	b002      	add	sp, #8
 8014632:	bd70      	pop	{r4, r5, r6, pc}
 8014634:	466a      	mov	r2, sp
 8014636:	ab01      	add	r3, sp, #4
 8014638:	f7ff ffc8 	bl	80145cc <__swhatbuf_r>
 801463c:	9900      	ldr	r1, [sp, #0]
 801463e:	4605      	mov	r5, r0
 8014640:	4630      	mov	r0, r6
 8014642:	f7ff f8c9 	bl	80137d8 <_malloc_r>
 8014646:	b948      	cbnz	r0, 801465c <__smakebuf_r+0x44>
 8014648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801464c:	059a      	lsls	r2, r3, #22
 801464e:	d4ef      	bmi.n	8014630 <__smakebuf_r+0x18>
 8014650:	f023 0303 	bic.w	r3, r3, #3
 8014654:	f043 0302 	orr.w	r3, r3, #2
 8014658:	81a3      	strh	r3, [r4, #12]
 801465a:	e7e3      	b.n	8014624 <__smakebuf_r+0xc>
 801465c:	4b0d      	ldr	r3, [pc, #52]	; (8014694 <__smakebuf_r+0x7c>)
 801465e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014660:	89a3      	ldrh	r3, [r4, #12]
 8014662:	6020      	str	r0, [r4, #0]
 8014664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014668:	81a3      	strh	r3, [r4, #12]
 801466a:	9b00      	ldr	r3, [sp, #0]
 801466c:	6120      	str	r0, [r4, #16]
 801466e:	6163      	str	r3, [r4, #20]
 8014670:	9b01      	ldr	r3, [sp, #4]
 8014672:	b15b      	cbz	r3, 801468c <__smakebuf_r+0x74>
 8014674:	4630      	mov	r0, r6
 8014676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801467a:	f000 f883 	bl	8014784 <_isatty_r>
 801467e:	b128      	cbz	r0, 801468c <__smakebuf_r+0x74>
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	f023 0303 	bic.w	r3, r3, #3
 8014686:	f043 0301 	orr.w	r3, r3, #1
 801468a:	81a3      	strh	r3, [r4, #12]
 801468c:	89a0      	ldrh	r0, [r4, #12]
 801468e:	4305      	orrs	r5, r0
 8014690:	81a5      	strh	r5, [r4, #12]
 8014692:	e7cd      	b.n	8014630 <__smakebuf_r+0x18>
 8014694:	08013a11 	.word	0x08013a11

08014698 <memchr>:
 8014698:	4603      	mov	r3, r0
 801469a:	b510      	push	{r4, lr}
 801469c:	b2c9      	uxtb	r1, r1
 801469e:	4402      	add	r2, r0
 80146a0:	4293      	cmp	r3, r2
 80146a2:	4618      	mov	r0, r3
 80146a4:	d101      	bne.n	80146aa <memchr+0x12>
 80146a6:	2000      	movs	r0, #0
 80146a8:	e003      	b.n	80146b2 <memchr+0x1a>
 80146aa:	7804      	ldrb	r4, [r0, #0]
 80146ac:	3301      	adds	r3, #1
 80146ae:	428c      	cmp	r4, r1
 80146b0:	d1f6      	bne.n	80146a0 <memchr+0x8>
 80146b2:	bd10      	pop	{r4, pc}

080146b4 <_read_r>:
 80146b4:	b538      	push	{r3, r4, r5, lr}
 80146b6:	4604      	mov	r4, r0
 80146b8:	4608      	mov	r0, r1
 80146ba:	4611      	mov	r1, r2
 80146bc:	2200      	movs	r2, #0
 80146be:	4d05      	ldr	r5, [pc, #20]	; (80146d4 <_read_r+0x20>)
 80146c0:	602a      	str	r2, [r5, #0]
 80146c2:	461a      	mov	r2, r3
 80146c4:	f7ed f9e4 	bl	8001a90 <_read>
 80146c8:	1c43      	adds	r3, r0, #1
 80146ca:	d102      	bne.n	80146d2 <_read_r+0x1e>
 80146cc:	682b      	ldr	r3, [r5, #0]
 80146ce:	b103      	cbz	r3, 80146d2 <_read_r+0x1e>
 80146d0:	6023      	str	r3, [r4, #0]
 80146d2:	bd38      	pop	{r3, r4, r5, pc}
 80146d4:	20009968 	.word	0x20009968

080146d8 <_raise_r>:
 80146d8:	291f      	cmp	r1, #31
 80146da:	b538      	push	{r3, r4, r5, lr}
 80146dc:	4604      	mov	r4, r0
 80146de:	460d      	mov	r5, r1
 80146e0:	d904      	bls.n	80146ec <_raise_r+0x14>
 80146e2:	2316      	movs	r3, #22
 80146e4:	6003      	str	r3, [r0, #0]
 80146e6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80146ee:	b112      	cbz	r2, 80146f6 <_raise_r+0x1e>
 80146f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146f4:	b94b      	cbnz	r3, 801470a <_raise_r+0x32>
 80146f6:	4620      	mov	r0, r4
 80146f8:	f000 f830 	bl	801475c <_getpid_r>
 80146fc:	462a      	mov	r2, r5
 80146fe:	4601      	mov	r1, r0
 8014700:	4620      	mov	r0, r4
 8014702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014706:	f000 b817 	b.w	8014738 <_kill_r>
 801470a:	2b01      	cmp	r3, #1
 801470c:	d00a      	beq.n	8014724 <_raise_r+0x4c>
 801470e:	1c59      	adds	r1, r3, #1
 8014710:	d103      	bne.n	801471a <_raise_r+0x42>
 8014712:	2316      	movs	r3, #22
 8014714:	6003      	str	r3, [r0, #0]
 8014716:	2001      	movs	r0, #1
 8014718:	e7e7      	b.n	80146ea <_raise_r+0x12>
 801471a:	2400      	movs	r4, #0
 801471c:	4628      	mov	r0, r5
 801471e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014722:	4798      	blx	r3
 8014724:	2000      	movs	r0, #0
 8014726:	e7e0      	b.n	80146ea <_raise_r+0x12>

08014728 <raise>:
 8014728:	4b02      	ldr	r3, [pc, #8]	; (8014734 <raise+0xc>)
 801472a:	4601      	mov	r1, r0
 801472c:	6818      	ldr	r0, [r3, #0]
 801472e:	f7ff bfd3 	b.w	80146d8 <_raise_r>
 8014732:	bf00      	nop
 8014734:	20000188 	.word	0x20000188

08014738 <_kill_r>:
 8014738:	b538      	push	{r3, r4, r5, lr}
 801473a:	2300      	movs	r3, #0
 801473c:	4d06      	ldr	r5, [pc, #24]	; (8014758 <_kill_r+0x20>)
 801473e:	4604      	mov	r4, r0
 8014740:	4608      	mov	r0, r1
 8014742:	4611      	mov	r1, r2
 8014744:	602b      	str	r3, [r5, #0]
 8014746:	f7ed f987 	bl	8001a58 <_kill>
 801474a:	1c43      	adds	r3, r0, #1
 801474c:	d102      	bne.n	8014754 <_kill_r+0x1c>
 801474e:	682b      	ldr	r3, [r5, #0]
 8014750:	b103      	cbz	r3, 8014754 <_kill_r+0x1c>
 8014752:	6023      	str	r3, [r4, #0]
 8014754:	bd38      	pop	{r3, r4, r5, pc}
 8014756:	bf00      	nop
 8014758:	20009968 	.word	0x20009968

0801475c <_getpid_r>:
 801475c:	f7ed b974 	b.w	8001a48 <_getpid>

08014760 <_fstat_r>:
 8014760:	b538      	push	{r3, r4, r5, lr}
 8014762:	2300      	movs	r3, #0
 8014764:	4d06      	ldr	r5, [pc, #24]	; (8014780 <_fstat_r+0x20>)
 8014766:	4604      	mov	r4, r0
 8014768:	4608      	mov	r0, r1
 801476a:	4611      	mov	r1, r2
 801476c:	602b      	str	r3, [r5, #0]
 801476e:	f7ed f9d3 	bl	8001b18 <_fstat>
 8014772:	1c43      	adds	r3, r0, #1
 8014774:	d102      	bne.n	801477c <_fstat_r+0x1c>
 8014776:	682b      	ldr	r3, [r5, #0]
 8014778:	b103      	cbz	r3, 801477c <_fstat_r+0x1c>
 801477a:	6023      	str	r3, [r4, #0]
 801477c:	bd38      	pop	{r3, r4, r5, pc}
 801477e:	bf00      	nop
 8014780:	20009968 	.word	0x20009968

08014784 <_isatty_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	2300      	movs	r3, #0
 8014788:	4d05      	ldr	r5, [pc, #20]	; (80147a0 <_isatty_r+0x1c>)
 801478a:	4604      	mov	r4, r0
 801478c:	4608      	mov	r0, r1
 801478e:	602b      	str	r3, [r5, #0]
 8014790:	f7ed f9d1 	bl	8001b36 <_isatty>
 8014794:	1c43      	adds	r3, r0, #1
 8014796:	d102      	bne.n	801479e <_isatty_r+0x1a>
 8014798:	682b      	ldr	r3, [r5, #0]
 801479a:	b103      	cbz	r3, 801479e <_isatty_r+0x1a>
 801479c:	6023      	str	r3, [r4, #0]
 801479e:	bd38      	pop	{r3, r4, r5, pc}
 80147a0:	20009968 	.word	0x20009968

080147a4 <_init>:
 80147a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a6:	bf00      	nop
 80147a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147aa:	bc08      	pop	{r3}
 80147ac:	469e      	mov	lr, r3
 80147ae:	4770      	bx	lr

080147b0 <_fini>:
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b2:	bf00      	nop
 80147b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147b6:	bc08      	pop	{r3}
 80147b8:	469e      	mov	lr, r3
 80147ba:	4770      	bx	lr
